{
    "docs": [
        {
            "location": "/", 
            "text": "MATRIX Ecosystem Overview\n\n\nObjective: Hardware shouldn't be hard\n\nThe MATRIX Ecosystem was created to make powerful hardware projects very approachable for software developers. The pillars of MATRIX, computer vision, hardware interfaces, distributed internet communication, and data-driven end-user clients, are all programming disciplines which require years for an individual to master, or for a team to build a solution around.\n\n\n\n\nProgramming Layers\n\n\nThe MATRIX platform adds powerful capabilities to your Raspberry Pi, depending on your background and the kind of application you want to write, you may need to decide on which layer best fits your need. The documentation is organized according to these layers:\n\n\n\n\nMATRIX Open System (MOS)\n\n\n\nLanguage:\n Javascript\n\n\nHighest level of abstraction integrating with MATRIX hardware via \nMATRIX CORE\n. This layer requires an online connection and offers an integrated IoT environment that's easy to use.\n\n\n\n\nRemote App Deployment\n\n\nMobile Interface\n\n\nOnline Dashboard\n\n\nApp Store\n\n\n\n\n\u26a0\ufe0f \nCURRENTLY UNDER MAINTENANCE\n \u26a0\ufe0f\n\n\nRead more about MATRIX OS\n\n\nMATRIX CORE\n\n\n\nLanguages:\n Over 40 (Examples in Javascript \n Python)\n\n\nAbstraction layer for \nMATRIX HAL\n. Hosts a ZeroMQ + Protobuf communication layer which makes device information accessible via high-level interfaces. Supports 40+ different languages through Protocol Buffers: C++, Python, Ruby, PHP, Java, etc.\n\n\nRead more about MATRIX CORE\n\n\nMATRIX HAL\n\n\n\nLanguage:\n C++\n\n\nInteracts with the kernel modules by using C++ drivers, enabling it to access available sensors and components on your device.\n\n\nRead more about MATRIX HAL\n\n\n\n\nDevices\n\n\n\n\nEach programming layer in the MATRIX platform is compatible with each MATRIX product, excluding specific components on the boards.\n\n\n\n\nMATRIX Creator\n\n\n\n\n\n\nA fully-featured development board for the Raspberry Pi with various sensors and communication protocols such as a 3D Gyroscope, Accelerometer, an 8 Microphone Array, zigbee, Z-Wave, and more!\n\n\nRead more about the MATRIX Creator\n\n\nMATRIX Voice\n\n\n\n\n\n\nA voice and audio focused development board with an 8 microphone array that enables you to create your own audio driven applications or use voice assistants such as \n\nAmazon Alexa\n, \n\nGoogle Assistant\n, \nPocketSphinx, etc.\n\n\nRead more about the MATRIX Voice\n\n\n\n\nSupport\n\n\n\n\nPost questions or comments on \ncommunity.matrix.one\n\n\nAlert issues on our \nGitHub\n under the corresponding repository\n\n\nSubmit documentation issues or improvements to the \nMATRIX Documentation Repository", 
            "title": "Overview"
        }, 
        {
            "location": "/#matrix-ecosystem-overview", 
            "text": "", 
            "title": "MATRIX Ecosystem Overview"
        }, 
        {
            "location": "/#programming-layers", 
            "text": "The MATRIX platform adds powerful capabilities to your Raspberry Pi, depending on your background and the kind of application you want to write, you may need to decide on which layer best fits your need. The documentation is organized according to these layers:", 
            "title": "Programming Layers"
        }, 
        {
            "location": "/#devices", 
            "text": "Each programming layer in the MATRIX platform is compatible with each MATRIX product, excluding specific components on the boards.", 
            "title": "Devices"
        }, 
        {
            "location": "/#support", 
            "text": "Post questions or comments on  community.matrix.one  Alert issues on our  GitHub  under the corresponding repository  Submit documentation issues or improvements to the  MATRIX Documentation Repository", 
            "title": "Support"
        }, 
        {
            "location": "/matrix-creator/overview/", 
            "text": "MATRIX Creator\n\n\n\n\nThe MATRIX Creator is a fully-featured development board, including sensors, wireless communications, and an FPGA. MATRIX Creator was built with a mission to give every maker, tinkerer, and developer around the world a complete, affordable, and user-friendly tool for simple to complex Internet of Things (IoT) app creation.\n\n\nOverview\n\n\nDevice Setup\n\nHow to get started with your MATRIX Creator\n\n\nResources\n\n\n\nView and download helpful information about the MATRIX Creator", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-creator/overview/#matrix-creator", 
            "text": "The MATRIX Creator is a fully-featured development board, including sensors, wireless communications, and an FPGA. MATRIX Creator was built with a mission to give every maker, tinkerer, and developer around the world a complete, affordable, and user-friendly tool for simple to complex Internet of Things (IoT) app creation.", 
            "title": "MATRIX Creator"
        }, 
        {
            "location": "/matrix-creator/overview/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-creator/device-setup/", 
            "text": "Hardware Prerequisites\n\n\n\n\nMATRIX Creator\n\n\nCompatible Raspberry Pi:\n\n\n3 Model B+\n\n\n3 Model B\n\n\n2 Model B\n\n\n1 Model B+\n\n\nZero\n\n\nZero W\n\n\n\n\n\n\n5V 2.5A Micro USB Power Supply\n\n\nMicroSD Card With \nRaspbian Stretch\n Lite or Desktop Installed\n\n\nWe recommend using \nEtcher.io\n for easy flashing\n\n\n\n\n\n\n\n\nDevice Installation\n\n\n\n\nSteps\n\n\n\n\nInsert flashed microSD card into Raspberry Pi\n\n\nAttach MATRIX Creator onto Raspberry Pi GPIO pins\n\n\nPower Raspberry Pi with micro USB power supply\n\n\n\n\nChoosing A Programming Environment\n\n\nAfter your MATRIX Creator is setup, visit \nEcosystem Overview\n for information about the three programming environments available to you in the MATRIX platform.", 
            "title": "Device Setup"
        }, 
        {
            "location": "/matrix-creator/device-setup/#hardware-prerequisites", 
            "text": "MATRIX Creator  Compatible Raspberry Pi:  3 Model B+  3 Model B  2 Model B  1 Model B+  Zero  Zero W    5V 2.5A Micro USB Power Supply  MicroSD Card With  Raspbian Stretch  Lite or Desktop Installed  We recommend using  Etcher.io  for easy flashing", 
            "title": "Hardware Prerequisites"
        }, 
        {
            "location": "/matrix-creator/device-setup/#device-installation", 
            "text": "", 
            "title": "Device Installation"
        }, 
        {
            "location": "/matrix-creator/device-setup/#choosing-a-programming-environment", 
            "text": "After your MATRIX Creator is setup, visit  Ecosystem Overview  for information about the three programming environments available to you in the MATRIX platform.", 
            "title": "Choosing A Programming Environment"
        }, 
        {
            "location": "/matrix-creator/resources/overview/", 
            "text": "Resources\n\n\nPinout\n\n\n\nLists and labels of the MATRIX Creator's Pinouts\n\n\nMicrophones\n\n\n\nMicrophone drivers, sample rate, and board position\n\n\nReference Models\n\n\n\nDownload or view the Matrix Creator's 3D models and case\n\n\nSystem Architecture\n\n\n\nView a technical diagram of the MATRIX Creator architecture.\n\n\nTechnical Datasheets\n\n\n\nPDFs of MATRIX Creator Components", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-creator/resources/overview/#resources", 
            "text": "", 
            "title": "Resources"
        }, 
        {
            "location": "/matrix-creator/resources/pinout/", 
            "text": "Expansion GPIO\n\n\n\n\n\n\nRev 1 Boards do not include pin 25 \n 26. Rev 2 boards can be identified if there is a QR code sticker on the MATRIX Creator's face.\n\n\n\n\nRaspberry Pi GPIO\n\n\n\n\nGPIO Locations", 
            "title": "Pinout"
        }, 
        {
            "location": "/matrix-creator/resources/pinout/#expansion-gpio", 
            "text": "Rev 1 Boards do not include pin 25   26. Rev 2 boards can be identified if there is a QR code sticker on the MATRIX Creator's face.", 
            "title": "Expansion GPIO"
        }, 
        {
            "location": "/matrix-creator/resources/pinout/#raspberry-pi-gpio", 
            "text": "", 
            "title": "Raspberry Pi GPIO"
        }, 
        {
            "location": "/matrix-creator/resources/pinout/#gpio-locations", 
            "text": "", 
            "title": "GPIO Locations"
        }, 
        {
            "location": "/matrix-creator/resources/microphone/", 
            "text": "Microphone Array on MATRIX Creator\n\n\n\n\nAudio Specifications\n\n\nSample Rate: 8 to 96 kHz\nBit Depth: Signed 16 bit\n\n\nPosition [x,y] of each mic in the array (mm)\n\n\n\n\n\n\n\n\n\nMic\n\n\nX\n\n\nY\n\n\n\n\n\n\n\n\n\n\nM1\n\n\n20.0908795\n\n\n-48.5036755\n\n\n\n\n\n\nM2\n\n\n-20.0908795\n\n\n-48.5036755\n\n\n\n\n\n\nM3\n\n\n-48.5036755\n\n\n-20.0908795\n\n\n\n\n\n\nM4\n\n\n-48.5036755\n\n\n20.0908795\n\n\n\n\n\n\nM5\n\n\n-20.0908795\n\n\n48.5036755\n\n\n\n\n\n\nM6\n\n\n20.0908795\n\n\n48.5036755\n\n\n\n\n\n\nM7\n\n\n48.5036755\n\n\n20.0908795\n\n\n\n\n\n\nM8\n\n\n48.5036755\n\n\n-20.0908795\n\n\n\n\n\n\n\n\nConnection to the FPGA\n\n\n\nYou can check the physical connection between the FPGA and other components in \n\ncreator.ucf\n\n\n\n\n\n\n\n\nMic\n\n\nFPGA pin\n\n\nPDM_Data\n\n\n\n\n\n\n\n\n\n\nM1\n\n\nP45\n\n\npdm_data\n0\n\n\n\n\n\n\nM2\n\n\nP46\n\n\npdm_data\n1\n\n\n\n\n\n\nM3\n\n\nP47\n\n\npdm_data\n2\n\n\n\n\n\n\nM4\n\n\nP58\n\n\npdm_data\n3\n\n\n\n\n\n\nM5\n\n\nP59\n\n\npdm_data\n4\n\n\n\n\n\n\nM6\n\n\nP64\n\n\npdm_data\n5\n\n\n\n\n\n\nM7\n\n\nP65\n\n\npdm_data\n6\n\n\n\n\n\n\nM8\n\n\nP44\n\n\npdm_data\n7\n\n\n\n\n\n\nCLK\n\n\nP47\n\n\npdm_clk", 
            "title": "Microphone"
        }, 
        {
            "location": "/matrix-creator/resources/microphone/#microphone-array-on-matrix-creator", 
            "text": "", 
            "title": "Microphone Array on MATRIX Creator"
        }, 
        {
            "location": "/matrix-creator/resources/microphone/#audio-specifications", 
            "text": "Sample Rate: 8 to 96 kHz\nBit Depth: Signed 16 bit", 
            "title": "Audio Specifications"
        }, 
        {
            "location": "/matrix-creator/resources/reference-models/", 
            "text": "Board Model\n\n\nTop View\n\n\n\n\nBottom View\n\n\n\n\n\nModel Download\n\n\n\nAccess to 3D models \nhere\n. Also, you can take a look online \n\nhere\n.\n\n\nCase Model\n\n\nPrinted Case\n\n\n\n\nModel Download\n\n\n\nAccess to 3D case models \nhere\n.", 
            "title": "Reference Models"
        }, 
        {
            "location": "/matrix-creator/resources/reference-models/#board-model", 
            "text": "", 
            "title": "Board Model"
        }, 
        {
            "location": "/matrix-creator/resources/reference-models/#case-model", 
            "text": "", 
            "title": "Case Model"
        }, 
        {
            "location": "/matrix-creator/resources/system-architecture/", 
            "text": "System Architecture", 
            "title": "System Architecture"
        }, 
        {
            "location": "/matrix-creator/resources/system-architecture/#system-architecture", 
            "text": "", 
            "title": "System Architecture"
        }, 
        {
            "location": "/matrix-creator/resources/technical-datasheets/", 
            "text": "Datasheets:\n\n\n\n\n\n\nAtmel 32 bits Cortex M3 SAM3S2\n\n\n\n\n\n\nXilinx Spartan 6S XC6SLX4 FPGA\n\n\n\n\n\n\n8 MEMS audio sensor digital microphones\n\n\n\n\n\n\nST LSM9DS1 3D accelerometer, 3D gyroscope, 3D magnetometer\n\n\n\n\n\n\nST HTS221 digital sensor for relative humidity and temperature\n\n\n\n\n\n\nNXP PN512 NFC reader\n\n\n\n\n\n\nNXP MPL3115A2 Altimeter\n\n\n\n\n\n\nVishay VEML6070 UV Light Sensor\n\n\n\n\n\n\nVishay INFRARED Receptor\n\n\n\n\n\n\nRGBW everloop LED", 
            "title": "Technical Datasheets"
        }, 
        {
            "location": "/matrix-creator/resources/technical-datasheets/#datasheets", 
            "text": "Atmel 32 bits Cortex M3 SAM3S2    Xilinx Spartan 6S XC6SLX4 FPGA    8 MEMS audio sensor digital microphones    ST LSM9DS1 3D accelerometer, 3D gyroscope, 3D magnetometer    ST HTS221 digital sensor for relative humidity and temperature    NXP PN512 NFC reader    NXP MPL3115A2 Altimeter    Vishay VEML6070 UV Light Sensor    Vishay INFRARED Receptor    RGBW everloop LED", 
            "title": "Datasheets:"
        }, 
        {
            "location": "/matrix-voice/overview/", 
            "text": "MATRIX Voice\n\n\n\n\nThe MATRIX Voice is a development board for building sound driven behaviors and interfaces. MATRIX Voice was built with a mission to give every maker, tinkerer, and developer around the world a complete, affordable, and user-friendly tool for simple to complex Internet of Things (IoT) voice app creation.\n\n\nOverview\n\n\nDevice Setup\n\n\n\nHow to get started with your MATRIX Voice \n MATRIX Voice ESP32 version\n\n\nESP32\n\n\n\nInstructions to setup your ESP32 module\n\n\nResources\n\n\n\nView and download helpful information about the MATRIX Voice\n\n\nBoard Versions\n\n\nBoth versions of these boards run the same on a Raspberry Pi, however, the MATRIX Voice ESP32 version has the option to run standalone by programming the ESP32 module.", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-voice/overview/#matrix-voice", 
            "text": "The MATRIX Voice is a development board for building sound driven behaviors and interfaces. MATRIX Voice was built with a mission to give every maker, tinkerer, and developer around the world a complete, affordable, and user-friendly tool for simple to complex Internet of Things (IoT) voice app creation.", 
            "title": "MATRIX Voice"
        }, 
        {
            "location": "/matrix-voice/overview/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-voice/overview/#board-versions", 
            "text": "Both versions of these boards run the same on a Raspberry Pi, however, the MATRIX Voice ESP32 version has the option to run standalone by programming the ESP32 module.", 
            "title": "Board Versions"
        }, 
        {
            "location": "/matrix-voice/device-setup/", 
            "text": "Hardware Prerequisites\n\n\n\n\nMATRIX Voice\n\n\nCompatible Raspberry Pi:\n\n\n3 Model B+\n\n\n3 Model B\n\n\n2 Model B\n\n\n1 Model B+\n\n\nZero\n\n\nZero W\n\n\n\n\n\n\n5V 2.5A Micro USB Power Supply\n\n\nMicroSD Card With \nRaspbian Stretch\n Lite or Desktop Installed\n\n\nWe recommend using \nEtcher.io\n for easy flashing\n\n\n\n\n\n\n\n\nDevice Installation\n\n\n\n\nSteps\n\n\n\n\nInsert flashed microSD card into Raspberry Pi\n\n\nAttach MATRIX Voice onto Raspberry Pi GPIO pins\n\n\nPower Raspberry Pi with micro USB power supply\n\n\n\n\n\n\nThe yellow startup LED sequence (with 1 LED off) will be removed when a programming environment is installed.\n\n\n\n\nChoosing A Programming Environment\n\n\nAfter your MATRIX Voice is setup, visit \nEcosystem Overview\n for information about the three programming environments available to you in the MATRIX platform.\n\n\n\n\nAll 3 programming environments are compatible with the MATRIX Voice \n MATRIX Voice ESP32 version on a Raspberry Pi.  \n\n\n\n\nESP32 Setup\n\n\nUsers with a MATRIX Voice ESP32 version can also follow this \nguide\n on how to program their ESP32 module.", 
            "title": "Device Setup"
        }, 
        {
            "location": "/matrix-voice/device-setup/#hardware-prerequisites", 
            "text": "MATRIX Voice  Compatible Raspberry Pi:  3 Model B+  3 Model B  2 Model B  1 Model B+  Zero  Zero W    5V 2.5A Micro USB Power Supply  MicroSD Card With  Raspbian Stretch  Lite or Desktop Installed  We recommend using  Etcher.io  for easy flashing", 
            "title": "Hardware Prerequisites"
        }, 
        {
            "location": "/matrix-voice/device-setup/#device-installation", 
            "text": "", 
            "title": "Device Installation"
        }, 
        {
            "location": "/matrix-voice/device-setup/#choosing-a-programming-environment", 
            "text": "After your MATRIX Voice is setup, visit  Ecosystem Overview  for information about the three programming environments available to you in the MATRIX platform.   All 3 programming environments are compatible with the MATRIX Voice   MATRIX Voice ESP32 version on a Raspberry Pi.", 
            "title": "Choosing A Programming Environment"
        }, 
        {
            "location": "/matrix-voice/device-setup/#esp32-setup", 
            "text": "Users with a MATRIX Voice ESP32 version can also follow this  guide  on how to program their ESP32 module.", 
            "title": "ESP32 Setup"
        }, 
        {
            "location": "/matrix-voice/esp32/", 
            "text": "ESP32 Setup\n\n\nThis guide will show you how to get started with the ESP32 module on the MATRIX Voice ESP32 version.\n\n\nStep 1: Raspberry Pi Setup\n\n\nRun the following commands inside your Raspberry Pi terminal to install the MATRIX Voice Software. This will keep the FPGA firmware updated and install few tools to flash the ESP-WROOM-32.\n\n\n# Add repo and key\ncurl https://apt.matrix.one/doc/apt-key.gpg | sudo apt-key add -\necho \ndeb https://apt.matrix.one/raspbian $(lsb_release -sc) main\n | sudo tee /etc/apt/sources.list.d/matrixlabs.list\n# Update packages and install\nsudo apt-get update\nsudo apt-get upgrade\n# Installation\nsudo apt install matrixio-creator-init\n\n\n\n\nReboot your Raspberry Pi to make sure all the required services are running.\n\n\nStep 2: Personal Computer Setup\n\n\nHere we're installing the requirements needed to allow your pc to develop and compile ESP32 projects.\n\n\nInstall Git:\n\n\n\n\nhttps://git-scm.com/downloads\n\n\n\n\nInstall ESP32 toolchain:\n\n\n\n\nLinux: \nhttps://esp-idf.readthedocs.io/en/latest/get-started/linux-setup.html\n\n\nMac: \nhttps://esp-idf.readthedocs.io/en/latest/get-started/macos-setup.html\n\n\nWindows: \nhttps://esp-idf.readthedocs.io/en/latest/get-started/windows-setup.html\n(currently not functioning)\n\n\nStop Following when you reach \"Next Steps\"\n\n\n\n\nSetup ESP-IDF development framework:\n\n\n\n\nDownload ESP-IDF: \nhttps://esp-idf.readthedocs.io/en/latest/get-started/index.html#get-esp-idf\n\n\nSet ESP-IDF Path: \nhttps://esp-idf.readthedocs.io/en/latest/get-started/add-idf_path-to-profile.html\n\n\n\n\nClone MATRIX Voice ESP32 repository\n\n\nThis repository contains the necessary libraries to control the MATRIX Voice's components.\n\n\n# windows must be using MINGw32 terminal from toolchain step\ngit clone https://github.com/matrix-io/matrixio_hal_esp32.git\n\n\n\n\nStep 3: Build and Deploy\n\n\nHere we will be deploying and running one of the example apps in the Repository we just downloaded.\n\n\nConfiguring IDF (one time setup):\n\n\ncd matrixio_hal_esp32/examples/mic_energy/\nmake menuconfig\n\n\n\n\n\n\nYou will now be taken to the IDF Configuration screen, as shown above. Once there, select the \n option to save default configuration.\n\n\nRunning example project:\n\n\nTo finish running the example, all that's left is to make and deploy the code to the Raspberry Pi. This requires the Pi's IP address and you will be prompted to insert the Pi's password as well.\n\n\nexport RPI_HOST=pi@RASPBERRY_IP_ADDRESS\nmake deploy\n\n\n\n\nStep 4: Finishing Up\n\n\n\n\nYour MATRIX Voice ESP32 should now be running the deployed example. With the program properly flashed in the ESP32, the Voice can now run without the Pi if you choose to do so. Ensure the MATRIX Voice and Pi are not powered before connecting or disconnecting.", 
            "title": "ESP32"
        }, 
        {
            "location": "/matrix-voice/esp32/#esp32-setup", 
            "text": "This guide will show you how to get started with the ESP32 module on the MATRIX Voice ESP32 version.", 
            "title": "ESP32 Setup"
        }, 
        {
            "location": "/matrix-voice/esp32/#step-1-raspberry-pi-setup", 
            "text": "Run the following commands inside your Raspberry Pi terminal to install the MATRIX Voice Software. This will keep the FPGA firmware updated and install few tools to flash the ESP-WROOM-32.  # Add repo and key\ncurl https://apt.matrix.one/doc/apt-key.gpg | sudo apt-key add -\necho  deb https://apt.matrix.one/raspbian $(lsb_release -sc) main  | sudo tee /etc/apt/sources.list.d/matrixlabs.list\n# Update packages and install\nsudo apt-get update\nsudo apt-get upgrade\n# Installation\nsudo apt install matrixio-creator-init  Reboot your Raspberry Pi to make sure all the required services are running.", 
            "title": "Step 1: Raspberry Pi Setup"
        }, 
        {
            "location": "/matrix-voice/esp32/#step-2-personal-computer-setup", 
            "text": "Here we're installing the requirements needed to allow your pc to develop and compile ESP32 projects.  Install Git:   https://git-scm.com/downloads   Install ESP32 toolchain:   Linux:  https://esp-idf.readthedocs.io/en/latest/get-started/linux-setup.html  Mac:  https://esp-idf.readthedocs.io/en/latest/get-started/macos-setup.html  Windows:  https://esp-idf.readthedocs.io/en/latest/get-started/windows-setup.html (currently not functioning)  Stop Following when you reach \"Next Steps\"   Setup ESP-IDF development framework:   Download ESP-IDF:  https://esp-idf.readthedocs.io/en/latest/get-started/index.html#get-esp-idf  Set ESP-IDF Path:  https://esp-idf.readthedocs.io/en/latest/get-started/add-idf_path-to-profile.html   Clone MATRIX Voice ESP32 repository  This repository contains the necessary libraries to control the MATRIX Voice's components.  # windows must be using MINGw32 terminal from toolchain step\ngit clone https://github.com/matrix-io/matrixio_hal_esp32.git", 
            "title": "Step 2: Personal Computer Setup"
        }, 
        {
            "location": "/matrix-voice/esp32/#step-3-build-and-deploy", 
            "text": "Here we will be deploying and running one of the example apps in the Repository we just downloaded.  Configuring IDF (one time setup):  cd matrixio_hal_esp32/examples/mic_energy/\nmake menuconfig   You will now be taken to the IDF Configuration screen, as shown above. Once there, select the   option to save default configuration.  Running example project:  To finish running the example, all that's left is to make and deploy the code to the Raspberry Pi. This requires the Pi's IP address and you will be prompted to insert the Pi's password as well.  export RPI_HOST=pi@RASPBERRY_IP_ADDRESS\nmake deploy", 
            "title": "Step 3: Build and Deploy"
        }, 
        {
            "location": "/matrix-voice/esp32/#step-4-finishing-up", 
            "text": "Your MATRIX Voice ESP32 should now be running the deployed example. With the program properly flashed in the ESP32, the Voice can now run without the Pi if you choose to do so. Ensure the MATRIX Voice and Pi are not powered before connecting or disconnecting.", 
            "title": "Step 4: Finishing Up"
        }, 
        {
            "location": "/matrix-voice/resources/overview/", 
            "text": "Resources\n\n\nPinout\n\n\n\nLists and labels of the MATRIX Voice's Pinouts\n\n\nMicrophones\n\n\n\nMicrophone drivers, sample rate, and board position\n\n\nReference Models\n\n\n\nDownload or view the Matrix Voice's 3D models\n\n\nSystem Architecture\n\n\n\nView a technical diagram of the MATRIX Voice architecture\n\n\nTechnical Datasheets\n\n\n\nPDFs of MATRIX Creator Components", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-voice/resources/overview/#resources", 
            "text": "", 
            "title": "Resources"
        }, 
        {
            "location": "/matrix-voice/resources/pinout/", 
            "text": "Expansion GPIO\n\n\n\n\nRaspberry Pi GPIO\n\n\n\n\nGPIO Locations", 
            "title": "Pinout"
        }, 
        {
            "location": "/matrix-voice/resources/pinout/#expansion-gpio", 
            "text": "", 
            "title": "Expansion GPIO"
        }, 
        {
            "location": "/matrix-voice/resources/pinout/#raspberry-pi-gpio", 
            "text": "", 
            "title": "Raspberry Pi GPIO"
        }, 
        {
            "location": "/matrix-voice/resources/pinout/#gpio-locations", 
            "text": "", 
            "title": "GPIO Locations"
        }, 
        {
            "location": "/matrix-voice/resources/microphone/", 
            "text": "Microphone Array on MATRIX Voice\n\n\n\n\nAudio specs\n\n\nSample Rate: 8 to 96 kHz\nBit Depth: Signed 16 bit\n\n\nPosition [x,y] of each mic in the array (mm)\n\n\n\n\n\n\n\n\n\nMic\n\n\nX\n\n\nY\n\n\n\n\n\n\n\n\n\n\nM1\n\n\n00.00\n\n\n0.00\n\n\n\n\n\n\nM2\n\n\n-38.13\n\n\n3.58\n\n\n\n\n\n\nM3\n\n\n-20.98\n\n\n32.04\n\n\n\n\n\n\nM4\n\n\n11.97\n\n\n36.38\n\n\n\n\n\n\nM5\n\n\n35.91\n\n\n13.32\n\n\n\n\n\n\nM6\n\n\n32.81\n\n\n-19.77\n\n\n\n\n\n\nM7\n\n\n5.00\n\n\n-37.97\n\n\n\n\n\n\nM8\n\n\n-26.57\n\n\n-27.58\n\n\n\n\n\n\n\n\nConnection to the FPGA\n\n\n\n\n\n\n\n\n\nMic\n\n\nFPGA pin\n\n\nPDM_Data\n\n\n\n\n\n\n\n\n\n\nM1\n\n\nE6\n\n\npdm_data\n0\n\n\n\n\n\n\nM2\n\n\nB8\n\n\npdm_data\n1\n\n\n\n\n\n\nM3\n\n\nA8\n\n\npdm_data\n2\n\n\n\n\n\n\nM4\n\n\nC7\n\n\npdm_data\n3\n\n\n\n\n\n\nM5\n\n\nA7\n\n\npdm_data\n4\n\n\n\n\n\n\nM6\n\n\nA6\n\n\npdm_data\n5\n\n\n\n\n\n\nM7\n\n\nB6\n\n\npdm_data\n6\n\n\n\n\n\n\nM8\n\n\nA5\n\n\npdm_data\n7\n\n\n\n\n\n\nCLK\n\n\nB5\n\n\npdm_clk", 
            "title": "Microphone"
        }, 
        {
            "location": "/matrix-voice/resources/microphone/#microphone-array-on-matrix-voice", 
            "text": "", 
            "title": "Microphone Array on MATRIX Voice"
        }, 
        {
            "location": "/matrix-voice/resources/microphone/#audio-specs", 
            "text": "Sample Rate: 8 to 96 kHz\nBit Depth: Signed 16 bit", 
            "title": "Audio specs"
        }, 
        {
            "location": "/matrix-voice/resources/reference-models/", 
            "text": "Board Model\n\n\nTop View\n\n\n\n\nBottom View\n\n\n\n\n\nModel Download\n\n\n\nAccess to 3D models \nhere\n. Also, you can take a look online \n\nhere\n.", 
            "title": "Reference Models"
        }, 
        {
            "location": "/matrix-voice/resources/reference-models/#board-model", 
            "text": "", 
            "title": "Board Model"
        }, 
        {
            "location": "/matrix-voice/resources/system-architecture/", 
            "text": "System Architecture", 
            "title": "System Architecture"
        }, 
        {
            "location": "/matrix-voice/resources/system-architecture/#system-architecture", 
            "text": "", 
            "title": "System Architecture"
        }, 
        {
            "location": "/matrix-voice/resources/technical-datasheets/", 
            "text": "Datasheets:\n\n\n\n\n\n\nXilinx Spartan 6 FPGA - XC6SLX9-2FTG256C\n\n\n\n\n\n\n8 MEMS audio sensor digital microphones - MP34DB02\n\n\n\n\n\n\nSerial Flash 64MBIT - MX25L6406E\n\n\n\n\n\n\nDDR2 SDRAM 512MBIT - MT47H32M16\n\n\n\n\n\n\n3W Stereo Class-D Audio Amplifier and Class-AB Headphone Driver - PAM8019\n\n\n\n\n\n\nRGBW LED - SK6812RGBW\n\n\n\n\n\n\nESP32-WROOM", 
            "title": "Technical Datasheets"
        }, 
        {
            "location": "/matrix-voice/resources/technical-datasheets/#datasheets", 
            "text": "Xilinx Spartan 6 FPGA - XC6SLX9-2FTG256C    8 MEMS audio sensor digital microphones - MP34DB02    Serial Flash 64MBIT - MX25L6406E    DDR2 SDRAM 512MBIT - MT47H32M16    3W Stereo Class-D Audio Amplifier and Class-AB Headphone Driver - PAM8019    RGBW LED - SK6812RGBW    ESP32-WROOM", 
            "title": "Datasheets:"
        }, 
        {
            "location": "/matrix-os/overview/", 
            "text": "MATRIX Open System\n\n\n\n\u26a0\ufe0f \nCURRENTLY UNDER MAINTENANCE\n \u26a0\ufe0f\n\n\nMATRIX Open System (MOS) is open source software for hosting IoT applications. MATRIX Open System runs on node.js, and initially, applications will be written in JavaScript. The current workflow of this platform it to deploy and install apps into your MATRIX device, from a separate computer, anywhere in the world.\n\n\nGetting Started\n\n\nLearn how to install MOS and create applications for your MATRIX device.\n\n\nReference\n\n\nLook over the MATRIX Open System SDK to see the current libraries and features we have to offer. This includes CLI tool commands, sensors/component references, dashboard, and many other vital configurations needed to take full advantage of MOS.\n\n\nExamples\n\n\nTake a look at the example to show you how you can create a simple dashboard setup for your MOS application.\n\n\nMobile Applications\n\n\nAccess and manage your MATRIX devices with the mobile apps\n\n\n\n\n\n\nApple Store\n\n\n\n\n\n\n\n\nPlay Store\n\n\n\n\nTroubleshooting\n\n\nLook at common debugging solutions for any issues you encounter.", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-os/overview/#getting-started", 
            "text": "Learn how to install MOS and create applications for your MATRIX device.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/matrix-os/overview/#reference", 
            "text": "Look over the MATRIX Open System SDK to see the current libraries and features we have to offer. This includes CLI tool commands, sensors/component references, dashboard, and many other vital configurations needed to take full advantage of MOS.", 
            "title": "Reference"
        }, 
        {
            "location": "/matrix-os/overview/#examples", 
            "text": "Take a look at the example to show you how you can create a simple dashboard setup for your MOS application.", 
            "title": "Examples"
        }, 
        {
            "location": "/matrix-os/overview/#mobile-applications", 
            "text": "Access and manage your MATRIX devices with the mobile apps    Apple Store     Play Store", 
            "title": "Mobile Applications"
        }, 
        {
            "location": "/matrix-os/overview/#troubleshooting", 
            "text": "Look at common debugging solutions for any issues you encounter.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/matrix-os/getting-started/", 
            "text": "Getting Started\n\n\nInstallation\n\n\n\n\n\nLearn how to install MOS and the MATRIX CLI tool.\n\n\nApplications\n\n\n\n\n\nCreate and deploy a sample app for your MATRIX device.\n\n\nPublishing Apps\n\n\n\n\n\nFreely publish MATRIX applications to the MATRIX App store.", 
            "title": "Index"
        }, 
        {
            "location": "/matrix-os/getting-started/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/matrix-os/getting-started/installation/", 
            "text": "Installing MOS\n\n\n\nPrerequisites\n\n\n\n\nMake sure you have setup your \n\nMATRIX Creator\n or \n\nMATRIX Voice\n before continuing.\n\n\n\n\nSoftware\n\n\n\n\n\nNode.js\n\n\nCommand Line Interface:\n\n\nmacOS: Terminal\n\n\nWindows: \nPuTTY\n\n\nLinux: Terminal\n\n\n\n\n\n\n\n\nComputer Installation \n Account Registration\n\n\n\n\nWe recommend running the following commands on your Desktop/Laptop and not on your Raspberry Pi.\n\n\n\n\nMOS contains a CLI (Command Line Interface) tool for controlling and managing your MATRIX devices. To install the tool, execute the following command in your personal computer's terminal.\n\n\nnpm install -g matrix-cli\n\n\n\n\nOnce installed, the CLI tool needs to be configured by registering and then logging into a MATRIX Labs account.\n\n\nmatrix register\nmatrix login\n\n\n\n\nWith an account logged into the CLI tool, you can now register your MATRIX device. This will prompt you to enter a name and description for the device.\n\n\nmatrix register device\n\n\n\n\nAfter the device is created, a set of unique login credentials will be generated for you. Save these credentials because they are necessary to link your MATRIX Labs account to your MATRIX device. Below is an example of the generated credentials.\n\n\nexport MATRIX_DEVICE_ID=dc7a1a71be2d\nexport MATRIX_DEVICE_SECRET=08629018e9d77h15i5n0t4r3alz0f06cd4f7e5544272b\n\n\n\n\n\n\nRaspberry Pi Setup\n\n\nAccess the terminal of your Raspberry Pi via an \nSSH-session\n or connect a screen, mouse, and keyboard. Then run the following commands to go into your home directory and install MOS on the Raspberry Pi. A reboot will occur when the installation is finished.\n\n\ncd ~/\ncurl https://raw.githubusercontent.com/matrix-io/matrix-creator-quickstart/master/install.sh | sh\n\n\n\n\nLinking Device To MATRIX Labs Account\n\n\n\nTo properly link your MATRIX device to your MATRIX Labs account, you need to create a file named \n.envrc\n in the home directory of the Raspberry Pi and then populate it with the device credentials you saved earlier. To create the \n.envrc\n file and add the device credentials, use the nano command below and paste your device credentials within the terminal editor. When you\u2019re done, press \nCtrl+X\n.\n\n\nnano ~/.envrc\n\n\n\n\nWith the \n.envrc\n file created, you need to make the credentials within visible to the shell by running the command below. MOS will then be able to read it and properly register your MATRIX device.\n\n\nsource ~/.envrc\n\n\n\n\nStart MOS with the following command!\n\n\nnode ~/matrix-os/index.js\n\n\n\n\n\n\nStarting MOS on boot is not yet implemented.\n\n\n\n\n\n\nCheck If Everything Works\n\n\nOpen the terminal on your Desktop/Laptop and type the following command with the device name or ID. This selects the MATRIX device you want to interact with.\n\n\nmatrix use YOUR_DEVICE_NAME_OR_ID\n\n\n\n\nOnce your device is selected, run these commands to verify that everything has installed properly. This installs and runs the HelloWorld app from the \nMATRIX App Store\n.\n\n\nmatrix install HelloWorld\nmatrix start HelloWorld\n\n\n\n\n\n\nYou should now see a rainbow LED sequence, like the one above, on your MATRIX Device. \n\n\nUse the following command to stop the app.\n\n\nmatrix stop HelloWorld\n\n\n\n\n\n\nWhen an app is stopped, the LEDs will keep the last color they were set to until set to a different color.\n\n\n\n\n\n\nNext Steps\n\n\nNow that everything is properly installed, learn how to create your own MATRIX app \nhere\n.", 
            "title": "Installation"
        }, 
        {
            "location": "/matrix-os/getting-started/installation/#prerequisites", 
            "text": "Make sure you have setup your  MATRIX Creator  or  MATRIX Voice  before continuing.", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/matrix-os/getting-started/installation/#computer-installation-account-registration", 
            "text": "We recommend running the following commands on your Desktop/Laptop and not on your Raspberry Pi.   MOS contains a CLI (Command Line Interface) tool for controlling and managing your MATRIX devices. To install the tool, execute the following command in your personal computer's terminal.  npm install -g matrix-cli  Once installed, the CLI tool needs to be configured by registering and then logging into a MATRIX Labs account.  matrix register\nmatrix login  With an account logged into the CLI tool, you can now register your MATRIX device. This will prompt you to enter a name and description for the device.  matrix register device  After the device is created, a set of unique login credentials will be generated for you. Save these credentials because they are necessary to link your MATRIX Labs account to your MATRIX device. Below is an example of the generated credentials.  export MATRIX_DEVICE_ID=dc7a1a71be2d\nexport MATRIX_DEVICE_SECRET=08629018e9d77h15i5n0t4r3alz0f06cd4f7e5544272b", 
            "title": "Computer Installation &amp; Account Registration"
        }, 
        {
            "location": "/matrix-os/getting-started/installation/#raspberry-pi-setup", 
            "text": "Access the terminal of your Raspberry Pi via an  SSH-session  or connect a screen, mouse, and keyboard. Then run the following commands to go into your home directory and install MOS on the Raspberry Pi. A reboot will occur when the installation is finished.  cd ~/\ncurl https://raw.githubusercontent.com/matrix-io/matrix-creator-quickstart/master/install.sh | sh", 
            "title": "Raspberry Pi Setup"
        }, 
        {
            "location": "/matrix-os/getting-started/installation/#check-if-everything-works", 
            "text": "Open the terminal on your Desktop/Laptop and type the following command with the device name or ID. This selects the MATRIX device you want to interact with.  matrix use YOUR_DEVICE_NAME_OR_ID  Once your device is selected, run these commands to verify that everything has installed properly. This installs and runs the HelloWorld app from the  MATRIX App Store .  matrix install HelloWorld\nmatrix start HelloWorld   You should now see a rainbow LED sequence, like the one above, on your MATRIX Device.   Use the following command to stop the app.  matrix stop HelloWorld   When an app is stopped, the LEDs will keep the last color they were set to until set to a different color.", 
            "title": "Check If Everything Works"
        }, 
        {
            "location": "/matrix-os/getting-started/installation/#next-steps", 
            "text": "Now that everything is properly installed, learn how to create your own MATRIX app  here .", 
            "title": "Next Steps"
        }, 
        {
            "location": "/matrix-os/getting-started/applications/", 
            "text": "Creating An Application\n\n\n\nIntroduction\n\n\nMOS applications allow you to easily utilize the components and sensors of your MATRIX device through Javascript. This IoT platform enables you to create applications and integrate them with any third party API to expand the functionality of your MATRIX device.\n\n\n\n\nInitial Setup\n\n\nMOS apps are designed to be developed outside your MATRIX device and deployed when you want to run your app. All that's required from your Raspberry Pi is to have MOS running.\n\n\n\n\nThe following commands will be entered in the terminal that you installed the MATRIX CLI tool in.\n\n\n\n\nUse the command below to create a MOS app which will generate a folder with the necessary files. You will be prompted to enter a quick description and optional keywords to describe this app.\n\n\nmatrix create YOUR_APP_NAME_HERE\n\n\n\n\nThe file structure will look like this:\n\n\nYOUR_APP_FOLDER\n    * app.js (Where you write your code)\n    * config.yaml (Configuration file for application)\n    * index.js (Imports MATRIX libraries for use in app.js)\n    * package.json (Defines npm modules to install on your MATRIX Device)\n    * README.MD (Readme file for MATRIX App Store)\n\n\n\n\nOpen the app.js file and paste the code below with any text editor.\n\n\nmatrix.led('green').render();//turn all LEDs green\n\n\n\n\n\n\nDeploying Your App\n\n\nWith your MOS app completed, all that's left to do is run the following commands to deploy and then start the app on your MATRIX device.\n\n\nmatrix deploy PATH_TO_YOUR_APP_HERE\nmatrix start YOUR_APP_NAME_HERE\n\n\n\n\nPreview\n\n\n\nThe interactive video below will show you the terminal outputs to expect from following this guide.\n\n\n\nResults\n\nWhen the MOS app runs, your MATRIX device should look like the image below.\n\n\n\n\n\n\nNext Steps\n\n\nView our \nreference page\n to see what you can with the MATRIX OS SDK or learn how to publish a MATRIX app \nhere\n.", 
            "title": "Applications"
        }, 
        {
            "location": "/matrix-os/getting-started/applications/#introduction", 
            "text": "MOS applications allow you to easily utilize the components and sensors of your MATRIX device through Javascript. This IoT platform enables you to create applications and integrate them with any third party API to expand the functionality of your MATRIX device.", 
            "title": "Introduction"
        }, 
        {
            "location": "/matrix-os/getting-started/applications/#initial-setup", 
            "text": "MOS apps are designed to be developed outside your MATRIX device and deployed when you want to run your app. All that's required from your Raspberry Pi is to have MOS running.   The following commands will be entered in the terminal that you installed the MATRIX CLI tool in.   Use the command below to create a MOS app which will generate a folder with the necessary files. You will be prompted to enter a quick description and optional keywords to describe this app.  matrix create YOUR_APP_NAME_HERE  The file structure will look like this:  YOUR_APP_FOLDER\n    * app.js (Where you write your code)\n    * config.yaml (Configuration file for application)\n    * index.js (Imports MATRIX libraries for use in app.js)\n    * package.json (Defines npm modules to install on your MATRIX Device)\n    * README.MD (Readme file for MATRIX App Store)  Open the app.js file and paste the code below with any text editor.  matrix.led('green').render();//turn all LEDs green", 
            "title": "Initial Setup"
        }, 
        {
            "location": "/matrix-os/getting-started/applications/#deploying-your-app", 
            "text": "With your MOS app completed, all that's left to do is run the following commands to deploy and then start the app on your MATRIX device.  matrix deploy PATH_TO_YOUR_APP_HERE\nmatrix start YOUR_APP_NAME_HERE", 
            "title": "Deploying Your App"
        }, 
        {
            "location": "/matrix-os/getting-started/applications/#next-steps", 
            "text": "View our  reference page  to see what you can with the MATRIX OS SDK or learn how to publish a MATRIX app  here .", 
            "title": "Next Steps"
        }, 
        {
            "location": "/matrix-os/getting-started/publishing/", 
            "text": "Publishing your Application\n\n\n\n\n\nMATRIX App Store is in \nearly development\n. All applications may be reviewed and are subject to removal at any time.\n\n\n\n\nMATRIX applications can be published to the \nMATRIX App Store\n for users to share their IoT creations with the community.\n\n\n\n\n\n\nBefore publishing an application.\n\n\nEnsure Meta Information is Accurate\n\n\n\nThe following information goes into your MATRIX application's \nconfig.yaml\n. The contents of your app's \nREADME.md\n will be shown on its detail page, along with any images provided.\n\n\nRequired Meta Information\n\n\n\n\n\n\nname\n - The CLI command \nmatrix install\n will use this to find your app.\n\n\n\n\n\n\ndescription\n - Mini description shown in app preview.\n\n\n\n\n\n\ndisplayName\n - Name shown on the app store.\n\n\n\n\n\n\nOptional Meta Information:\n\n\n\n\n\n\nimageUrls\n - will be used on the detail page\n\n\n\n\n\n\ngalleryUrl\n - will be used on the main App Store page, or the first item in \nimageUrls\n will be used\n\n\n\n\n\n\nkeywords\n - are used to tag your application and will be used to return your application on searches for these keywords.\n\n\n\n\n\n\ncategories\n - are not yet formalized, but will divide the store listings. Submitting proposed app categories will inform this process.\n\n\n\n\n\n\n#example config.yaml\n\nname: example-app\ndisplayName: The Example App\ndescription: An example application config.yaml.\n\nimageUrls:\n  - http://image.com/1\n  - http://image.com/2\n\ngalleryUrl: http://image.com/3\n\nkeywords:\n  - example\n  - configuration\n\ncategories:\n  - entertainment\n  - development\n\n\n\n\nEnsure Components are Setup\n\n\n\nAll applications, which use events and sensors, must register these in the config file..\n\n\nEvents\n\n\n\nevents:\n  - face-recognized\n  - locked-door\n\n\n\n\nSensors\n\n\n\nsensors:\n  - temperature\n  - uv\n\n\n\n\nA user will be required to grant an application permissions before installing. A user may install an app with any or all permissions enabled.\n\n\n\n\nUploading An Application\n\n\nYour application must do only what it claims to do with the name, description and README.md.\n\n\nAll sensors, integrations, and services must be registered in the \nconfig.yaml\n. User's will give consent for each after installing your app.\n\n\nTo upload the your application, use the following \nMATRIX CLI\n command and point it to your app folder.\n\n\nmatrix publish YOUR_APP_FOLDER", 
            "title": "Publishing Apps"
        }, 
        {
            "location": "/matrix-os/getting-started/publishing/#before-publishing-an-application", 
            "text": "", 
            "title": "Before publishing an application."
        }, 
        {
            "location": "/matrix-os/getting-started/publishing/#uploading-an-application", 
            "text": "Your application must do only what it claims to do with the name, description and README.md.  All sensors, integrations, and services must be registered in the  config.yaml . User's will give consent for each after installing your app.  To upload the your application, use the following  MATRIX CLI  command and point it to your app folder.  matrix publish YOUR_APP_FOLDER", 
            "title": "Uploading An Application"
        }, 
        {
            "location": "/matrix-os/reference/", 
            "text": "MATRIX OS SDK\n\n\nSensors\n\nSensor interfaces and data structures\n\nEverloop\n\nLED interface\n\n\n\n\n\n\n\n\n\n\n\nConfiguration\n\n\nConfig.yaml\n\nOverview of the MOS app config.yaml file.\n\nCLI Tool\n\nMOS command-line interface.\n\nDashboard\n\nExplore data representation and input with a live dashboard.\n\nWidgets\n\nReference for all dashboard widgets.\n\nCross Talk\n\nExchange information between apps and devices.\n\nData Types\n\nconfig.yaml data types overview.\n\nSystem Methods\n\nFor application defaults or end-user configurable variables.", 
            "title": "Index"
        }, 
        {
            "location": "/matrix-os/reference/#matrix-os-sdk", 
            "text": "", 
            "title": "MATRIX OS SDK"
        }, 
        {
            "location": "/matrix-os/reference/#configuration", 
            "text": "", 
            "title": "Configuration"
        }, 
        {
            "location": "/matrix-os/reference/sensors/", 
            "text": "Sensors\n\n\n\nDevice Compatibility\n\n\n\n\nAvailable Sensors\n\n\ntemperature\n, \nhumidity\n, \npressure\n, \nuv\n, \ngyroscope\n, \naccelerometer\n\n\nConfiguration\n\n\n\n\nYou should have familiarity with \nConfiguration Files\n before exploring further. \n\n\n\n\nWhen downloading an app from the \nMATRIX App Store\n, End users must explicitly authorize MOS applications to utilize\u00a0hardware sensors.\n\n\nThis requires that each application to identify the sensors it requires in \nconfig.yaml\n. Sensors will not work unless this is specified. Below is an example for an app that requires the temperature and humidity sensor.\n\n\nsensors:\n  - temperature\n  - humidity\n\n\n\n\nReading Sensors\n\n\nAll sensors are initialized using the \nsensor\n method. This method should only be used once per sensor. Once called, your can use a \n.then\n promise to initiate a callback.\n\n\nmatrix.sensor(sensorType, options);\n\n\n\n\n\n\nsensorType\n: Type of sensor you are initializing \n\n\noptions\n: The options for that sensor. All sensors support a \nrefresh\n and \ntimeout\n property.\n\n\n\n\n// Example\nvar temperatureValue = 0; // global variable to hold sensor value\nvar humidityValue = 0; // global variable to hold humidity value\n\n// Sensor options\nvar options = {\n  refresh: 1000, // milliseconds between data points\n  timeout: 10000 // how long before stopping this sensor\n};\n\n// Begin calling temperature sensor\nmatrix.sensor('temperature', options).then(data =\n {\n  temperatureValue = data.value; // update global variable\n  console.log(temperatureValue); // print new temperature value\n});\n\n// Begin calling humidity sensor\nmatrix.sensor('humidity', options).then(data =\n {\n  humidityValue = data.value; // update global variable\n  console.log(humidityValue); // print new humidity value\n});\n\n\n\n\nOutputs\n\n\nBelow are all the possible data formats for each sensor.\n\nTemperature\n\nOutput for \ntemperature\n (in \n).\n\n\n{\n  value: 36.95899963378906,\n  type: 'temperature'\n}\n\n\n\n\nHumidity\n\n\n\nOutput for \nhumidity\n.\n\n\n{\n  value: 30.409704208374023,\n  type: 'humidity'\n}\n\n\n\n\nPressure\n\n\n\nOutput for \npressure\n (in mbars).\n\n\n{\n  value: 101692,\n  type: 'pressure'\n}\n\n\n\n\nUV\n\n\n\nOutput for \nUV\n.\n\n\n{\n   value: 0.0053547522984445095,\n   risk: 'Low'\n}\n\n\n\n\nGyroscope\n\n\n\nOutput for \ngyroscope\n.\n\n\n{\n  yaw: 144.78964233398438,\n  pitch: 2.112252950668335,\n  roll: -92.0414810180664,\n  x: -10.78155517578125,\n  y: 1.8841552734375,\n  z: 0.441131591796875,\n  type: 'gyroscope'\n}\n\n\n\n\n\nAccelerometer\n\n\n\nOutput for \naccelerometer\n\n\n{\n  x: 0.1,\n  y: 0.23,\n  z: 0.224,\n  type: 'accelerometer'\n}\n\n\n\n\nMagnetometer\n\n\n\nOutput for \nmagnetometer\n\n\n{\n  x: 0.51,\n  y: 0.53,\n  z: -0.124,\n  type: 'magnetometer'\n}", 
            "title": "Sensors"
        }, 
        {
            "location": "/matrix-os/reference/sensors/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-os/reference/sensors/#available-sensors", 
            "text": "temperature ,  humidity ,  pressure ,  uv ,  gyroscope ,  accelerometer", 
            "title": "Available Sensors"
        }, 
        {
            "location": "/matrix-os/reference/sensors/#configuration", 
            "text": "You should have familiarity with  Configuration Files  before exploring further.    When downloading an app from the  MATRIX App Store , End users must explicitly authorize MOS applications to utilize\u00a0hardware sensors.  This requires that each application to identify the sensors it requires in  config.yaml . Sensors will not work unless this is specified. Below is an example for an app that requires the temperature and humidity sensor.  sensors:\n  - temperature\n  - humidity", 
            "title": "Configuration"
        }, 
        {
            "location": "/matrix-os/reference/sensors/#reading-sensors", 
            "text": "All sensors are initialized using the  sensor  method. This method should only be used once per sensor. Once called, your can use a  .then  promise to initiate a callback.  matrix.sensor(sensorType, options);   sensorType : Type of sensor you are initializing   options : The options for that sensor. All sensors support a  refresh  and  timeout  property.   // Example\nvar temperatureValue = 0; // global variable to hold sensor value\nvar humidityValue = 0; // global variable to hold humidity value\n\n// Sensor options\nvar options = {\n  refresh: 1000, // milliseconds between data points\n  timeout: 10000 // how long before stopping this sensor\n};\n\n// Begin calling temperature sensor\nmatrix.sensor('temperature', options).then(data =  {\n  temperatureValue = data.value; // update global variable\n  console.log(temperatureValue); // print new temperature value\n});\n\n// Begin calling humidity sensor\nmatrix.sensor('humidity', options).then(data =  {\n  humidityValue = data.value; // update global variable\n  console.log(humidityValue); // print new humidity value\n});", 
            "title": "Reading Sensors"
        }, 
        {
            "location": "/matrix-os/reference/sensors/#outputs", 
            "text": "Below are all the possible data formats for each sensor.", 
            "title": "Outputs"
        }, 
        {
            "location": "/matrix-os/reference/leds/", 
            "text": "Everloop\n\n\n\nDevice Compatibility\n\n\n\n\n\n\nThe Everloop is a powerful tool for visually communicating through LEDs. Click the video below to learn more.\n\n\n\n\n\n\nmatrix.darken()\n and \nmatrix.brighten()\n have not been implemented.\n\n\n\n\nString Notation \n Render\n\n\nYou can use any CSS color property (color-name, rgb, and hex). Darker colors on the Everloop generally display with more precision then lighter colors, which tend to get washed out. The code below shows how to set the entire Everloop to green with each CSS property.\n\n\n\n\nThe \n.render()\n method must be included at the end of the \nmatrix.led()\n method to update your MATRIX device's LEDs.\n\n\n\n\n// String\nmatrix.led('green').render();\n// Hexadecimal\nmatrix.led('#00ff00').render();\n// RGB\nmatrix.led('rgb(0,255,0)').render();\n\n\n\n\n\n\nPlease avoid using \nrgba\n. Alpha values do not render correctly.\n\n\n\n\nCreating Shapes\n\n\n\n\nCurrently, shape manipulation on the MATRIX Voice does not render properly. Fix in progress!\n\n\n\n\nShape objects are methods of manipulating multiple LEDs in the Everloop at once.  Shape creation is simple, you define the shape you want to make as an object and pass it into \nmatrix.led()\n like the example below\n\n\nmatrix.led({\n  arc: 90, //arc shape that takes up 90\u00b0 of Everloop \n  color: green, //turn shape green\n  start: 0 //start shape at 0\u00b0 of Everloop\n}).render();\n\n\n\n\nAvailable Shapes\n\n\n\nInclude one of these \nshape\n properties in your shape.\n\n\narc: 90 //number of degrees to draw an arc, supports negative values\nangle: 45 //degree number to draw a single point\n\n\n\n\nShape Properties\n\n\n\nEvery Shape object must include the \ncolor\n property to render.\n\n\ncolor: 'red' //color strings, as specified above\nspin: 230 //rotate color hue ( 0 - 360 )\nstart: 0  //degree at which shape begins, arc shape only\n\n\n\n\nRotation Operation\n\n\n\nThese operate on the shapes and colors defined in the \nled\n object.\n\n\n.rotate(angle); //rotates whole shape by number of degrees \n\n\n\n\nmatrix.led({\n    arc: 45,\n    color: 'blue',\n    start: 50\n}).rotate(90).render();\n\n\n\n\nMultiple Shapes\n\n\n\nUse an array in the \nmatrix.led()\n method to include multiple shapes.\n\n\n// make a smiley face\nmatrix.led([\n  //left eye angle\n  {\n    angle: 45,\n    color: 'yellow'\n  },\n  //right eye angle\n  {\n    angle: 135,\n    color: 'yellow'\n  },\n  //smile arc\n  {\n    arc: 90,\n    color: 'yellow',\n    start: 225\n  }\n]).render();\n\n\n\n\nDirect LED Manipulation\n\n\n\nArray index indicates the LED to change. The index of an LED is labeled directly above the LED on your MATRIX device (D1, D2, D3, D4, etc..). Use 0 to turn off the LED.\n\n\nmatrix.led([0, 0, 0, 0, 'yellow', 0,\n0, 0, 0, 0, 0, 0, 0, 'yellow', 0, 0,\n0, 0, 0, 0, 0, 0, 'yellow', 'yellow',\n'yellow', 'yellow', 'yellow', 'yellow',\n'yellow', 'yellow', 'yellow']).render();\n\n\n\n\nLED Animation\n\n\nBy using a \nsetInterval()\n method, you can animate the LEDs on the Everloop. Below is an example of an active clock that demonstrates this. \n\n\nsetInterval(function(){\n  var time = new Date();\n  var h = time.getHours();\n  var m = time.getMinutes();\n  var s = time.getSeconds();\n\n  var hourLED = {\n    // translate hours (12) to angle (360)\n    arc: h * 3,\n    color: 'blue'\n  };\n\n  var minuteLED = {\n    // translate minutes ( 60 ) to angle ( 360 )\n    angle: m * 6,\n    color: 'green'\n  };\n\n  var secondLED = {\n    // translate seconds (60) to angle (360)\n    angle: s * 6,\n    color: 'yellow',\n  };\n\n  // will draw all three\n  matrix.led([hourLED, minuteLED, secondLED]).render();\n\n}, 1000);\n\n\n\n\nAdvanced Use\n\n\nEnable \nSUN_MODE=true\n as a flag, when launching MATRIX OS, to turn on the white LEDs (and the luminence calculations). Wear sunglasses or use another mode of protecting your eyes when using this while developing. It is intended for use behind coverings.\n\n\nSUN_MODE=true node index", 
            "title": "Everloop"
        }, 
        {
            "location": "/matrix-os/reference/leds/#device-compatibility", 
            "text": "The Everloop is a powerful tool for visually communicating through LEDs. Click the video below to learn more.    matrix.darken()  and  matrix.brighten()  have not been implemented.", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-os/reference/leds/#string-notation-render", 
            "text": "You can use any CSS color property (color-name, rgb, and hex). Darker colors on the Everloop generally display with more precision then lighter colors, which tend to get washed out. The code below shows how to set the entire Everloop to green with each CSS property.   The  .render()  method must be included at the end of the  matrix.led()  method to update your MATRIX device's LEDs.   // String\nmatrix.led('green').render();\n// Hexadecimal\nmatrix.led('#00ff00').render();\n// RGB\nmatrix.led('rgb(0,255,0)').render();   Please avoid using  rgba . Alpha values do not render correctly.", 
            "title": "String Notation &amp; Render"
        }, 
        {
            "location": "/matrix-os/reference/leds/#creating-shapes", 
            "text": "Currently, shape manipulation on the MATRIX Voice does not render properly. Fix in progress!   Shape objects are methods of manipulating multiple LEDs in the Everloop at once.  Shape creation is simple, you define the shape you want to make as an object and pass it into  matrix.led()  like the example below  matrix.led({\n  arc: 90, //arc shape that takes up 90\u00b0 of Everloop \n  color: green, //turn shape green\n  start: 0 //start shape at 0\u00b0 of Everloop\n}).render();", 
            "title": "Creating Shapes"
        }, 
        {
            "location": "/matrix-os/reference/leds/#led-animation", 
            "text": "By using a  setInterval()  method, you can animate the LEDs on the Everloop. Below is an example of an active clock that demonstrates this.   setInterval(function(){\n  var time = new Date();\n  var h = time.getHours();\n  var m = time.getMinutes();\n  var s = time.getSeconds();\n\n  var hourLED = {\n    // translate hours (12) to angle (360)\n    arc: h * 3,\n    color: 'blue'\n  };\n\n  var minuteLED = {\n    // translate minutes ( 60 ) to angle ( 360 )\n    angle: m * 6,\n    color: 'green'\n  };\n\n  var secondLED = {\n    // translate seconds (60) to angle (360)\n    angle: s * 6,\n    color: 'yellow',\n  };\n\n  // will draw all three\n  matrix.led([hourLED, minuteLED, secondLED]).render();\n\n}, 1000);", 
            "title": "LED Animation"
        }, 
        {
            "location": "/matrix-os/reference/leds/#advanced-use", 
            "text": "Enable  SUN_MODE=true  as a flag, when launching MATRIX OS, to turn on the white LEDs (and the luminence calculations). Wear sunglasses or use another mode of protecting your eyes when using this while developing. It is intended for use behind coverings.  SUN_MODE=true node index", 
            "title": "Advanced Use"
        }, 
        {
            "location": "/matrix-os/reference/configuration/", 
            "text": "Configuration\n\n\n\nEach MOS application has a configuration file \nconfig.yaml\n that's required to have, in order to run.\n\n\nWhat this file does:\n\n\n\n\nSets meta information for the application, which is used in the \nMATRIX App Store\n.\n\n\nDefines a schema for \nsending data\n from the device.\n\n\nIdentifies which \nsensors\n, services\n, \nevents\n and \nintegrations\n an application utilizes.\n\n\nDefines dynamic \nsettings\n variables, which are available to the application and end-user modifiable.\n\n\nDefines the \nwidgets\n and their layout in the \ndashboard\n\n\nGenerates a policy on install, asking the user for specific access to their device.\n\n\n\n\nConfiguration Options\n\n\n\n\nname\n - Name of the application that appears as part of the application store when viewing it.\n\n\ndescription\n - Short description that appears as part of the application when deploying or pushing to App Store.\n\n\nkeywords\n - a few values about the application. ex: \nface, door, unlock\n\n\nversion\n - this field will be updated by the CLI on publish.\n\n\nconfigVersion\n - This field defines what version is the configuration. don't touch this. \n\n\nsettings\n - runtime variables for MOS applications\n\n\ndataTypes\n - schema for structured data from an application\n\n\nsensors\n - which sensors to activate for this application\n\n\nintegrations\n - which external integrations does this application support ie. \nifttt\n\n\nevents\n - which events this application has listeners for \n\n\nscreens\n - layout for widgets. see \nLayout\n\n\nwidgets\n - widget definitions. see \nWidgets\n\n\nservices\n - service definitions. \n\n\n\n\n#example config.yaml\n\nname: example-app\ndisplayName: The Example App\ndescription: An example application config.yaml.\n\nimageUrls:\n  - http://image.com/1\n\nkeywords:\n  - example\n  - configuration\n\ncategories:\n  - entertainment\n\nsensors:\n  - temperature\n  - gyroscope\n\n\n\n\nUsage Notes\n\n\nThe \nconfig.yaml\n is standardized before installation, which will modify it somewhat, especially in the widget definations. Do not be alarmed if your installed \nconfig.yaml\n does not match the original, this is normal.\n\n\nMore info\n\n\nSee the helper library with examples at: \nhttps://github.com/matrix-io/matrix-app-config-helper", 
            "title": "Config.yaml"
        }, 
        {
            "location": "/matrix-os/reference/configuration/#configuration-options", 
            "text": "name  - Name of the application that appears as part of the application store when viewing it.  description  - Short description that appears as part of the application when deploying or pushing to App Store.  keywords  - a few values about the application. ex:  face, door, unlock  version  - this field will be updated by the CLI on publish.  configVersion  - This field defines what version is the configuration. don't touch this.   settings  - runtime variables for MOS applications  dataTypes  - schema for structured data from an application  sensors  - which sensors to activate for this application  integrations  - which external integrations does this application support ie.  ifttt  events  - which events this application has listeners for   screens  - layout for widgets. see  Layout  widgets  - widget definitions. see  Widgets  services  - service definitions.    #example config.yaml\n\nname: example-app\ndisplayName: The Example App\ndescription: An example application config.yaml.\n\nimageUrls:\n  - http://image.com/1\n\nkeywords:\n  - example\n  - configuration\n\ncategories:\n  - entertainment\n\nsensors:\n  - temperature\n  - gyroscope", 
            "title": "Configuration Options"
        }, 
        {
            "location": "/matrix-os/reference/configuration/#usage-notes", 
            "text": "The  config.yaml  is standardized before installation, which will modify it somewhat, especially in the widget definations. Do not be alarmed if your installed  config.yaml  does not match the original, this is normal.", 
            "title": "Usage Notes"
        }, 
        {
            "location": "/matrix-os/reference/configuration/#more-info", 
            "text": "See the helper library with examples at:  https://github.com/matrix-io/matrix-app-config-helper", 
            "title": "More info"
        }, 
        {
            "location": "/matrix-os/reference/cli-tool/", 
            "text": "Command Line Interface (CLI)\n\n\n\nThe MATRIX CLI tool is a terminal interface for managing your MATRIX devices and applications. This includes deploying, downloading, and publishing applications.\n\n\n\n\nMATRIX CLI requires \nNode.js\n on your personal computer.\n\n\n\n\n\n\nInstallation\n\n\nTo install the MATRIX CLI, execute the following command in your personal computer's terminal.\n\n\nnpm install -g matrix-cli\n\n\n\n\n\n\nCommand list\n\n\nTyping \nmatrix\n lists all the available MATRIX CLI commands. Each command for the CLI tool must begin with \nmatrix\n.\n\n\nSetup\n\n\n\n\n\n\nmatrix register\n - Register for a MATRIX Labs account.\n\n\n\u21b3 \nmatrix register device\n - Registers a MATRIX device to your account.\n\n\n\n\n\n\nmatrix account\n - View MATRIX Labs account details.\n\n\n\u21b3 \nmatrix account profile\n - Edit account details.\n\n\n\n\n\n\nmatrix remove YOUR_DEVICE_NAME_OR_ID\n - Removes a MATRIX device from your account.\n\n\n\n\n\n\nmatrix login\n - Sign into MATRIX Labs account.\n\n\n\n\n\n\nmatrix logout\n - Sign out of MATRIX Labs account.\n\n\n\n\n\n\nmatrix upgrade\n - Update current MATRIX CLI tool version.\n\n\n\n\n\n\nmatrix use YOUR_DEVICE_NAME_OR_ID\n - Select MATRIX device to use.\n\n\n\n\n\n\nmatrix set\n - Set environment or locale.\n\n\n\u21b3   \nmatrix set env DESIRED_ENV\n - Switch between \ndev\n, \nrc\n, and \nproduction\n environments. Recommended to stay in \nrc\n.\n\n\n\u21b3   \nmatrix set locale DESIRED_LOCALE\n - Switch between \nes\n (spanish) and \nen\n (english) locale for the MATRIX CLI tool.\n\n\n\n\n\n\nManagement\n\n\n\n\n\n\nmatrix list\n - Lists all MATRIX devices or apps.\n\n\n\u21b3 \nmatrix list devices\n - Lists all registered devices.\n\n\n\u21b3 \nmatrix list apps\n - Lists all installed MATRIX apps for the current device.\n\n\n\n\n\n\nApps\n\n\n\n\n\n\nmatrix search APP_NAME\n - Check if a MATRIX app is listed in the app store\n\n\n\n\n\n\nmatrix install APP_NAME\n - Install MATRIX app to your MATRIX device.\n\n\n\n\n\n\nmatrix uninstall APP_NAME\n - Uninstall MATRIX app from your MATRIX device.\n\n\n\n\n\n\nmatrix config APP_NAME\n - Check configuration of an installed MATRIX app.\n\n\n\n\n\n\nmatrix start APP_NAME\n - Starts an installed MATRIX app.\n\n\n\n\n\n\nmatrix stop APP_NAME\n - Stops an installed MATRIX app.\n\n\n\n\n\n\nmatrix restarts APP_NAME\n - Restarts an installed MATRIX app.\n\n\n\n\n\n\nDevelopment\n\n\n\n\n\n\nmatrix create APP_NAME\n - Creates folder with the necessary files for a MATRIX app.\n\n\n\n\n\n\nmatrix deploy APP_FOLDER\n - Installs MATRIX app to your MATRIX device.\n\n\n\n\n\n\nmatrix publish APP_FOLDER\n - Upload MATRIX app to the app store.\n\n\n\n\n\n\nmatrix unPublish APP_NAME\n - Remove MATRIX app from the app store.\n\n\n\n\n\n\nmatrix trigger EVENT_TO_EMIT\n - Emits a \nCross-talk\n event to each MATRIX device.\n\n\n\n\n\n\nmatrix ping\n - Flashes the lights on MATRIX device currently selected.\n\n\n\n\n\n\nmatrix log\n - Shows all console.log() outputs from your MATRIX device.\n\n\n\n\n\n\n\n\nmatrix ping\n has a known \nissue\n where it will output an error, but still ping the device.", 
            "title": "CLI Tool"
        }, 
        {
            "location": "/matrix-os/reference/cli-tool/#installation", 
            "text": "To install the MATRIX CLI, execute the following command in your personal computer's terminal.  npm install -g matrix-cli", 
            "title": "Installation"
        }, 
        {
            "location": "/matrix-os/reference/cli-tool/#command-list", 
            "text": "Typing  matrix  lists all the available MATRIX CLI commands. Each command for the CLI tool must begin with  matrix .", 
            "title": "Command list"
        }, 
        {
            "location": "/matrix-os/reference/cli-tool/#setup", 
            "text": "matrix register  - Register for a MATRIX Labs account.  \u21b3  matrix register device  - Registers a MATRIX device to your account.    matrix account  - View MATRIX Labs account details.  \u21b3  matrix account profile  - Edit account details.    matrix remove YOUR_DEVICE_NAME_OR_ID  - Removes a MATRIX device from your account.    matrix login  - Sign into MATRIX Labs account.    matrix logout  - Sign out of MATRIX Labs account.    matrix upgrade  - Update current MATRIX CLI tool version.    matrix use YOUR_DEVICE_NAME_OR_ID  - Select MATRIX device to use.    matrix set  - Set environment or locale.  \u21b3    matrix set env DESIRED_ENV  - Switch between  dev ,  rc , and  production  environments. Recommended to stay in  rc .  \u21b3    matrix set locale DESIRED_LOCALE  - Switch between  es  (spanish) and  en  (english) locale for the MATRIX CLI tool.", 
            "title": "Setup"
        }, 
        {
            "location": "/matrix-os/reference/cli-tool/#management", 
            "text": "matrix list  - Lists all MATRIX devices or apps.  \u21b3  matrix list devices  - Lists all registered devices.  \u21b3  matrix list apps  - Lists all installed MATRIX apps for the current device.", 
            "title": "Management"
        }, 
        {
            "location": "/matrix-os/reference/cli-tool/#apps", 
            "text": "matrix search APP_NAME  - Check if a MATRIX app is listed in the app store    matrix install APP_NAME  - Install MATRIX app to your MATRIX device.    matrix uninstall APP_NAME  - Uninstall MATRIX app from your MATRIX device.    matrix config APP_NAME  - Check configuration of an installed MATRIX app.    matrix start APP_NAME  - Starts an installed MATRIX app.    matrix stop APP_NAME  - Stops an installed MATRIX app.    matrix restarts APP_NAME  - Restarts an installed MATRIX app.", 
            "title": "Apps"
        }, 
        {
            "location": "/matrix-os/reference/cli-tool/#development", 
            "text": "matrix create APP_NAME  - Creates folder with the necessary files for a MATRIX app.    matrix deploy APP_FOLDER  - Installs MATRIX app to your MATRIX device.    matrix publish APP_FOLDER  - Upload MATRIX app to the app store.    matrix unPublish APP_NAME  - Remove MATRIX app from the app store.    matrix trigger EVENT_TO_EMIT  - Emits a  Cross-talk  event to each MATRIX device.    matrix ping  - Flashes the lights on MATRIX device currently selected.    matrix log  - Shows all console.log() outputs from your MATRIX device.     matrix ping  has a known  issue  where it will output an error, but still ping the device.", 
            "title": "Development"
        }, 
        {
            "location": "/matrix-os/reference/dashboard/", 
            "text": "Dashboard\n\n\n\n\n\nYou should have familiarity with \nConfiguration Files\n before exploring further. \n\n\n\n\nThe MATRIX Dashboard is an online interface that can manage each of your MATRIX devices and applications. The dashboard itself consists of \nwidgets\n which are defined in the \nconfiguration file\n, \nconfig.yaml\n. Widgets provide representation for data coming from a MATRIX application and they can provide controls for users to modify how a MATRIX application operates. Each application can have its own dashboard view.\n\n\nView your Dashboard \nhere\n.\n\n\nScreens\n\n\nScreens are where we define the placement of \nwidgets\n on the dashboard (consists of rows and columns). Adding \nscreens\n to your \nconfig.yaml\n file will require you to specify your widget names and dashboard placements. Below are some examples of how to defines your screens.\n\n\n\n\n--\n New row.\n\n\n-\n New column.\n\n\n\n\nscreens:\n  #Row 1 has 2 Columns\n  - - myTopLeftWidget\n    - myTopRightWidget\n\n\n\n\nscreens:\n  #Row 1 has 2 Columns\n  - - myTopLeftWidget\n    - myTopRightWidget\n  #Row 2 has 3 Columns\n  - - myBottomLeftWidget\n    - myBottomMiddleWidget\n    - myBottomRightWidget\n\n\n\n\nEach \nscreens\n item looks for a \nwidgets\n item with the same name to show on the dashboard. The following example shows how to properly define these.\n\n\n\n\nscreens:\n  - - startButton\n    - readDeviceSensors\n\nwidgets:\n  startButton:\n    control: button\n    event: buttonInfo\n    value: START\n    label: Turn LEDs On\n  readDeviceSensors:\n    control: switch\n    event: sensorsEnabled\n    value: Sensors Enabled\n    label: Send Sensor Data\n\n\n\n\n\n\nWidgets\n\n\nNow that you know how to display widgets, learn which \nwidgets\n are available in the dashboard and how to configure them \nhere\n.", 
            "title": "Dashboard"
        }, 
        {
            "location": "/matrix-os/reference/dashboard/#screens", 
            "text": "Screens are where we define the placement of  widgets  on the dashboard (consists of rows and columns). Adding  screens  to your  config.yaml  file will require you to specify your widget names and dashboard placements. Below are some examples of how to defines your screens.   --  New row.  -  New column.   screens:\n  #Row 1 has 2 Columns\n  - - myTopLeftWidget\n    - myTopRightWidget  screens:\n  #Row 1 has 2 Columns\n  - - myTopLeftWidget\n    - myTopRightWidget\n  #Row 2 has 3 Columns\n  - - myBottomLeftWidget\n    - myBottomMiddleWidget\n    - myBottomRightWidget  Each  screens  item looks for a  widgets  item with the same name to show on the dashboard. The following example shows how to properly define these.   screens:\n  - - startButton\n    - readDeviceSensors\n\nwidgets:\n  startButton:\n    control: button\n    event: buttonInfo\n    value: START\n    label: Turn LEDs On\n  readDeviceSensors:\n    control: switch\n    event: sensorsEnabled\n    value: Sensors Enabled\n    label: Send Sensor Data", 
            "title": "Screens"
        }, 
        {
            "location": "/matrix-os/reference/dashboard/#widgets", 
            "text": "Now that you know how to display widgets, learn which  widgets  are available in the dashboard and how to configure them  here .", 
            "title": "Widgets"
        }, 
        {
            "location": "/matrix-os/reference/widgets/", 
            "text": "Widgets\n\n\n\n\n\nYou should have familiarity with \nData Types\n, \nCross Talk\n and \nDashboard\n before exploring further. \n\n\n\n\nWidgets are what allow you to visualize and or control your MATRIX applications through the MATRIX Dashboard.\n\n\n\n\nWidget Configuration\n\n\nEach widget requires certain options to be defined before they can properly show on the dashboard. The list below will go through each available option for \nwidgets\n.\n\nWidget Types\n\n\n\n\nDisplay Widgets\n - Displays data from an application.\n\n\nControl Widgets\n - Sends real-time events to an application.\n\n\n\n\nAll Widget Options\n\n\n\n\n\nlabel\n - Optional display title for widget.\n\n\nsize\n - Optional percentage value for a widget's width (\n25\n, \n50\n, \n75\n, etc..).\n\n\n\n\n\n\nwidgets\n can only have either a \ndisplay\n or \ncontrol\n option when choosing a widget type.\n\n\n\n\nDisplay Widget Options\n\n\n\nDisplay widgets, like tables, charts and value outputs are only concerned with what data to display and how to display it.\n\n\ndisplay\n - Which display widget to load\n\n\n\n\ntype\n - Select type from a defined data type (see \nSending Data\n ).\n\n\nkey\n/\nkeys\n - Select key or keys being used from  \ntype\n.\n\n\nformat\n - Filter the data. choose from \ncount\n, \nsum\n, \navg\n, \npercent\n, \nmax\n, \nmin\n, \nfixed\n, \nround\n.\n\n\nrealtime\n - Defaults to \ntrue\n. Use the \nrefresh\n option for manual updates.\n\n\nrefresh\n - How many seconds between data refresh. use with \nrealtime\n set to \nfalse\n. \n\n\n\n\nInteractive Widget Options\n\n\n\nInteractive widgets, like buttons, switches, and controllers are meant to send data from the MATRIX Dashboard to your MATRIX app.\n\n\ncontrol\n - Which control widget option load\n\n\n\n\ntrigger\n - The event to listen for in your application ( see \nReference \n Crosstalk\n)\n\n\nvalue\n - On button widgets, what text should be in the button\n\n\nmap\n - On button widgets, a collection of \nvalue: trigger\n where value is the button text, and trigger is the event fired\n\n\n\n\n\n\nDisplay widgets\n\n\nIndicated via a \ndisplay\n option.\n\n\nEach example will show how to configure their respective widget. \nscreens\n and \ndataTypes\n will be left up to you to configure.\n\n\n\n\n\n\n\nbar\n - bar chart\n\n\n\n\n#config.yaml\nwidgets:\n  barChartTest:\n    display: bar\n    type: monitor\n    keys: cpu, memory\n    format: avg\n    realtime: false\n    refresh: 60\n    label: Bar Chart\n\n\n\n\n//send data through app.js\nmatrix.type('monitor').send({\n  'cpu': 7.03,\n  'memory': 2.30 \n});  \n\n\n\n\n\n\n\n\n\n\n\ndigit\n - numerical\n\n\n\n\n#config.yaml\nwidgets:\n  digitTest:\n    display: digit\n    type: monitor\n    key: cpu\n    format: round\n    label: cpu\n\n\n\n\n//send data through app.js\nmatrix.type('monitor').send({\n  'cpu': 2.4,\n  'memory': 5.4 \n});  \n\n\n\n\n\n\n\n\n\n\n\nradar\n - radar chart\n\n\n\n\n#config.yaml\nwidgets:\n  radarTest:\n    display: radar\n    type: emotions\n    keys: happy,sad,disgust,surprised,confused,calm,angry\n    label: Emotions\n\n\n\n\n//send data through app.js\nmatrix.type('emotions').send({\n  'happy': 67,\n  'sad': 50,\n  'disgust': 78,\n  'surprised': 56,\n  'confused': 86,\n  'calm': 70,\n  'angry': 60 \n});  \n\n\n\n\n\n\n\n\n\n\n\nline\n - line chart\n\n\n\n\n#config.yaml\nwidgets:\n  lineChartTest:\n    display: line\n    type: monitor\n    format: avg\n    keys: cpu, memory\n    realtime: true\n    label: Line Chart\n\n\n\n\n//send data through app.js\nmatrix.type('monitor').send({\n  'cpu': 7.03,\n  'memory': 2.30 \n});  \n\n\n\n\n\n\n\n\n\n\n\nlist\n - data table\n\n\n\n\n#config.yaml\nwidgets:\n  listTest:\n    display: list\n    type: device\n    keys: Hostname,Type,Platform,Arch\n    label: Secret Information\n\n\n\n\n//send data through app.js\nmatrix.type('device').send({\n  'Hostname': 'h7n.domain',\n  'Type': 'Darwin',\n  'Platform': 'darwin',\n  'Arch': 'x64'\n});  \n\n\n\n\n\n\n\n\n\n\n\nlist-group\n - grouped data table\n\n\nSimple Group\n\n\n\n\n#config.yaml\nwidgets:\n  info:\n    display: list-group\n    type: vehicleDetection\n    keys: count\n    format: count\n    label: Total\n\n\n\n\n//send data through app.js\nmatrix.type('vehicleDetection').send({\n  'zoneId': 'zone1',\n  'count': '4',\n  'speed': '56'\n});  \n\n\n\n\nGroup By Key\n\n\n\n\n#config.yaml\nwidgets:\n  info:\n    display: list-group\n    type: device\n    keys: zone, count\n    format: count\n    groupby: zone\n    label: Total\n\n\n\n\n//send data through app.js\nmatrix.type('vehicleDetection').send({\n  'zoneId': 'zone1',\n  'count': '4',\n  'speed': '56'\n});  \n\n\n\n\n\n\n\n\n\n\n\npie-chart\n - pie chart\n\n\n\n\n#config.yaml\nwidgets:\n  pieChartTest:\n    display: pie-chart\n    type: gender\n    keys: women,men\n    label: Gender\n\n\n\n\n//send data through app.js\nmatrix.type('gender').send({\n  'women': 76,\n  'men': 45 \n});  \n\n\n\n\n\n\n\n\n\n\n\npolar\n - polar area chart\n\n\n\n\n#config.yaml\nwidgets:\n  polarTest:\n    display: polar\n    type: emotions\n    keys: happy,sad,disgust,surprised,confused,calm,angry\n    label: Emotions\n\n\n\n\n//send data through app.js\nmatrix.type('emotions').send({\n  'happy': 67,\n  'sad': 50,\n  'disgust': 78,\n  'surprised': 56,\n  'confused': 86,\n  'calm': 70,\n  'angry': 60 \n});  \n\n\n\n\n\n\n\n\n\n\n\nlabel\n - string display\n\n\n\n\n#config.yaml\nwidgets:\n  labelTest:\n    display: label\n    type: uv\n    key: risk\n    label: UV Risk\n\n\n\n\n//send data through app.js\nmatrix.type('uv').send({\n  'value': 0.56773,\n  'risk': 'Low' \n});  \n\n\n\n\n\n\n\n\n\n\n\ngauge\n - gauge \n\n\n\n\n#config.yaml\nwidgets:\n  gaugeTest:\n    display: gauge\n    type: detection\n    keys: views\n    min: 0\n    max: 100\n    label: 'Views'\n\n\n\n\n//send data through app.js\nmatrix.type('detection').send({\n  'views': 60,\n  'impressions': 100 \n});  \n\n\n\n\n\n\n\n\n\n\n\nindicator\n -  light indicator on/off\n\n\n\n\n#config.yaml\nwidgets:\n  indicatorTest:\n    display: indicator\n    type: system\n    keys: isOn\n    label: 'Indicator Test'\n\n\n\n\n//send data through app.js\nmatrix.type('system').send({\n  'isOn': true\n});  \n\n\n\n\n\n\n\n\n\n\n\nmap\n - google maps\n\n\n\n\nwidgets:\n  mapTest:\n    display: map\n    type: location\n    label: 'Map Test'\n\n\n\n\n//send data through app.js\nmatrix.type('location').send({\n  'latitude': 25.791632,\n  'longitude': -80.1414447,\n  'label': 'Admobilize'\n});  \n\n\n\n\n\n\n\n\n\n\n\nlink\n - link to a destination (URL)\n\n\n\n\nwidgets:\n  link:\n    display: link\n    label: \nLink display\n\n    title: \nGoogle\n\n    url: \nhttps://www.google.com\n\n\n\n\n\n\n\n\n\nControl Widgets\n\n\nIndicated via a \ncontrol\n option.\n\n\nEach example will show how to configure their respective widget. \nscreens\n and \ndataTypes\n will be left up to you to configure.\n\n\n\n\n\n\n\ninput\n - input field, single or multiple\n\n\nSingle Inputs\n\n\n\n\n#config.yaml\nwidgets:\n  inputTest:\n    control: input\n    event: testInput\n    value: 'type text'\n    label: 'Test Input'\n\n\n\n\n//Cross-Talk event from dashboard\nmatrix.on('testInput', function(p){\n var text = p.value;\n})\n\n\n\n\nMultiple Inputs\n\n\n\n\n#config.yaml\n  inputMapTest:\n    control: input\n    map:\n      - event: testInput1\n        value: first type text\n      - event: testInput2\n        value: second type text\n    label: Test Input Map\n\n\n\n\n//Cross-Talk event from dashboard\nmatrix.on('testInput1', function(p){\n var text = p.value;\n})\n\nmatrix.on('testInput2', function(p){\n var text = p.value;\n})\n\n\n\n\n\n\n\n\n\n\n\nbutton\n - button, single or multiple\n\n\nSingle Buttons\n\n\n\n\n#config.yaml\nwidgets:\n  buttonTest:\n    control: button\n    event: buttonInfo\n    value: Get Secret Information\n    label: Hacking Buttons\n\n\n\n\n//Cross-Talk event from dashboard\nmatrix.on('buttonInfo', function(){\n  // ...\n});\n\n\n\n\nMultiple Buttons\n\n\n\n\n#config.yaml\nwidgets:\n  buttonMapTest:\n    control: button\n    map:\n      - event: buttonUp\n        value: amps+\n      - event: buttonDown\n        value: amps-\n      - event: buttonStart\n        value: begin\n      - event: buttonStop\n        value: end\n      - event: buttonCapture\n        value: capture\n      - event: buttonSlow\n        value: refresh+\n      - event: buttonFast\n        value: refresh-\n    label: Matrix Activation Buttons\n\n\n\n\n//Cross-Talk event from dashboard\nmatrix.on('buttonUp', function(){\n  // ...\n})\n\nmatrix.on('buttonDown', function(){\n  // ...\n})\n\nmatrix.on('buttonStart', function(){\n  // ...\n})\n\nmatrix.on('buttonStop', function(){\n  // ...\n})\n\nmatrix.on('buttonCapture', function(){\n  // ...\n})\n\nmatrix.on('buttonSlow', function(){\n  // ...\n})\n\nmatrix.on('buttonFast', function(){\n  // ...\n})\n\n\n\n\n\n\n\n\n\n\n\nswitch\n - switch, single or multiple\n\n\nSingle Switch\n\n\n\n\n#config.yaml\nwidgets:\n  switchTest:\n    control: switch\n    event: ledEnabledChanged\n    value: Leds enabled\n    label: Switch Test\n\n\n\n\n//Cross-Talk event from dashboard\nmatrix.on('ledEnabledChanged', function(p){\n var isOn = p.value;\n})\n\n\n\n\nMultiple Switches\n\n\n\n\n#config.yaml\nwidgets:\n  switchMapTest:\n    control: switch\n    map:\n      - event: ledEnabledChanged\n        value: Leds enabled\n      - event: detectionEnabledChanged\n        value: Detection Enabled\n    label: Switch Map Test\n\n\n\n\n//Cross-Talk event from dashboard\nmatrix.on('ledEnabledChanged', function(p){\n var isOn = p.value;\n});\n\nmatrix.on('detectionEnabledChanged', function(p){\n var isOn = p.value;\n});\n\n\n\n\n\n\n\n\n\n\n\nradio\n - radio, single or multiple\n\n\n\n\n#config.yaml\nwidgets:\n  radioTest:\n    control: radio\n    map:\n      - event: optionOneSelected\n        value: Option One\n      - event: optionTwoSelected\n        value: Option Two\n    label: Radio Test\n\n\n\n\n//Cross-Talk event from dashboard\nmatrix.on('optionOneSelected', function(p){\n  // ...\n})\n\nmatrix.on('optionTwoSelected', function(p){\n  // ...\n})\n\n\n\n\n\n\n\n\n\n\n\ndropdown\n - dropdown menu\n\n\n\n\n#config.yaml\nwidgets:\n  dropDownTest:\n    control: dropdown\n    map:\n      - event: optionOneSelected\n        value: Option One\n      - event: optionTwoSelected\n        value: Option Two\n    label: Dropdown Test\n\n\n\n\n//Cross-Talk event from dashboard\nmatrix.on('optionOneSelected', function(){\n //...\n})\n\nmatrix.on('optionTwoSelected', function(){\n //...\n})\n\n\n\n\n\n\n\n\n\n\n\nrange\n - range slider\n\n\n\n\n#config.yaml\nwidgets:\n  rangeTest:\n    control: range\n    event: rangeChanged\n    min: 0\n    max: 35\n    label: Range Test\n\n\n\n\n//Cross-Talk event from dashboard\nmatrix.on('rangeChanged', function(p){\n var value = p.value;\n});\n\n\n\n\n\n\n\n\n\n\n\nxy\n - track pad\n\n\n\n\n#config.yaml\nwidgets:\n  xyTest:\n    control: xy\n    event: xyChanging\n    value: 'xy'\n    xMax: 100\n    yMax: 50\n    label: Test XY\n\n\n\n\n//Cross-Talk event from dashboard\nmatrix.on('xyChanging', function(p){\n var x = p.value.x;\n var y = p.value.y;\n});\n\n\n\n\n\n\n\n\n\n\n\nradial\n - joystick, single or multiple\n\n\nSingle Radial\n\n\n\n\n#config.yaml\nwidgets:\n  radial:\n    control: radial\n    event: radialChanging\n    label: Radial Test\n\n\n\n\n//Cross-Talk event from dashboard\nmatrix.on('radialChanging', function(p){\n var x = p.value.x; //from -1 to 1\n var y = p.value.y; //from -1 to 1\n})\n\n\n\n\nMultiple Radials\n\n\n\n\n#config.yam\nwidgets:\n  radialMap:\n    control: radial\n    map:\n    - event: radialRChanging\n      value: right\n    - event: radialLChanging\n      value: left\n    label: Radial Map Test\n\n\n\n\n//Cross-Talk event from dashboard\nmatrix.on('radialRChanging', function(p){\n var x = p.value.x; //from -1 to 1\n var y = p.value.y; //from -1 to 1\n});\n\nmatrix.on('radialLChanging', function(p){\n var x = p.value.x; //from -1 to 1\n var y = p.value.y; //from -1 to 1\n});\n\n\n\n\n\n\n\n\n\n\n\ncolor\n - color picker\n\n\n \n \n\n\n#config.yaml\nwidgets:\n  color:\n    control: color\n    event: colorChange\n    value: 'color'\n    label: 'Change MATRIX color'\n\n\n\n\n//Cross-Talk event from dashboard\nmatrix.on('colorChange', function(color){\n  color = color.value;\n  matrix.led(color).render();\n});", 
            "title": "Widgets"
        }, 
        {
            "location": "/matrix-os/reference/widgets/#widget-configuration", 
            "text": "Each widget requires certain options to be defined before they can properly show on the dashboard. The list below will go through each available option for  widgets .", 
            "title": "Widget Configuration"
        }, 
        {
            "location": "/matrix-os/reference/widgets/#display-widgets", 
            "text": "Indicated via a  display  option.  Each example will show how to configure their respective widget.  screens  and  dataTypes  will be left up to you to configure.    bar  - bar chart   #config.yaml\nwidgets:\n  barChartTest:\n    display: bar\n    type: monitor\n    keys: cpu, memory\n    format: avg\n    realtime: false\n    refresh: 60\n    label: Bar Chart  //send data through app.js\nmatrix.type('monitor').send({\n  'cpu': 7.03,\n  'memory': 2.30 \n});       digit  - numerical   #config.yaml\nwidgets:\n  digitTest:\n    display: digit\n    type: monitor\n    key: cpu\n    format: round\n    label: cpu  //send data through app.js\nmatrix.type('monitor').send({\n  'cpu': 2.4,\n  'memory': 5.4 \n});       radar  - radar chart   #config.yaml\nwidgets:\n  radarTest:\n    display: radar\n    type: emotions\n    keys: happy,sad,disgust,surprised,confused,calm,angry\n    label: Emotions  //send data through app.js\nmatrix.type('emotions').send({\n  'happy': 67,\n  'sad': 50,\n  'disgust': 78,\n  'surprised': 56,\n  'confused': 86,\n  'calm': 70,\n  'angry': 60 \n});       line  - line chart   #config.yaml\nwidgets:\n  lineChartTest:\n    display: line\n    type: monitor\n    format: avg\n    keys: cpu, memory\n    realtime: true\n    label: Line Chart  //send data through app.js\nmatrix.type('monitor').send({\n  'cpu': 7.03,\n  'memory': 2.30 \n});       list  - data table   #config.yaml\nwidgets:\n  listTest:\n    display: list\n    type: device\n    keys: Hostname,Type,Platform,Arch\n    label: Secret Information  //send data through app.js\nmatrix.type('device').send({\n  'Hostname': 'h7n.domain',\n  'Type': 'Darwin',\n  'Platform': 'darwin',\n  'Arch': 'x64'\n});       list-group  - grouped data table  Simple Group   #config.yaml\nwidgets:\n  info:\n    display: list-group\n    type: vehicleDetection\n    keys: count\n    format: count\n    label: Total  //send data through app.js\nmatrix.type('vehicleDetection').send({\n  'zoneId': 'zone1',\n  'count': '4',\n  'speed': '56'\n});    Group By Key   #config.yaml\nwidgets:\n  info:\n    display: list-group\n    type: device\n    keys: zone, count\n    format: count\n    groupby: zone\n    label: Total  //send data through app.js\nmatrix.type('vehicleDetection').send({\n  'zoneId': 'zone1',\n  'count': '4',\n  'speed': '56'\n});       pie-chart  - pie chart   #config.yaml\nwidgets:\n  pieChartTest:\n    display: pie-chart\n    type: gender\n    keys: women,men\n    label: Gender  //send data through app.js\nmatrix.type('gender').send({\n  'women': 76,\n  'men': 45 \n});       polar  - polar area chart   #config.yaml\nwidgets:\n  polarTest:\n    display: polar\n    type: emotions\n    keys: happy,sad,disgust,surprised,confused,calm,angry\n    label: Emotions  //send data through app.js\nmatrix.type('emotions').send({\n  'happy': 67,\n  'sad': 50,\n  'disgust': 78,\n  'surprised': 56,\n  'confused': 86,\n  'calm': 70,\n  'angry': 60 \n});       label  - string display   #config.yaml\nwidgets:\n  labelTest:\n    display: label\n    type: uv\n    key: risk\n    label: UV Risk  //send data through app.js\nmatrix.type('uv').send({\n  'value': 0.56773,\n  'risk': 'Low' \n});       gauge  - gauge    #config.yaml\nwidgets:\n  gaugeTest:\n    display: gauge\n    type: detection\n    keys: views\n    min: 0\n    max: 100\n    label: 'Views'  //send data through app.js\nmatrix.type('detection').send({\n  'views': 60,\n  'impressions': 100 \n});       indicator  -  light indicator on/off   #config.yaml\nwidgets:\n  indicatorTest:\n    display: indicator\n    type: system\n    keys: isOn\n    label: 'Indicator Test'  //send data through app.js\nmatrix.type('system').send({\n  'isOn': true\n});       map  - google maps   widgets:\n  mapTest:\n    display: map\n    type: location\n    label: 'Map Test'  //send data through app.js\nmatrix.type('location').send({\n  'latitude': 25.791632,\n  'longitude': -80.1414447,\n  'label': 'Admobilize'\n});       link  - link to a destination (URL)   widgets:\n  link:\n    display: link\n    label:  Link display \n    title:  Google \n    url:  https://www.google.com", 
            "title": "Display widgets"
        }, 
        {
            "location": "/matrix-os/reference/widgets/#control-widgets", 
            "text": "Indicated via a  control  option.  Each example will show how to configure their respective widget.  screens  and  dataTypes  will be left up to you to configure.    input  - input field, single or multiple  Single Inputs   #config.yaml\nwidgets:\n  inputTest:\n    control: input\n    event: testInput\n    value: 'type text'\n    label: 'Test Input'  //Cross-Talk event from dashboard\nmatrix.on('testInput', function(p){\n var text = p.value;\n})  Multiple Inputs   #config.yaml\n  inputMapTest:\n    control: input\n    map:\n      - event: testInput1\n        value: first type text\n      - event: testInput2\n        value: second type text\n    label: Test Input Map  //Cross-Talk event from dashboard\nmatrix.on('testInput1', function(p){\n var text = p.value;\n})\n\nmatrix.on('testInput2', function(p){\n var text = p.value;\n})     button  - button, single or multiple  Single Buttons   #config.yaml\nwidgets:\n  buttonTest:\n    control: button\n    event: buttonInfo\n    value: Get Secret Information\n    label: Hacking Buttons  //Cross-Talk event from dashboard\nmatrix.on('buttonInfo', function(){\n  // ...\n});  Multiple Buttons   #config.yaml\nwidgets:\n  buttonMapTest:\n    control: button\n    map:\n      - event: buttonUp\n        value: amps+\n      - event: buttonDown\n        value: amps-\n      - event: buttonStart\n        value: begin\n      - event: buttonStop\n        value: end\n      - event: buttonCapture\n        value: capture\n      - event: buttonSlow\n        value: refresh+\n      - event: buttonFast\n        value: refresh-\n    label: Matrix Activation Buttons  //Cross-Talk event from dashboard\nmatrix.on('buttonUp', function(){\n  // ...\n})\n\nmatrix.on('buttonDown', function(){\n  // ...\n})\n\nmatrix.on('buttonStart', function(){\n  // ...\n})\n\nmatrix.on('buttonStop', function(){\n  // ...\n})\n\nmatrix.on('buttonCapture', function(){\n  // ...\n})\n\nmatrix.on('buttonSlow', function(){\n  // ...\n})\n\nmatrix.on('buttonFast', function(){\n  // ...\n})     switch  - switch, single or multiple  Single Switch   #config.yaml\nwidgets:\n  switchTest:\n    control: switch\n    event: ledEnabledChanged\n    value: Leds enabled\n    label: Switch Test  //Cross-Talk event from dashboard\nmatrix.on('ledEnabledChanged', function(p){\n var isOn = p.value;\n})  Multiple Switches   #config.yaml\nwidgets:\n  switchMapTest:\n    control: switch\n    map:\n      - event: ledEnabledChanged\n        value: Leds enabled\n      - event: detectionEnabledChanged\n        value: Detection Enabled\n    label: Switch Map Test  //Cross-Talk event from dashboard\nmatrix.on('ledEnabledChanged', function(p){\n var isOn = p.value;\n});\n\nmatrix.on('detectionEnabledChanged', function(p){\n var isOn = p.value;\n});     radio  - radio, single or multiple   #config.yaml\nwidgets:\n  radioTest:\n    control: radio\n    map:\n      - event: optionOneSelected\n        value: Option One\n      - event: optionTwoSelected\n        value: Option Two\n    label: Radio Test  //Cross-Talk event from dashboard\nmatrix.on('optionOneSelected', function(p){\n  // ...\n})\n\nmatrix.on('optionTwoSelected', function(p){\n  // ...\n})     dropdown  - dropdown menu   #config.yaml\nwidgets:\n  dropDownTest:\n    control: dropdown\n    map:\n      - event: optionOneSelected\n        value: Option One\n      - event: optionTwoSelected\n        value: Option Two\n    label: Dropdown Test  //Cross-Talk event from dashboard\nmatrix.on('optionOneSelected', function(){\n //...\n})\n\nmatrix.on('optionTwoSelected', function(){\n //...\n})     range  - range slider   #config.yaml\nwidgets:\n  rangeTest:\n    control: range\n    event: rangeChanged\n    min: 0\n    max: 35\n    label: Range Test  //Cross-Talk event from dashboard\nmatrix.on('rangeChanged', function(p){\n var value = p.value;\n});     xy  - track pad   #config.yaml\nwidgets:\n  xyTest:\n    control: xy\n    event: xyChanging\n    value: 'xy'\n    xMax: 100\n    yMax: 50\n    label: Test XY  //Cross-Talk event from dashboard\nmatrix.on('xyChanging', function(p){\n var x = p.value.x;\n var y = p.value.y;\n});     radial  - joystick, single or multiple  Single Radial   #config.yaml\nwidgets:\n  radial:\n    control: radial\n    event: radialChanging\n    label: Radial Test  //Cross-Talk event from dashboard\nmatrix.on('radialChanging', function(p){\n var x = p.value.x; //from -1 to 1\n var y = p.value.y; //from -1 to 1\n})  Multiple Radials   #config.yam\nwidgets:\n  radialMap:\n    control: radial\n    map:\n    - event: radialRChanging\n      value: right\n    - event: radialLChanging\n      value: left\n    label: Radial Map Test  //Cross-Talk event from dashboard\nmatrix.on('radialRChanging', function(p){\n var x = p.value.x; //from -1 to 1\n var y = p.value.y; //from -1 to 1\n});\n\nmatrix.on('radialLChanging', function(p){\n var x = p.value.x; //from -1 to 1\n var y = p.value.y; //from -1 to 1\n});     color  - color picker       #config.yaml\nwidgets:\n  color:\n    control: color\n    event: colorChange\n    value: 'color'\n    label: 'Change MATRIX color'  //Cross-Talk event from dashboard\nmatrix.on('colorChange', function(color){\n  color = color.value;\n  matrix.led(color).render();\n});", 
            "title": "Control Widgets"
        }, 
        {
            "location": "/matrix-os/reference/crosstalk/", 
            "text": "Cross-Talk\n\n\n\nCross-Talk events allow MATRIX applications to exchange information between different devices, or on the same device. For example, a temperature monitor app can output an event to an alarm app to notify you when the current temperature is too high or low. Cross-Talk events will only be sent to MATRIX devices tied to the same MATRIX Labs account.\n\n\nConfig Setup\n\n\n\n\nYou should have familiarity with \nConfiguration Files\n before exploring further.\n\n\n\n\nCrossTalk requires each event, that will be emitted, in your app's configuration file to execute successfully. This information is also used in the app store to determine which applications can communicate via events.\n\n\nDefining An Event\n\n\n\nAdd the \nevents:\n configuration to your app's config.yaml and give each event your app will emit. Do not add this to an app's configuration if they are only going to listen for events.\n\n\nevents:\n  - flashGreen\n  - highTemperature\n\n\n\n\n\n\nEvent Emitters \n Listeners\n\n\nOnce your app has its events properly defined, you can use \nmatrix.emit\n to broadcast the event to other MATRIX apps and \nmatrix.on\n to receive them.\n\n\n.emit(app, event, payload)\n\n\n\nUse this function in the application that has the events defined in the config.yaml file.\n\n\n\n\nEvents can also be emitted through the MATRIX CLI \nmatrix trigger\n command \nhere\n.\n\n\n\n\n\n\napp\n MATRIX app you're sending the event to.\n\n\nevent\n Event being sent to MATRIX app.\n\n\npayload\n Optional object or string to attach to event being sent.\n\n\n\n\n// Trigger an event in a specific application\nmatrix.emit('app', 'event', payload);\n\n// Example 1\nmatrix.emit('ledControl', 'flashGreen');\n\n// Example 2\nmatrix.emit('alarm', 'highTemperature', {temperature: 80.95899963378906}');\n\n\n\n\n\n.on(event, callback)\n\n\n\nUse this function in the application that will receive the events. Applications that receive events do not need to specify the events in its config.yaml.\n\n\n\n\nevent\n Event to listen on.\n\n\ncallback\n Callback method with payload returned.\n\n\n\n\n// Listen for CrossTalk events sent to this application\nmatrix.on('event', function(payload) {\n  //...\n});\n\n// Example 1\nmatrix.on('flashGreen', function(){\n  //...\n});\n\n// Example 2\nmatrix.on('highTemperature', function(payload){\n  //...\n});\n\n\n\n\n\n\n\nDashboard\n\n\nReceive events from the MATRIX Dashboard by binding them to widget controls.\n\n\n// Interface elements from Dashboards can also trigger CrossTalk events.\nmatrix.on('buttonClick', function(payload) { ... });\n\n\n\n\nSee \nConfiguration \n Widgets\n for the entire list.", 
            "title": "Cross Talk"
        }, 
        {
            "location": "/matrix-os/reference/crosstalk/#config-setup", 
            "text": "You should have familiarity with  Configuration Files  before exploring further.   CrossTalk requires each event, that will be emitted, in your app's configuration file to execute successfully. This information is also used in the app store to determine which applications can communicate via events.", 
            "title": "Config Setup"
        }, 
        {
            "location": "/matrix-os/reference/crosstalk/#event-emitters-listeners", 
            "text": "Once your app has its events properly defined, you can use  matrix.emit  to broadcast the event to other MATRIX apps and  matrix.on  to receive them.", 
            "title": "Event Emitters &amp; Listeners"
        }, 
        {
            "location": "/matrix-os/reference/crosstalk/#dashboard", 
            "text": "Receive events from the MATRIX Dashboard by binding them to widget controls.  // Interface elements from Dashboards can also trigger CrossTalk events.\nmatrix.on('buttonClick', function(payload) { ... });  See  Configuration   Widgets  for the entire list.", 
            "title": "Dashboard"
        }, 
        {
            "location": "/matrix-os/reference/data-types/", 
            "text": "Sending Data From MATRIX Devices\n\n\n\n\n\n\n\n\nYou should have familiarity with \nConfiguration Files\n and \nWidgets\n before exploring further.\n\n\n\n\nThe MATRIX Dashboard's \ndisplay widgets\n all require you to define \ndataTypes\n in your \nconfig.yaml\n file. \nwidgets\n can only ready values from defined \ndataTypes\n. Your MATRIX app can push to these values with the \nmatrix.send\n method.\n\n\nData Types\n\n\ndataTypes\n can be thought of as javascript objects. Each data type can contain multiple values known as \nkeys\n. These \nkeys\n can hold the following values.\n\n\n\n\nstring\n - can be defined as: \nstring\n or \nstr\n or \ns\n\n\ninteger\n - can be defined as: \ninteger\n or \nint\n or \ni\n\n\nfloat\n - can be defined as: \nfloat\n or \nfl\n or \nf\n\n\nboolean\n - can be defined as: \nb\n or \nbool\n or \nboolean\n;\n\n\n\n\nCreating Datatypes\n\n\n\nIn order to create your \ndataTypes\n, a \ntype\n needs to be specified. Once created, your \ntype\n needs at least one \nkey\n to be able to hold data.\n\n\n# How to structure\ndataTypes:\n  type1:\n    key1: string or integer or float or boolean\n    key2: string or integer or float or boolean\n  type2:\n    key1: string or integer or float or boolean\n\n\n\n\n# Example\ndataTypes:\n  location:\n    latitude: float\n    longitude: float\n  statusAlert:\n    currentStatus: string\n\n\n\n\n\n\nWe do not currently support changing dataTypes for newer versions of an application. If you need to change \ndataTypes\n after an application is published on the MATRIX App Store, please release a new application until we can address this issue.\n\n\n\n\n\n\nSending Data\n\n\nOnce your \ndataTypes\n are defined, you can begin to send data to the MATRIX Dashboard in real-time. The code below shows an example of how to have your \napp.js\n and \nconfig.yaml\n configured for updating \ndataTypes\n by using \nmatrix.send()\n.\n\n\n# config.yaml\ndataTypes:\n  location:\n    latitude: float\n    longitude: float\n\n\n\n\n// app.js\nmatrix.type('location').send({\n  'latitude': 40.285519,\n  'longitude': -76.650589\n})\n\n\n\n\n\n\nWidgets\n\n\nLearn how to use \nwidgets\n to see how you can use \ndataTypes\n to display real-time information on your MATRIX Dashboard.", 
            "title": "Data Types"
        }, 
        {
            "location": "/matrix-os/reference/data-types/#data-types", 
            "text": "dataTypes  can be thought of as javascript objects. Each data type can contain multiple values known as  keys . These  keys  can hold the following values.   string  - can be defined as:  string  or  str  or  s  integer  - can be defined as:  integer  or  int  or  i  float  - can be defined as:  float  or  fl  or  f  boolean  - can be defined as:  b  or  bool  or  boolean ;", 
            "title": "Data Types"
        }, 
        {
            "location": "/matrix-os/reference/data-types/#sending-data", 
            "text": "Once your  dataTypes  are defined, you can begin to send data to the MATRIX Dashboard in real-time. The code below shows an example of how to have your  app.js  and  config.yaml  configured for updating  dataTypes  by using  matrix.send() .  # config.yaml\ndataTypes:\n  location:\n    latitude: float\n    longitude: float  // app.js\nmatrix.type('location').send({\n  'latitude': 40.285519,\n  'longitude': -76.650589\n})", 
            "title": "Sending Data"
        }, 
        {
            "location": "/matrix-os/reference/data-types/#widgets", 
            "text": "Learn how to use  widgets  to see how you can use  dataTypes  to display real-time information on your MATRIX Dashboard.", 
            "title": "Widgets"
        }, 
        {
            "location": "/matrix-os/reference/system/", 
            "text": "System Methods\n\n\n\nSeveral methods are available for common computing use cases, like saving application variables, storing files or local database. These will be localized to the device and are not available across all instances of the application.\n\n\n\n\nSettings\n\n\nWhen an application requires a variable which should be user provided or will change between different instances, settings is a way to approach this problem.\n\n\nConfig Setup\n\n\n\n\n\nYou should have familiarity with \nConfiguration Files\n before exploring further.\n\n\n\n\nAdd the \nsettings:\n configuration to your app's config.yaml and specify each setting your app will save.\n\n\nsettings:\n  apiKey: 'dfe972dc'\n  secretKey: 'ea9e2dab'\n\n\n\n\nEvery key in settings is exposed on the root \nmatrix\n object. For example, \nsettings.apiKey\n is accessible in your MATRIX app as \nmatrix.apiKey\n.\n\n\nconsole.log(matrix.apiKey);// prints your apiKey setting\n\n\n\n\nDynamically Changing Settings from an application\n\n\n\n\n\nCurrently, the setting will only be overwritten after the MATRIX app restarts.\n\n\n\n\nmatrix.set({ apiKey: '3c3cce95' });// Overrides matrix.apiKey\nmatrix.set({ secretKey: '08937cef' });// Overrides matrix.apiKey\n\n\n\n\n\n\n\n\n\nLocal Database\n\n\nMATRIX OS provides a local, file-based key-value store for app usage. This storage is globally accessible to any application installed on the same device. \n\n\n\n\nIt is not recommended to set end user specific configurations here. use \nsettings\n instead.\n\n\n\n\nSet\n\n\n\nDefines the name of the a \nkey\n and the \nvalue\n it'll hold in the local database.\n\n\nmatrix.store.set(key, value, function(){\n  //...\n});\n\n\n\n\nGet\n\n\n\nObtains the \nvalue\n of a stored \nkey\n in the local database. The value is passed to the \ncallback\n.\n\n\nmatrix.store.get(key, function(error, value){\n  console.log(value);// prints key value\n});\n\n\n\n\nDelete\n\n\n\nRemove a stored \nkey\n from the local database.\n\n\nmatrix.store.delete(key, function(){\n  //...\n});\n\n\n\n\n\n\nFile Storage\n\n\nMATRIX applications utilize a local file storage for storing files. This enables MATRIX applications to dynamically download content that was not initially packaged with the app.\n\n\nSave\n\n\n\nDownloads and stores a file specified through a URL.\n\n\n\n\nurl\n publicly accessible url.\n\n\nfilename\n name of the file being saved.\n\n\ncallback\n function to call when save is complete.\n\n\n\n\nmatrix.file.save(url, filename, function(){\n  //..\n});\n\n\n\n\nLoad\n\n\n\nLoad the buffer of a file you saved.\n\n\n\n\nfilename\n file to load.\n\n\ncallback\n function to call after file is read\n\n\n\n\nmatrix.file.load(filename, function(error, data){\n  console.log(data);// prints buffer of loaded file\n});\n\n\n\n\nList\n\n\n\nSee all currently stored files in application.\n\n\n\n\ncallback\n function to call after files are counted\n\n\n\n\nmatrix.file.list(function(error, files){\n  console.log(files);// prints array of downloaded files\n})\n\n\n\n\nRemove\n\n\n\n\n\nfilename\n file to remove from application storage\n\n\ncallback\n function to call when remove is complete\n\n\n\n\nmatrix.file.remove(filename, function(){\n  //..\n});", 
            "title": "System Methods"
        }, 
        {
            "location": "/matrix-os/reference/system/#settings", 
            "text": "When an application requires a variable which should be user provided or will change between different instances, settings is a way to approach this problem.", 
            "title": "Settings"
        }, 
        {
            "location": "/matrix-os/reference/system/#local-database", 
            "text": "MATRIX OS provides a local, file-based key-value store for app usage. This storage is globally accessible to any application installed on the same device.    It is not recommended to set end user specific configurations here. use  settings  instead.", 
            "title": "Local Database"
        }, 
        {
            "location": "/matrix-os/reference/system/#file-storage", 
            "text": "MATRIX applications utilize a local file storage for storing files. This enables MATRIX applications to dynamically download content that was not initially packaged with the app.", 
            "title": "File Storage"
        }, 
        {
            "location": "/matrix-os/examples/", 
            "text": "Examples\n\n\n\n\n\nDashboard\n\n\n\nCreate a Dashboard for exploring data.", 
            "title": "Examples"
        }, 
        {
            "location": "/matrix-os/examples/#examples", 
            "text": "", 
            "title": "Examples"
        }, 
        {
            "location": "/matrix-os/examples/dash-create/", 
            "text": "Creating a Dashboard\n\n\n\n\n\nIn this example we will demonstrate how to make a MATRIX Dashboard that can read and send data from your MATRIX device. The final result will your MATRIX device flickering its LEDs green and sending a random number to the dashboard, once the user presses a button.\n\n\n\n\nYou should have familiarity with \nData Types\n, \nCross Talk\n, \nDashboard\n, and the \nGetting Started\n section before exploring further. \n\n\n\n\nSetting Up Your Application\n\n\nCreate Your App\n\nWith the, MATRIX CLI tool installed, go to the terminal on your personal computer and insert the following command.\n\n\nmatrix create exampleDashboard\n\n\n\n\nConfig.yaml\n\n\n\nWe will be setting up the app's \nconfig.yaml\n page in order to define the layout of our dashboard, dataTypes, and events.\n\n\n\n\n\n\ndatatypes\n - Will define the variable that will save the random number we create.\n\n\n\n\n\n\nscreens\n - Determines the placement of widgets.\n\n\n\n\n\n\nwidgets\n - Our two dashboard components to visualize the random number we generate and command our MATRIX device to make that number.\n\n\n\n\n\n\nEvents\n - Events doesn't have to be specified here because we are not sending one from our app, but receiving it from the \nstartButton\n widget we made. View \nCross Talk\n to learn more.\n\n\n\n\n\n\nconfigVersion: 2\n\ndescription: 'Example dashboard to learn from.'\nkeywords: dashboard example\nname: exampleDashboard\nshortName: exampleDashboard\ndisplayName: Example Dashboard\n\ndataTypes:\n  #Holds the value shown on the dashboard\n  randomNumber:\n    number: integer\n\nscreens:\n#This will show both widgets in the same Row\n- - numberGenerator\n  - startButton\n\nwidgets:\n  #Displays a randomly generated number\n  numberGenerator:\n    display: digit\n    type: randomNumber\n    key: number\n    label: Random Number\n  #Calls number generator\n  startButton:\n    control: button\n    event: generateNumber\n    value: Get Random Number\n    label: Start Number Generator\n\n\n\n\n\n\nWriting Your Application\n\n\nThe following code below goes into your application's \napp.js\n file. The code can be split into two parts. The first is a simple function to turn on and off your MATRIX device's LEDs. The second part waits for the dashboard \ngenerateNumber\n event from the \nstartButton\n widget. Once the event goes off, the previous function is called and a random number is created and sent to the dashboard's \nnumberGenerator\n widget.\n\n\n// - Turn LEDs on and then off\nfunction flickerLights(color){\n    matrix.led(color).render();// Turn LEDs green\n    // Wait 1 second\n    setTimeout(function(){\n        matrix.led('black').render();// Turn LEDs off\n    },500);\n}\n\n// - On Dashboard Button Press\nmatrix.on('generateNumber', function(){\n    flickerLights('green');// Flicker MATRIX Device LEDs\n\n    var randomNumber = Math.floor(Math.random()*100);// Generate a random number between 0 and 99\n    // Send Number To Dashboard\n    matrix.type('randomNumber').send({\n        'number': randomNumber\n    });\n});\n\n\n\n\n\n\nDeploying Your Application\n\n\nYou application should now be ready to deploy. Use the following command, with the location of your app folder, to send the app to your MATRIX device.\n\n\nmatrix deploy PATH_TO_YOUR_APP_HERE\n\n\n\n\nAfter it's deployed, you can start the app with the final command below.\n\n\nmatrix start exampleDashboard\n\n\n\n\nFinal Result\n\n\n\nVisit the \nMATRIX Dashboard\n to see the example you've deployed. Use the \"Get Random Number Button\" to test the number generator and LEDs flashing. \n\n\n\nAlternatively, you can use the following command if you want to test sending a Cross Talk command through the MATRIX CLI tool.\n\n\nmatrix trigger generateNumber", 
            "title": "Dashboard"
        }, 
        {
            "location": "/matrix-os/examples/dash-create/#setting-up-your-application", 
            "text": "", 
            "title": "Setting Up Your Application"
        }, 
        {
            "location": "/matrix-os/examples/dash-create/#writing-your-application", 
            "text": "The following code below goes into your application's  app.js  file. The code can be split into two parts. The first is a simple function to turn on and off your MATRIX device's LEDs. The second part waits for the dashboard  generateNumber  event from the  startButton  widget. Once the event goes off, the previous function is called and a random number is created and sent to the dashboard's  numberGenerator  widget.  // - Turn LEDs on and then off\nfunction flickerLights(color){\n    matrix.led(color).render();// Turn LEDs green\n    // Wait 1 second\n    setTimeout(function(){\n        matrix.led('black').render();// Turn LEDs off\n    },500);\n}\n\n// - On Dashboard Button Press\nmatrix.on('generateNumber', function(){\n    flickerLights('green');// Flicker MATRIX Device LEDs\n\n    var randomNumber = Math.floor(Math.random()*100);// Generate a random number between 0 and 99\n    // Send Number To Dashboard\n    matrix.type('randomNumber').send({\n        'number': randomNumber\n    });\n});", 
            "title": "Writing Your Application"
        }, 
        {
            "location": "/matrix-os/examples/dash-create/#deploying-your-application", 
            "text": "You application should now be ready to deploy. Use the following command, with the location of your app folder, to send the app to your MATRIX device.  matrix deploy PATH_TO_YOUR_APP_HERE  After it's deployed, you can start the app with the final command below.  matrix start exampleDashboard", 
            "title": "Deploying Your Application"
        }, 
        {
            "location": "/matrix-os/troubleshooting/", 
            "text": "Community\n\n\nPlease visit our community support forums at:\n\ncommunity.matrix.one\n\n\n\n\nMOS DEBUG Mode\n\n\nRun MOS, with the following command, in order to enable debug mode.\n\n\nDEBUG=*,-engine*,-Component* node index", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/matrix-os/troubleshooting/#community", 
            "text": "Please visit our community support forums at: community.matrix.one", 
            "title": "Community"
        }, 
        {
            "location": "/matrix-os/troubleshooting/#mos-debug-mode", 
            "text": "Run MOS, with the following command, in order to enable debug mode.  DEBUG=*,-engine*,-Component* node index", 
            "title": "MOS DEBUG Mode"
        }, 
        {
            "location": "/matrix-core/overview/", 
            "text": "MATRIX CORE\n\n\n\n\n\nPreviously known as MATRIX MALOS.\n\n\n\n\nMATRIX CORE is an abstraction layer for \nMATRIX HAL\n and the foundation for \nMATRIX OS\n. This layer uses \n\nProtocol Buffers\n \n \nZeroMQ\n to communicate with your MATRIX device. Applications for your MATRIX device can be programmed with any language that supports these tools.\n\n\nGetting Started\n\n\nLearn how to install MATRIX CORE and gain a deeper understanding of how this layer interacts with your MATRIX device. Setup tutorials and hello world examples for Javascript \n Python are available here.\n\n\nDriver Protocols\n\n\nSee the available drivers you can interact with and the protocols they require for communicating with your application.\n\n\nLibrary Examples\n\n\n\n\nJavascript\n\n\nPython\n\n\n\n\nTroubleshooting\n\n\nLook at common debugging solutions for any issues you encounter.", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/overview/#getting-started", 
            "text": "Learn how to install MATRIX CORE and gain a deeper understanding of how this layer interacts with your MATRIX device. Setup tutorials and hello world examples for Javascript   Python are available here.", 
            "title": "Getting Started"
        }, 
        {
            "location": "/matrix-core/overview/#driver-protocols", 
            "text": "See the available drivers you can interact with and the protocols they require for communicating with your application.", 
            "title": "Driver Protocols"
        }, 
        {
            "location": "/matrix-core/overview/#library-examples", 
            "text": "", 
            "title": "Library Examples"
        }, 
        {
            "location": "/matrix-core/overview/#troubleshooting", 
            "text": "Look at common debugging solutions for any issues you encounter.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/matrix-core/getting-started/", 
            "text": "Getting Started\n\n\nInstallation\n\n\n\nLearn how to install MATRIX CORE on your MATRIX Device.\n\n\nUnderstanding CORE\n\n\n\nUnderstand how MATRIX CORE uses ZeroMQ to communicate with Protocol Buffers.\n\n\nJavascript Setup\n\n\n\nUse Javascript to program with MATRIX CORE\n\n\nPython Setup\n\n\n\nUse Python to program with MATRIX CORE", 
            "title": "Index"
        }, 
        {
            "location": "/matrix-core/getting-started/#getting-started", 
            "text": "", 
            "title": "Getting Started"
        }, 
        {
            "location": "/matrix-core/getting-started/core-installation/", 
            "text": "Installing MATRIX CORE\n\n\n\n\n\nMake sure you have setup your \n\nMATRIX Creator\n or \n\nMATRIX Voice\n before continuing.\n\n\n\n\nInstallation\n\n\nBefore starting, ensure you have access to the terminal of your Raspberry Pi via an \nSSH-session\n or a connected screen, mouse, and keyboard. Then insert and run the following commands into your Raspberry Pi's terminal, one at a time.\n\n\ncurl https://apt.matrix.one/doc/apt-key.gpg | sudo apt-key add -\necho \ndeb https://apt.matrix.one/raspbian $(lsb_release -sc) main\n | sudo tee /etc/apt/sources.list.d/matrixlabs.list\nsudo apt-get update\nsudo apt-get upgrade \n\n\n\n\nThe next command will install the MATRIX CORE packages.\n\n\nsudo apt-get install matrixio-malos\n\n\n\n\nAfter the MATRIX CORE packages are installed, use the command below to reboot your Raspberry Pi. MATRIX CORE will then be running as a service each time your Raspberry Pi boots up.\n\n\nsudo reboot\n\n\n\n\nThese remaining commands will install \nZeroMQ\n.\n\n\necho \ndeb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0/ ./\n \n /etc/apt/sources.list\nwget https://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0/Release.key -O- | sudo apt-key add\n\n\n\n\n\n\nHelpful Information\n\n\nUpgrading\n\n\nIf you need to upgrade your MATRIX CORE package at any time, please run the following commands on your Raspberry Pi.\n\n\nsudo apt-get update\nsudo apt-get upgrade\n\n\n\n\nA reboot will be required after upgrading your packages.\n\n\nsudo reboot\n\n\n\n\nStopping \n&\n Starting\n\n\n\nIf you need to manually stop MATRIX CORE use:\n\n\nsudo pkill -9 malos\n\n\n\n\nIf you need to manually start MATRIX CORE again use:\n\n\nmalos \n\n\n\n\n\n\n\nNext Steps\n\n\nNow that you have MATRIX CORE and ZeroMQ installed, please take a look at Understanding CORE \nhere\n.\n\n\nIf you're already familiar, you can learn how to setup a programming language for communicating with CORE.  We currently have tutorials for the following languages:\n\n\n\n\nJavascript\n\n\nPython", 
            "title": "Installation"
        }, 
        {
            "location": "/matrix-core/getting-started/core-installation/#installation", 
            "text": "Before starting, ensure you have access to the terminal of your Raspberry Pi via an  SSH-session  or a connected screen, mouse, and keyboard. Then insert and run the following commands into your Raspberry Pi's terminal, one at a time.  curl https://apt.matrix.one/doc/apt-key.gpg | sudo apt-key add -\necho  deb https://apt.matrix.one/raspbian $(lsb_release -sc) main  | sudo tee /etc/apt/sources.list.d/matrixlabs.list\nsudo apt-get update\nsudo apt-get upgrade   The next command will install the MATRIX CORE packages.  sudo apt-get install matrixio-malos  After the MATRIX CORE packages are installed, use the command below to reboot your Raspberry Pi. MATRIX CORE will then be running as a service each time your Raspberry Pi boots up.  sudo reboot  These remaining commands will install  ZeroMQ .  echo  deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0/ ./    /etc/apt/sources.list\nwget https://download.opensuse.org/repositories/network:/messaging:/zeromq:/release-stable/Debian_9.0/Release.key -O- | sudo apt-key add", 
            "title": "Installation"
        }, 
        {
            "location": "/matrix-core/getting-started/core-installation/#helpful-information", 
            "text": "", 
            "title": "Helpful Information"
        }, 
        {
            "location": "/matrix-core/getting-started/core-installation/#next-steps", 
            "text": "Now that you have MATRIX CORE and ZeroMQ installed, please take a look at Understanding CORE  here .  If you're already familiar, you can learn how to setup a programming language for communicating with CORE.  We currently have tutorials for the following languages:   Javascript  Python", 
            "title": "Next Steps"
        }, 
        {
            "location": "/matrix-core/getting-started/understanding-core/", 
            "text": "Overview\n\n\nMATRIX CORE functions by sending and receiving \nProtocol Buffers\n over a \nZeroMQ\n connection. This can be used to query sensors and control any MATRIX device from any language that supports Protocol Buffers (version 3.X) and ZeroMQ. This is the basis for how the \nMATRIX OS\n layer can communicate with your MATRIX device. \n\n\n\n\nPorts \n Protocol\n\n\nMATRIX CORE contains drivers (components \n sensors) that communicate with your MATRIX device. This occurs by having each driver send or receive Protocol Buffers over a ZeroMQ driver port. Depending on the driver port it may allow for \nread-only\n, \nwrite-only\n or \nread-write\n.\n\n\nCurrent Driver Base Ports:\n\n\n\n\nIMU\n - \n20013\n\n\nHumidity\n - \n20017\n\n\nEverloop\n - \n20021\n\n\nPressure\n - \n20025\n\n\nUV\n - \n20029\n\n\n\n\n\n\nServo\n - \n20045\n\n\nGPIO\n - \n20049\n\n\n\n\nEach driver reserves 4 ports beginning with their \nbase port\n as shown above. The other 3 ports are in sequential order counting up from the \nbase port\n. Below is an example of all IMU ports. Note, not all drivers utilize every port.\n\n\nAll IMU Ports\n\n\n\n\nIMU Base Port\n - \n20013\n\n\nIMU Keep-Alive Port\n - \n20014\n\n\nIMU Error Port\n - \n20015\n\n\nIMU Data Update Port\n - \n20016\n\n\n\n\nThe following list contains the port types currently defined in MATRIX CORE.\n\n\n\n\n\nBase Port\n\nThe \nbase port\n is used to configure a driver on your MATRIX device. This port is a \nZeroMQ PULL port\n that accepts a configuration which is created as a protocol buffer.\n\n\nTo send a configuration you need to create a valid message for each driver. For example, the UV driver uses a configuration message to set the refresh rate and timeout for sending UV data.\n\n\nConfiguration messages are named \nDriverConfig\n. The file for where this is defined can be seen \nhere\n.\n\n\nBelow is an example for a UV configuration message:\n\n\nmessage DriverConfig {\n  // Delay between updates. In seconds.\n  float delay_between_updates = 1;\n  // Timeout after last ping.\n  float timeout_after_last_ping = 2;\n}\n\n\n\n\nOnce the \nDriverConfig\n message is filled out, it needs to be serialized as a string and sent to the ZeroMQ configuration port.\n\n\n\n\n\n\n\nKeep-alive Port\n\n\nPort\n: \nbase port\n + 1\n\n\nThe Keep-alive port is a \nZeroMQ PULL port\n that is required for certain drivers to keep their function alive. Drivers that are pushing data need this in place to let it know if data will continue to be requested. For example, the Everloop driver doesn't require Keep-alive messages, but the Humidity driver does. Any message that is sent to the Keep-alive port will be discarded, so an empty string \n\"\"\n makes for a good Keep-alive message.\n\n\n\n\n\n\n\n\nError Port\n\n\nPort\n: \nbase port\n + 2\n\n\nPrograms can subscribe to this port to receive driver related errors. The Error port is a \nZeroMQ PUSH port\n that will send you a string with any errors that it has encountered.\n\n\n\n\n\n\n\nData Update Port\n\n\nPort\n: \nbase port\n + 3\n\n\nThis \nZeroMQ PUSH port\n is used by drivers that send data (Humidity, UV, etc.). Each driver uses a different message to report data to programs that subscribe for these updates.\n\n\nTo demonstrate, the UV driver will be used as an example. You can find the file \nhere\n.\nThe message follows:\n\n\n// Basic UV radiation lecture.\nmessage UV{\n  // UV index\n  float uv_index = 1;\n  // OMS risk\n  string oms_risk = 2;\n}\n\n\n\n\nApplications that subscribe to UV driver updates will receive a string with serialized messages of type UV. Once received, the message needs to be deserialized by the application for the values can be used.\n\n\n\n\n\n\nNext Steps\n\n\nWe currently provide libraries and examples for the following languages:\n\n\n\n\nJavascript\n\n\nPython\n\n\n\n\nIf you want to use another protocol buffer supported programming language then we suggest you view the \nProtocol Buffers Documentation\n for the language you want to use in MATRIX CORE. Remember to use \nZeroMQ\n for sending these Protocol Buffers. You can view the protocols for each of our drivers \nhere\n.", 
            "title": "Understanding CORE"
        }, 
        {
            "location": "/matrix-core/getting-started/understanding-core/#overview", 
            "text": "MATRIX CORE functions by sending and receiving  Protocol Buffers  over a  ZeroMQ  connection. This can be used to query sensors and control any MATRIX device from any language that supports Protocol Buffers (version 3.X) and ZeroMQ. This is the basis for how the  MATRIX OS  layer can communicate with your MATRIX device.", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/getting-started/understanding-core/#ports-protocol", 
            "text": "MATRIX CORE contains drivers (components   sensors) that communicate with your MATRIX device. This occurs by having each driver send or receive Protocol Buffers over a ZeroMQ driver port. Depending on the driver port it may allow for  read-only ,  write-only  or  read-write .  Current Driver Base Ports:   IMU  -  20013  Humidity  -  20017  Everloop  -  20021  Pressure  -  20025  UV  -  20029    Servo  -  20045  GPIO  -  20049   Each driver reserves 4 ports beginning with their  base port  as shown above. The other 3 ports are in sequential order counting up from the  base port . Below is an example of all IMU ports. Note, not all drivers utilize every port.  All IMU Ports   IMU Base Port  -  20013  IMU Keep-Alive Port  -  20014  IMU Error Port  -  20015  IMU Data Update Port  -  20016   The following list contains the port types currently defined in MATRIX CORE.   Base Port \nThe  base port  is used to configure a driver on your MATRIX device. This port is a  ZeroMQ PULL port  that accepts a configuration which is created as a protocol buffer.  To send a configuration you need to create a valid message for each driver. For example, the UV driver uses a configuration message to set the refresh rate and timeout for sending UV data.  Configuration messages are named  DriverConfig . The file for where this is defined can be seen  here .  Below is an example for a UV configuration message:  message DriverConfig {\n  // Delay between updates. In seconds.\n  float delay_between_updates = 1;\n  // Timeout after last ping.\n  float timeout_after_last_ping = 2;\n}  Once the  DriverConfig  message is filled out, it needs to be serialized as a string and sent to the ZeroMQ configuration port.    Keep-alive Port  Port :  base port  + 1  The Keep-alive port is a  ZeroMQ PULL port  that is required for certain drivers to keep their function alive. Drivers that are pushing data need this in place to let it know if data will continue to be requested. For example, the Everloop driver doesn't require Keep-alive messages, but the Humidity driver does. Any message that is sent to the Keep-alive port will be discarded, so an empty string  \"\"  makes for a good Keep-alive message.     Error Port  Port :  base port  + 2  Programs can subscribe to this port to receive driver related errors. The Error port is a  ZeroMQ PUSH port  that will send you a string with any errors that it has encountered.    Data Update Port  Port :  base port  + 3  This  ZeroMQ PUSH port  is used by drivers that send data (Humidity, UV, etc.). Each driver uses a different message to report data to programs that subscribe for these updates.  To demonstrate, the UV driver will be used as an example. You can find the file  here .\nThe message follows:  // Basic UV radiation lecture.\nmessage UV{\n  // UV index\n  float uv_index = 1;\n  // OMS risk\n  string oms_risk = 2;\n}  Applications that subscribe to UV driver updates will receive a string with serialized messages of type UV. Once received, the message needs to be deserialized by the application for the values can be used.", 
            "title": "Ports &amp; Protocol"
        }, 
        {
            "location": "/matrix-core/getting-started/understanding-core/#next-steps", 
            "text": "We currently provide libraries and examples for the following languages:   Javascript  Python   If you want to use another protocol buffer supported programming language then we suggest you view the  Protocol Buffers Documentation  for the language you want to use in MATRIX CORE. Remember to use  ZeroMQ  for sending these Protocol Buffers. You can view the protocols for each of our drivers  here .", 
            "title": "Next Steps"
        }, 
        {
            "location": "/matrix-core/getting-started/javascript-installation/", 
            "text": "Ensure you have \nMATRIX CORE\n installed, before moving on.\n\n\n\n\nInstalling Node.js\n\n\nThis setup will go through how to install \nNode.js\n and the dependencies needed to create a Node application that can communicate with MATRIX CORE.\n\n\nRun the following commands on your MATRIX device(Raspberry Pi) to install \nNode Version Manager\n which will then be used to install version \n8.6\n of Node.js.\n\n\n\n\nIt is \nstrongly\n recommended to use version \n8.6\n of Node.js\n\n\n\n\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\n. ~/.bashrc\nnvm install 8.6\n\n\n\n\n\n\nCreating A Node.js Application\n\n\nMaking Your Project Directory\n\nUse the following commands to initialize a Node project folder, in the home directory \n~/\n of your MATRIX device.\n\n\ncd ~/\nmkdir js-matrix-core-app\ncd js-matrix-core-app\nnpm init\n\n\n\n\nInstalling npm Packages for ZMQ and Protocol Buffers\n\n\n\nWhile staying inside your app folder, use the commands below to install the ZMQ and MATRIX Protocol Buffers npm packages. This allows you to interact with MATRIX Core through Node.js.\n\n\nnpm install zeromq --save\nnpm install matrix-protos --save\n\n\n\n\n\n\nCheck If Everything Works\n\n\nCreating app.js\n\nTo ensure your installation has succeeded, create a file named app.js and paste the code below.\n\n\n// Set Initial Variables \\\\\nvar zmq = require('zeromq');// Asynchronous Messaging Framework\nvar matrix_io = require('matrix-protos').matrix_io;// Protocol Buffers for MATRIX function\nvar matrix_ip = '127.0.0.1';// Local IP\nvar matrix_everloop_base_port = 20021// Port for Everloop driver\nvar matrix_device_leds = 0;// Holds amount of LEDs on MATRIX device\n\n// ERROR PORT \\\\\nvar errorSocket = zmq.socket('sub');// Create a Subscriber socket\nerrorSocket.connect('tcp://' + matrix_ip + ':' + (matrix_everloop_base_port + 2));// Connect Subscriber to Error port\nerrorSocket.subscribe('');// Subscribe to messages\n// On Message\nerrorSocket.on('message', (error_message) =\n {\n    console.log('Error received: ' + error_message.toString('utf8'));// Log error\n});\n\n// DATA UPDATE PORT \\\\\nvar updateSocket = zmq.socket('sub');// Create a Subscriber socket\nupdateSocket.connect('tcp://' + matrix_ip + ':' + (matrix_everloop_base_port + 3));// Connect Subscriber to Data Update port\nupdateSocket.subscribe('');// Subscribe to messages\n// On Message\nupdateSocket.on('message', (buffer) =\n {\n    var data = matrix_io.malos.v1.io.EverloopImage.decode(buffer);// Extract message\n    matrix_device_leds = data.everloopLength;// Save MATRIX device LED count\n});\n\n// KEEP-ALIVE PORT \\\\\nvar pingSocket = zmq.socket('push');// Create a Pusher socket\npingSocket.connect('tcp://' + matrix_ip + ':' + (matrix_everloop_base_port + 1));// Connect Pusher to Keep-alive port\npingSocket.send('');// Send a single ping\n\n// BASE PORT \\\\\nvar configSocket = zmq.socket('push');// Create a Pusher socket\nconfigSocket.connect('tcp://' + matrix_ip + ':' + matrix_everloop_base_port);// Connect Pusher to Base port\n\n// Create an empty Everloop image\nvar image = matrix_io.malos.v1.io.EverloopImage.create();\n\n// Loop every 50 milliseconds\nsetInterval(function(){\n    // For each device LED\n    for (var i = 0; i \n matrix_device_leds; ++i) {\n        // Set individual LED value\n        image.led[i] = {\n            red: Math.floor(Math.random() * 200)+1,\n            green: Math.floor(Math.random() * 255)+1,\n            blue: Math.floor(Math.random() * 50)+1,\n            white: 0\n        };\n    }\n\n    // Store the Everloop image in MATRIX configuration\n    var config = matrix_io.malos.v1.driver.DriverConfig.create({\n        'image': image\n    });\n\n    // Send MATRIX configuration to MATRIX device\n    if(matrix_device_leds \n 0)\n        configSocket.send(matrix_io.malos.v1.driver.DriverConfig.encode(config).finish());\n},50);\n\n\n\n\nRunning app.js\n\n\n\nOnce you have the app.js code copied, use the following command to run a simple hello world app.\n\n\nnode app.js\n\n\n\n\nResult\n\n\n\n\n\nNext Steps\n\n\nNow that everything is properly installed, learn more about the Everloop and other \nDriver Protocols\n MATRIX Core has to offer, or view the available \nJavascript examples\n.", 
            "title": "Javascript Setup"
        }, 
        {
            "location": "/matrix-core/getting-started/javascript-installation/#installing-nodejs", 
            "text": "This setup will go through how to install  Node.js  and the dependencies needed to create a Node application that can communicate with MATRIX CORE.  Run the following commands on your MATRIX device(Raspberry Pi) to install  Node Version Manager  which will then be used to install version  8.6  of Node.js.   It is  strongly  recommended to use version  8.6  of Node.js   curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\n. ~/.bashrc\nnvm install 8.6", 
            "title": "Installing Node.js"
        }, 
        {
            "location": "/matrix-core/getting-started/javascript-installation/#creating-a-nodejs-application", 
            "text": "", 
            "title": "Creating A Node.js Application"
        }, 
        {
            "location": "/matrix-core/getting-started/javascript-installation/#check-if-everything-works", 
            "text": "", 
            "title": "Check If Everything Works"
        }, 
        {
            "location": "/matrix-core/getting-started/javascript-installation/#next-steps", 
            "text": "Now that everything is properly installed, learn more about the Everloop and other  Driver Protocols  MATRIX Core has to offer, or view the available  Javascript examples .", 
            "title": "Next Steps"
        }, 
        {
            "location": "/matrix-core/getting-started/python-installation/", 
            "text": "Ensure you have \nMATRIX CORE\n installed, before moving on.\n\n\n\n\nCreating A Python Project\n\n\nThis setup will go through how to install all the necessary python packages needed to program with MATRIX CORE.\n\n\nFirst, use the commands below to create a folder, inside in the home directory \n~/\n of your MATRIX device(Raspberry Pi). This will be where you'll put your python scripts.\n\n\ncd ~/\nmkdir python-matrix-core-app\ncd python-matrix-core-app\n\n\n\n\n\n\nInstalling Python Packages\n\n\nWhile inside your project directory, use the following commands to install all the necessary Python packages needed to interact with MATRIX CORE.\n\n\nwget \nhttps://github.com/matrix-io/matrix-creator-malos/blob/master/src/python_test/Pipfile\n -O Pipfile\nwget \nhttps://github.com/matrix-io/matrix-creator-malos/blob/master/src/python_test/Pipfile.lock\n -O Pipfile.lock\nwget \nhttps://raw.githubusercontent.com/matrix-io/matrix-creator-malos/master/src/python_test/requirements.txt\n -O requirements.txt \nwget \nhttps://raw.githubusercontent.com/matrix-io/matrix-creator-malos/master/src/python_test/utils.py\n -O utils.py \nsudo apt-get install build-essential python-dev\n\n\n\n\nPython 2 Packages\n\n\n\nRequired packages for Python 2 can be installed by using the following command.\n\n\npip install -r requirements.txt\n\n\n\n\nPython 3 Packages\n\n\n\nInstead of pip, Python 3 packages will require pip3 which can be installed with the command below.\n\n\nsudo apt-get install python3-pip\n\n\n\n\nYou can now install the required packages for Python 3.\n\n\npip3 install -r requirements.txt\n\n\n\n\n\n\nCheck If Everything Works\n\n\nCreating app.py\n\nTo ensure your installation has succeeded, create a file named app.py and paste the code below.\n\n\n## Set Initial Variables ##\nimport os # Miscellaneous operating system interface\nimport zmq # Asynchronous messaging framework\nimport time # Time access and conversions\nfrom random import randint # Random numbers\nimport sys # System-specific parameters and functions\nfrom matrix_io.proto.malos.v1 import driver_pb2 # MATRIX Protocol Buffer driver library\nfrom matrix_io.proto.malos.v1 import io_pb2 # MATRIX Protocol Buffer sensor library\nfrom multiprocessing import Process, Manager, Value # Allow for multiple processes at once\nfrom zmq.eventloop import ioloop, zmqstream# Asynchronous events through ZMQ\nmatrix_ip = '127.0.0.1' # Local device ip\neverloop_port = 20021 # Driver Base port\nled_count = 0 # Amount of LEDs on MATRIX device\n# Handy function for connecting to the Error port \nfrom utils import register_error_callback\n\n## BASE PORT ##\ndef config_socket(ledCount):  \n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Pusher socket\n    socket = context.socket(zmq.PUSH)\n    # Connect Pusher to configuration socket\n    socket.connect('tcp://{0}:{1}'.format(matrix_ip, everloop_port))\n\n    # Loop forever\n    while True:\n        # Create a new driver config\n        driver_config_proto = driver_pb2.DriverConfig()\n        # Create an empty Everloop image\n        image = []\n        # For each device LED\n        for led in range(ledCount):\n            # Set individual LED value\n            ledValue = io_pb2.LedValue()\n            ledValue.blue = randint(0, 50)\n            ledValue.red = randint(0, 200)\n            ledValue.green = randint(0, 255)\n            ledValue.white = 0\n            image.append(ledValue)\n        # Store the Everloop image in driver configuration\n        driver_config_proto.image.led.extend(image)\n\n        # Send driver configuration through ZMQ socket\n        socket.send(driver_config_proto.SerializeToString())\n        #Wait before restarting loop\n        time.sleep(0.05)\n\n## KEEP ALIVE ##\ndef ping_socket():\n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Pusher socket\n    ping_socket = context.socket(zmq.PUSH)\n    # Connect to the socket\n    ping_socket.connect('tcp://{0}:{1}'.format(matrix_ip, everloop_port+1))\n    # Ping with empty string to let the drive know we're still listening\n    ping_socket.send_string('')\n\n## ERROR PORT ##\ndef everloop_error_callback(error):\n    # Log error\n    print('{0}'.format(error))\n\n## DATA UPDATE PORT ##\ndef update_socket():\n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Subscriber socket\n    socket = context.socket(zmq.SUB)\n    # Connect to the Data Update port\n    socket.connect('tcp://{0}:{1}'.format(matrix_ip, everloop_port+3))\n    # Connect Subscriber to Error port\n    socket.setsockopt(zmq.SUBSCRIBE, b'')\n    # Create the stream to listen to data from port\n    stream = zmqstream.ZMQStream(socket)\n\n    # Function to update LED count and close connection to the Data Update Port\n    def updateLedCount(data):\n        # Extract data and pass into led_count global variable\n        global led_count\n        led_count = io_pb2.LedValue().FromString(data[0]).green\n        # Log LEDs\n        print('{0} LEDs counted'.format(led_count))\n        # If LED count obtained\n        if led_count \n 0:\n            # Close Data Update Port connection\n            ioloop.IOLoop.instance().stop()\n            print('LED count obtained. Disconnecting from data publisher {0}'.format(everloop_port+3))\n    # Call updateLedCount() once data is received\n    stream.on_recv(updateLedCount)\n\n    # Log and begin event loop for ZMQ connection to Data Update Port\n    print('Connected to data publisher with port {0}'.format(everloop_port+3))\n    ioloop.IOLoop.instance().start()\n\n## START  PROCESSES ##\nif __name__ == '__main__':\n    # Initiate asynchronous events\n    ioloop.install()\n    # Start Error Port connection\n    Process(target=register_error_callback, args=(everloop_error_callback, matrix_ip, everloop_port)).start()    \n\n    # Ping the Keep-alive Port once\n    ping_socket()\n    # Start Data Update Port connection \n close after response\n    update_socket()\n    # Send Base Port configuration\n    try:\n        config_socket(led_count)\n    # Avoid logging Everloop errors on user quiting\n    except KeyboardInterrupt:\n        print(' quit')\n\n\n\n\nRunning app.js\n\n\n\nOnce you have the app.js code copied, use the following command to run a simple hello world app.\n\n\npython app.py\n\n\n\n\nResult\n\n\n\n\n\nNext Steps\n\n\nNow that everything is properly installed, learn more about the Everloop and other \nDriver Protocols\n MATRIX Core has to offer, or view the available \nPython examples\n.", 
            "title": "Python Setup"
        }, 
        {
            "location": "/matrix-core/getting-started/python-installation/#creating-a-python-project", 
            "text": "This setup will go through how to install all the necessary python packages needed to program with MATRIX CORE.  First, use the commands below to create a folder, inside in the home directory  ~/  of your MATRIX device(Raspberry Pi). This will be where you'll put your python scripts.  cd ~/\nmkdir python-matrix-core-app\ncd python-matrix-core-app", 
            "title": "Creating A Python Project"
        }, 
        {
            "location": "/matrix-core/getting-started/python-installation/#installing-python-packages", 
            "text": "While inside your project directory, use the following commands to install all the necessary Python packages needed to interact with MATRIX CORE.  wget  https://github.com/matrix-io/matrix-creator-malos/blob/master/src/python_test/Pipfile  -O Pipfile\nwget  https://github.com/matrix-io/matrix-creator-malos/blob/master/src/python_test/Pipfile.lock  -O Pipfile.lock\nwget  https://raw.githubusercontent.com/matrix-io/matrix-creator-malos/master/src/python_test/requirements.txt  -O requirements.txt \nwget  https://raw.githubusercontent.com/matrix-io/matrix-creator-malos/master/src/python_test/utils.py  -O utils.py \nsudo apt-get install build-essential python-dev", 
            "title": "Installing Python Packages"
        }, 
        {
            "location": "/matrix-core/getting-started/python-installation/#check-if-everything-works", 
            "text": "", 
            "title": "Check If Everything Works"
        }, 
        {
            "location": "/matrix-core/getting-started/python-installation/#next-steps", 
            "text": "Now that everything is properly installed, learn more about the Everloop and other  Driver Protocols  MATRIX Core has to offer, or view the available  Python examples .", 
            "title": "Next Steps"
        }, 
        {
            "location": "/matrix-core/protocols/", 
            "text": "Driver Protocols\n\n\nEverloop\n\nLED interface.\n\n\nHumidity\n\n\n\nHumidity and temperature measurement.\n\n\nIMU\n\n\n\nInertial Measurement Unit.\n\n\nPressure\n\n\n\nPressure, altitude and temperature measurement.\n\n\nUV\n\n\n\nUltraviolet light sensor.\n\n\nServo\n\n\n\nAdjust servo positions.\n\n\nGPIO\n\n\n\nGeneral Purpose Input/Output.", 
            "title": "Index"
        }, 
        {
            "location": "/matrix-core/protocols/#driver-protocols", 
            "text": "", 
            "title": "Driver Protocols"
        }, 
        {
            "location": "/matrix-core/protocols/everloop/", 
            "text": "Everloop\n\n\n\nDevice Compatibility\n\n\n\n\n\n\nOverview\n\n\nThe Everloop driver allows for:\n\n\n\n\nReading amount of LEDs your MATRIX device has.\n\n\nSetting the RGBW colors for each individual LED.\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20021\n\n\nKeep-alive port\n: 20022\n\n\nError port\n: 20023\n\n\nData update port\n: 20024\n\n\n\n\nProtocol\n\n\n\n\n\n\n\nBase Port\n\nThis port accepts a single configuration for communicating with the Everloop driver. \n\n\n\n\nimage\n - the everloop configuration that's created from an \nEverloopImage\n message.\n\n\n\n\nmessage DriverConfig {\n  matrix_io.malos.v1.io.EverloopImage image = 3;\n}\n\n\n\n\nView the defined message \nhere\n.\n\n\nEverloopImage\n \n\n\n\n\nled\n - Must hold the value for each LED on your MATRIX device. Each LED is defined as one \nLedValue\n.\n\n\n\n\n// Value for an led that ranges from 0 to 255 for each color\nmessage LedValue {\n  uint32 red = 1;\n  uint32 green = 2;\n  uint32 blue = 3;\n  uint32 white = 4;\n}\n\n// The led array.\nmessage EverloopImage {\n  repeated LedValue led = 1;\n}\n\n\n\n\nView the defined message \nhere\n.\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThis driver needs keep-alive messages in order to send data to your application. It's recommended to send an empty string \n\"\"\n because the contents of a keep-alive message are never read.\n\n\n\n\n\n\n\n\nError Port\n\nApplications can subscribe to this port to receive driver related errors.\n\n\n\n\n\n\n\n\nData Update Port\n\nApplications can subscribe to this port for Everloop data. The output will be a serialized message of type \nEverloopImage\n with the following information.\n\n\n// The led array.\nmessage EverloopImage {\n  repeated LedValue led = 1;\n\n  // Number of leds in the Everloop\n  int32 everloop_length = 2;\n}\n\n\n\n\nView the defined message \nhere\n.", 
            "title": "Everloop"
        }, 
        {
            "location": "/matrix-core/protocols/everloop/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/protocols/everloop/#overview", 
            "text": "The Everloop driver allows for:   Reading amount of LEDs your MATRIX device has.  Setting the RGBW colors for each individual LED.", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/protocols/everloop/#protocol", 
            "text": "Base Port \nThis port accepts a single configuration for communicating with the Everloop driver.    image  - the everloop configuration that's created from an  EverloopImage  message.   message DriverConfig {\n  matrix_io.malos.v1.io.EverloopImage image = 3;\n}  View the defined message  here .  EverloopImage     led  - Must hold the value for each LED on your MATRIX device. Each LED is defined as one  LedValue .   // Value for an led that ranges from 0 to 255 for each color\nmessage LedValue {\n  uint32 red = 1;\n  uint32 green = 2;\n  uint32 blue = 3;\n  uint32 white = 4;\n}\n\n// The led array.\nmessage EverloopImage {\n  repeated LedValue led = 1;\n}  View the defined message  here .    Keep-alive Port \nThis driver needs keep-alive messages in order to send data to your application. It's recommended to send an empty string  \"\"  because the contents of a keep-alive message are never read.    Error Port \nApplications can subscribe to this port to receive driver related errors.    Data Update Port \nApplications can subscribe to this port for Everloop data. The output will be a serialized message of type  EverloopImage  with the following information.  // The led array.\nmessage EverloopImage {\n  repeated LedValue led = 1;\n\n  // Number of leds in the Everloop\n  int32 everloop_length = 2;\n}  View the defined message  here .", 
            "title": "Protocol"
        }, 
        {
            "location": "/matrix-core/protocols/humidity/", 
            "text": "Humidity\n\n\n\n\n\nHumidity is currently under maintenance\n\n\n\n\nDevice Compatibility\n\n\n\n\nOverview\n\n\nThe Humidity driver allows for:\n\n\n\n\nReading relative humidity on the board\n\n\nObtaining temperature in Celsius and raw values\n\n\nCalibrating temperature\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20017\n\n\nKeep-alive port\n: 20018\n\n\nError port\n: 20019\n\n\nData update port\n: 20020\n\n\n\n\nProtocol\n\n\n\n\n\n\n\nBase Port\n\nThis port accepts three configurations for communicating with the Humidity driver. \n\n\n\n\n\n\ndelay_between_updates\n - controls the output speed of messages from the \nData Update port\n. \n\n\n\n\n\n\ntimeout_after_last_ping\n - stops sending messages from the \nData Update port\n if nothing has been sent to the \nKeep-alive port\n after the specified amount of seconds.\n\n\n\n\n\n\nhumidity\n - the humidity configuration that's created from a \nHumidityParams\n message.\n\n\n\n\n\n\nmessage DriverConfig {\n  // Delay between updates in seconds\n  float delay_between_updates = 1;\n  // Timeout after last ping\n  float timeout_after_last_ping = 2;\n  // Humidity configuration\n  matrix_io.malos.v1.sense.HumidityParams humidity = 9;\n\n\n\n\nView the defined message \nhere\n.\n\n\nHumidityParams\n\n\n\n\ncurrent_temperature\n - a reference of the current temperature for calibration.\n\n\n\n\nmessage HumidityParams{\n  // Current temperature \u00b0C used for calibration.\n  float current_temperature = 1;\n}\n\n\n\n\nView the defined message \nhere\n.\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThis driver needs keep-alive messages in order to send data to your application. It's recommended to send an empty string \n\"\"\n because the contents of a keep-alive message are never read.\n\n\n\n\n\n\n\n\nError Port\n\nApplications can subscribe to this port to receive driver related errors.\n\n\n\n\n\n\n\n\nData Update Port\n\nApplications can subscribe to this port for humidity data. The output will be a serialized message of type \nHumidity\n with the following information.\n\n\nmessage Humidity {\n  // Humidity\n  float humidity = 1;\n\n  // Temperature\n  float temperature = 2;\n\n  // Raw temperature value from the sensor\n  float temperature_raw = 3;\n\n  //  Flag that tells if the temperature is calibrated\n  bool temperature_is_calibrated = 4;\n}\n\n\n\n\nView the defined message \nhere\n.", 
            "title": "Humidity"
        }, 
        {
            "location": "/matrix-core/protocols/humidity/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/protocols/humidity/#overview", 
            "text": "The Humidity driver allows for:   Reading relative humidity on the board  Obtaining temperature in Celsius and raw values  Calibrating temperature", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/protocols/humidity/#protocol", 
            "text": "Base Port \nThis port accepts three configurations for communicating with the Humidity driver.     delay_between_updates  - controls the output speed of messages from the  Data Update port .     timeout_after_last_ping  - stops sending messages from the  Data Update port  if nothing has been sent to the  Keep-alive port  after the specified amount of seconds.    humidity  - the humidity configuration that's created from a  HumidityParams  message.    message DriverConfig {\n  // Delay between updates in seconds\n  float delay_between_updates = 1;\n  // Timeout after last ping\n  float timeout_after_last_ping = 2;\n  // Humidity configuration\n  matrix_io.malos.v1.sense.HumidityParams humidity = 9;  View the defined message  here .  HumidityParams   current_temperature  - a reference of the current temperature for calibration.   message HumidityParams{\n  // Current temperature \u00b0C used for calibration.\n  float current_temperature = 1;\n}  View the defined message  here .    Keep-alive Port \nThis driver needs keep-alive messages in order to send data to your application. It's recommended to send an empty string  \"\"  because the contents of a keep-alive message are never read.    Error Port \nApplications can subscribe to this port to receive driver related errors.    Data Update Port \nApplications can subscribe to this port for humidity data. The output will be a serialized message of type  Humidity  with the following information.  message Humidity {\n  // Humidity\n  float humidity = 1;\n\n  // Temperature\n  float temperature = 2;\n\n  // Raw temperature value from the sensor\n  float temperature_raw = 3;\n\n  //  Flag that tells if the temperature is calibrated\n  bool temperature_is_calibrated = 4;\n}  View the defined message  here .", 
            "title": "Protocol"
        }, 
        {
            "location": "/matrix-core/protocols/imu/", 
            "text": "Inertial Measurement Unit (IMU)\n\n\n\nDevice Compatibility\n\n\n\n\nOverview\n\n\nThe IMU driver reports values for:\n\n\n\n\nYaw, Pitch, and Roll\n\n\nAcceleration for \nx\n, \ny\n, \nz\n axes\n\n\nGyroscope for \nx\n, \ny\n, \nz\n axes\n\n\nMagnetometer for \nx\n, \ny\n, \nz\n axes\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20013\n\n\nKeep-alive port\n: 20014\n\n\nError port\n: 20015\n\n\nData Update port\n: 20016\n\n\n\n\nProtocol\n\n\n\n\n\n\nBase Port\n\nThis port accepts 2 configurations for communicating with the IMU driver. \n\n\n\n\n\n\ndelay_between_updates\n - controls the output speed of messages from the \nData Update port\n. \n\n\n\n\n\n\ntimeout_after_last_ping\n - stops sending messages from the \nData Update port\n if nothing has been sent to the \nKeep-alive port\n after the specified amount of seconds.\n\n\n\n\n\n\nmessage DriverConfig {\n  // Delay between updates in seconds\n  float delay_between_updates = 1;\n  // Timeout after last ping\n  float timeout_after_last_ping = 2;\n\n\n\n\nView the defined message \nhere\n.\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThis driver needs keep-alive messages in order to send data to your application. It's recommended to send an empty string \n\"\"\n because the contents of a keep-alive message are never read.\n\n\n\n\n\n\n\n\nError Port\n\nApplications can subscribe to this port to receive driver related errors.\n\n\n\n\n\n\n\n\nData Update Port\n\nApplications can subscribe to this port for IMU data. The output will be a serialized message of type \nImu\n with the following information.\n\n\nmessage Imu {\n  //Vertical axis (yaw)\n  float yaw = 1;\n\n  //Lateral axis (pitch)\n  float pitch = 2;\n\n  //Longitudinal axis (roll)\n  float roll = 3;\n\n  // Acceleration\n  float accel_x = 4;\n  float accel_y = 5;\n  float accel_z = 6;\n\n  // Gyroscope\n  float gyro_x = 7;\n  float gyro_y = 8;\n  float gyro_z = 9;\n\n  // Magnetometer\n  float mag_x = 10;\n  float mag_y = 11;\n  float mag_z = 12;\n}\n\n\n\n\nView the defined message \nhere\n.", 
            "title": "IMU"
        }, 
        {
            "location": "/matrix-core/protocols/imu/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/protocols/imu/#overview", 
            "text": "The IMU driver reports values for:   Yaw, Pitch, and Roll  Acceleration for  x ,  y ,  z  axes  Gyroscope for  x ,  y ,  z  axes  Magnetometer for  x ,  y ,  z  axes", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/protocols/imu/#protocol", 
            "text": "Base Port \nThis port accepts 2 configurations for communicating with the IMU driver.     delay_between_updates  - controls the output speed of messages from the  Data Update port .     timeout_after_last_ping  - stops sending messages from the  Data Update port  if nothing has been sent to the  Keep-alive port  after the specified amount of seconds.    message DriverConfig {\n  // Delay between updates in seconds\n  float delay_between_updates = 1;\n  // Timeout after last ping\n  float timeout_after_last_ping = 2;  View the defined message  here .    Keep-alive Port \nThis driver needs keep-alive messages in order to send data to your application. It's recommended to send an empty string  \"\"  because the contents of a keep-alive message are never read.    Error Port \nApplications can subscribe to this port to receive driver related errors.    Data Update Port \nApplications can subscribe to this port for IMU data. The output will be a serialized message of type  Imu  with the following information.  message Imu {\n  //Vertical axis (yaw)\n  float yaw = 1;\n\n  //Lateral axis (pitch)\n  float pitch = 2;\n\n  //Longitudinal axis (roll)\n  float roll = 3;\n\n  // Acceleration\n  float accel_x = 4;\n  float accel_y = 5;\n  float accel_z = 6;\n\n  // Gyroscope\n  float gyro_x = 7;\n  float gyro_y = 8;\n  float gyro_z = 9;\n\n  // Magnetometer\n  float mag_x = 10;\n  float mag_y = 11;\n  float mag_z = 12;\n}  View the defined message  here .", 
            "title": "Protocol"
        }, 
        {
            "location": "/matrix-core/protocols/pressure/", 
            "text": "Pressure\n\n\n\nDevice Compatibility\n\n\n\n\nOverview\n\n\nThe Pressure driver reports values for:\n\n\n\n\nPressure\n\n\nAltitude\n\n\nTemperature\n\n\n\n\n\n\nBased on component location, the temperature values from the \nHumidity driver\n are recommended over the Pressure driver\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20025\n\n\nKeep-alive port\n: 20026\n\n\nError port\n: 20027\n\n\nData Update port\n: 20028\n\n\n\n\nProtocol\n\n\n\n\n\n\n\nBase Port\n\nThis port accepts 2 configurations for communicating with the Pressure driver. \n\n\n\n\n\n\ndelay_between_updates\n - controls the output speed of messages from the \nData Update port\n. \n\n\n\n\n\n\ntimeout_after_last_ping\n - stops sending messages from the \nData Update port\n if nothing has been sent to the \nKeep-alive port\n after the specified amount of seconds.\n\n\n\n\n\n\nmessage DriverConfig {\n  // Delay between updates in seconds\n  float delay_between_updates = 1;\n  // Timeout after last ping\n  float timeout_after_last_ping = 2;\n\n\n\n\nView the defined message \nhere\n.\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThis driver needs keep-alive messages in order to send data to your application. It's recommended to send an empty string \n\"\"\n because the contents of a keep-alive message are never read.\n\n\n\n\n\n\n\n\nError Port\n\nApplications can subscribe to this port to receive driver related errors.\n\n\n\n\n\n\n\n\nData Update Port\n\nApplications can subscribe to this port for pressure data. The output will be a serialized message of type \nPressure\n with the following information.\n\n\nmessage Pressure {\n  // Pressure\n  float pressure = 1;\n\n  // Altimeter\n  float altitude = 2;\n\n  // Temperature\n  float temperature = 3;\n}\n\n\n\n\nView the defined message \nhere\n.", 
            "title": "Pressure"
        }, 
        {
            "location": "/matrix-core/protocols/pressure/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/protocols/pressure/#overview", 
            "text": "The Pressure driver reports values for:   Pressure  Altitude  Temperature    Based on component location, the temperature values from the  Humidity driver  are recommended over the Pressure driver", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/protocols/pressure/#protocol", 
            "text": "Base Port \nThis port accepts 2 configurations for communicating with the Pressure driver.     delay_between_updates  - controls the output speed of messages from the  Data Update port .     timeout_after_last_ping  - stops sending messages from the  Data Update port  if nothing has been sent to the  Keep-alive port  after the specified amount of seconds.    message DriverConfig {\n  // Delay between updates in seconds\n  float delay_between_updates = 1;\n  // Timeout after last ping\n  float timeout_after_last_ping = 2;  View the defined message  here .    Keep-alive Port \nThis driver needs keep-alive messages in order to send data to your application. It's recommended to send an empty string  \"\"  because the contents of a keep-alive message are never read.    Error Port \nApplications can subscribe to this port to receive driver related errors.    Data Update Port \nApplications can subscribe to this port for pressure data. The output will be a serialized message of type  Pressure  with the following information.  message Pressure {\n  // Pressure\n  float pressure = 1;\n\n  // Altimeter\n  float altitude = 2;\n\n  // Temperature\n  float temperature = 3;\n}  View the defined message  here .", 
            "title": "Protocol"
        }, 
        {
            "location": "/matrix-core/protocols/uv/", 
            "text": "UV\n\n\n\nDevice Compatibility\n\n\n\n\nOverview\n\n\nThe UV driver reports values for:\n\n\n\n\nUV Index scale used in the United States conforms with international guidelines for UVI reporting established by the World Health Organization.  From \nUV Index Scale\n\n\nUV Risk scale established by World Health Organization. From \nUV Index Scale\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20029\n\n\nKeep-alive port\n: 20030\n\n\nError port\n: 20031\n\n\nData Update port\n: 20032\n\n\n\n\nProtocol\n\n\n\n\n\n\nBase Port\n\nThis port accepts 2 configurations for communicating with the UV driver. \n\n\n\n\n\n\ndelay_between_updates\n - controls the output speed of messages from the \nData Update port\n. \n\n\n\n\n\n\ntimeout_after_last_ping\n - stops sending messages from the \nData Update port\n if nothing has been sent to the \nKeep-alive port\n after the specified amount of seconds.\n\n\n\n\n\n\nmessage DriverConfig {\n  // Delay between updates in seconds\n  float delay_between_updates = 1;\n  // Timeout after last ping\n  float timeout_after_last_ping = 2;\n\n\n\n\nView the defined message \nhere\n.\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThis driver needs keep-alive messages in order to send data to your application. It's recommended to send an empty string \n\"\"\n because the contents of a keep-alive message are never read.\n\n\n\n\n\n\n\n\nError Port\n\nApplications can subscribe to this port to receive driver related errors.\n\n\n\n\n\n\n\n\nData Update Port\n\nApplications can subscribe to this port for UV data. The output will be a serialized message of type \nUV\n with the following information.\n\n\nmessage UV{\n  // UV index.\n  float uv_index = 1;\n\n  // Risk of harm from unprotected sun exposure, for the average adult.\n  // According to the OMS table. https://www.epa.gov/sunsafety/uv-index-scale-0\n  string oms_risk = 2;\n}\n\n\n\n\nView the defined message \nhere\n.", 
            "title": "UV"
        }, 
        {
            "location": "/matrix-core/protocols/uv/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/protocols/uv/#overview", 
            "text": "The UV driver reports values for:   UV Index scale used in the United States conforms with international guidelines for UVI reporting established by the World Health Organization.  From  UV Index Scale  UV Risk scale established by World Health Organization. From  UV Index Scale", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/protocols/uv/#protocol", 
            "text": "Base Port \nThis port accepts 2 configurations for communicating with the UV driver.     delay_between_updates  - controls the output speed of messages from the  Data Update port .     timeout_after_last_ping  - stops sending messages from the  Data Update port  if nothing has been sent to the  Keep-alive port  after the specified amount of seconds.    message DriverConfig {\n  // Delay between updates in seconds\n  float delay_between_updates = 1;\n  // Timeout after last ping\n  float timeout_after_last_ping = 2;  View the defined message  here .    Keep-alive Port \nThis driver needs keep-alive messages in order to send data to your application. It's recommended to send an empty string  \"\"  because the contents of a keep-alive message are never read.    Error Port \nApplications can subscribe to this port to receive driver related errors.    Data Update Port \nApplications can subscribe to this port for UV data. The output will be a serialized message of type  UV  with the following information.  message UV{\n  // UV index.\n  float uv_index = 1;\n\n  // Risk of harm from unprotected sun exposure, for the average adult.\n  // According to the OMS table. https://www.epa.gov/sunsafety/uv-index-scale-0\n  string oms_risk = 2;\n}  View the defined message  here .", 
            "title": "Protocol"
        }, 
        {
            "location": "/matrix-core/protocols/servo/", 
            "text": "Servo\n\n\n\nDevice Compatibility\n\n\n\n\n\n\nOverview\n\n\nThe Servo driver can set the angle of your servos through the pins of your MATRIX device.\n\n\nDevice Pinouts\n:\n\n\n\n\nMATRIX Creator\n\n\nMATRIX Voice\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20045\n\n\nError port\n: 20047\n\n\n\n\nProtocol\n\n\n\n\n\n\n\nBase Port\n\nThis port accepts a single configuration for communicating with the Servo driver. \n\n\n\n\nservo\n - the servo configuration that's created from a \nServoParams\n message.\n\n\n\n\nmessage DriverConfig {\n  // ServoMotor service configuration\n  matrix_io.malos.v1.io.ServoParams servo = 7;\n}\n\n\n\n\nView the defined message \nhere\n.\n\n\nServoParams\n\n\n\n\n\n\npin\n - Selects the pin you want to use on your MATRIX device. \n\n\n\n\n\n\nangle\n - emits a signal input that represents the angle set.\n\n\n\n\n\n\n// Servo handler params\nmessage ServoParams {\n  // Pin to configure\n  uint32 pin = 1;\n\n  // Servo angle\n  uint32 angle = 2;\n}\n\n\n\n\nView the defined message \nhere\n.\n\n\n\n\n\n\n\n\nError Port\n\nApplications can subscribe to this port to receive driver related errors.", 
            "title": "Servo"
        }, 
        {
            "location": "/matrix-core/protocols/servo/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/protocols/servo/#overview", 
            "text": "The Servo driver can set the angle of your servos through the pins of your MATRIX device.  Device Pinouts :   MATRIX Creator  MATRIX Voice", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/protocols/servo/#protocol", 
            "text": "Base Port \nThis port accepts a single configuration for communicating with the Servo driver.    servo  - the servo configuration that's created from a  ServoParams  message.   message DriverConfig {\n  // ServoMotor service configuration\n  matrix_io.malos.v1.io.ServoParams servo = 7;\n}  View the defined message  here .  ServoParams    pin  - Selects the pin you want to use on your MATRIX device.     angle  - emits a signal input that represents the angle set.    // Servo handler params\nmessage ServoParams {\n  // Pin to configure\n  uint32 pin = 1;\n\n  // Servo angle\n  uint32 angle = 2;\n}  View the defined message  here .    Error Port \nApplications can subscribe to this port to receive driver related errors.", 
            "title": "Protocol"
        }, 
        {
            "location": "/matrix-core/protocols/gpio/", 
            "text": "General Purpose Input Output (GPIO)\n\n\n\nDevice Compatibility\n\n\n\n\n\n\nOverview\n\n\nThe GPIO driver supports:\na \n\n\n\n\nPin input\n\n\nPin output\n\n\nUpdates for the current state of all GPIO pins\n\n\n\n\nDevice Pinouts\n:\n\n\n\n\nMATRIX Creator\n\n\nMATRIX Voice\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20049\n\n\nKeep-alive port\n: 20050\n\n\nError port\n: 20051\n\n\nData Update port\n: 20052\n\n\n\n\nProtocol\n\n\n\n\n\n\n\nBase Port\n\nThis port accepts 3 configuration for communicating with the GPIO driver.\n\n\n\n\n\n\ndelay_between_updates\n - controls the output speed of messages from the \nData Update port\n. \n\n\n\n\n\n\ntimeout_after_last_ping\n - stops sending messages from the \nData Update port\n if nothing has been sent to the \nKeep-alive port\n after the specified amount of seconds.\n\n\n\n\n\n\ngpio\n - the gpio configuration that's created from a \nGpioParams\n message.\n\n\n\n\n\n\nmessage DriverConfig {\n  // Delay between updates in seconds\n  float delay_between_updates = 1;\n  // Timeout after last ping\n  float timeout_after_last_ping = 2;\n  // Gpio service configuration\n  matrix_io.malos.v1.io.GpioParams gpio = 8;\n}\n\n\n\n\nView the defined message \nhere\n.\n\n\nGpioParams\n\n\n\n\n\n\npin\n - Selects the pin you want to use on your MATRIX device. \n\n\n\n\n\n\nEnumMode\n - Determines input or output mode for GPIO pins.\n\n\n\n\n\n\nvalue\n - Set as 1 or 0 to signify on/off.\n\n\n\n\nEach \npin\n will save its last set \nvalue\n until the next device boot.\n\n\n\n\n\n\n\n\n// GPIO handler params\nmessage GpioParams {\n  // GPIO to config\n  uint32 pin = 1;\n\n  // GPIO mode input/output\n  enum EnumMode {\n    INPUT = 0;\n    OUTPUT = 1;\n  }\n  EnumMode mode = 2;\n\n  // GPIO value\n  uint32 value = 3;\n}\n\n\n\n\nView the defined message \nhere\n.\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThis driver needs keep-alive messages in order to send data to your application. It's recommended to send an empty string \n\"\"\n because the contents of a keep-alive message are never read.\n\n\n\n\n\n\n\n\nError Port\n\nApplications can subscribe to this port to receive driver related errors.\n\n\n\n\n\n\n\n\nData Update Port\n\nApplications can subscribe to this port for GPIO data. The output will be a serialized message of type \nGpioParams\n with the following information.\n\n\n// GPIO handler params\nmessage GpioParams {\n  // Integer to represent all pin values (Convert to 16bit for readability)\n  uint32 values = 4;\n}\n\n\n\n\nView the defined message \nhere\n.", 
            "title": "GPIO"
        }, 
        {
            "location": "/matrix-core/protocols/gpio/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/protocols/gpio/#overview", 
            "text": "The GPIO driver supports: a    Pin input  Pin output  Updates for the current state of all GPIO pins   Device Pinouts :   MATRIX Creator  MATRIX Voice", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/protocols/gpio/#protocol", 
            "text": "Base Port \nThis port accepts 3 configuration for communicating with the GPIO driver.    delay_between_updates  - controls the output speed of messages from the  Data Update port .     timeout_after_last_ping  - stops sending messages from the  Data Update port  if nothing has been sent to the  Keep-alive port  after the specified amount of seconds.    gpio  - the gpio configuration that's created from a  GpioParams  message.    message DriverConfig {\n  // Delay between updates in seconds\n  float delay_between_updates = 1;\n  // Timeout after last ping\n  float timeout_after_last_ping = 2;\n  // Gpio service configuration\n  matrix_io.malos.v1.io.GpioParams gpio = 8;\n}  View the defined message  here .  GpioParams    pin  - Selects the pin you want to use on your MATRIX device.     EnumMode  - Determines input or output mode for GPIO pins.    value  - Set as 1 or 0 to signify on/off.   Each  pin  will save its last set  value  until the next device boot.     // GPIO handler params\nmessage GpioParams {\n  // GPIO to config\n  uint32 pin = 1;\n\n  // GPIO mode input/output\n  enum EnumMode {\n    INPUT = 0;\n    OUTPUT = 1;\n  }\n  EnumMode mode = 2;\n\n  // GPIO value\n  uint32 value = 3;\n}  View the defined message  here .    Keep-alive Port \nThis driver needs keep-alive messages in order to send data to your application. It's recommended to send an empty string  \"\"  because the contents of a keep-alive message are never read.    Error Port \nApplications can subscribe to this port to receive driver related errors.    Data Update Port \nApplications can subscribe to this port for GPIO data. The output will be a serialized message of type  GpioParams  with the following information.  // GPIO handler params\nmessage GpioParams {\n  // Integer to represent all pin values (Convert to 16bit for readability)\n  uint32 values = 4;\n}  View the defined message  here .", 
            "title": "Protocol"
        }, 
        {
            "location": "/matrix-core/javascript-examples/", 
            "text": "Javascript Examples\n\n\nEverloop\n\nLED interface.\n\n\nHumidity\n\n\n\nHumidity and temperature measurement.\n\n\nIMU\n\n\n\nInertial Measurement Unit.\n\n\nPressure\n\n\n\nPressure, altitude and temperature measurement.\n\n\nUV\n\n\n\nUltraviolet light sensor.\n\n\nServo\n\n\n\nAdjust servo positions.\n\n\nGPIO\n\n\n\nGeneral Purpose Input/Output.", 
            "title": "Index"
        }, 
        {
            "location": "/matrix-core/javascript-examples/#javascript-examples", 
            "text": "", 
            "title": "Javascript Examples"
        }, 
        {
            "location": "/matrix-core/javascript-examples/everloop/", 
            "text": "Everloop\n\n\n\nJavascript Example\n\n\n\nDevice Compatibility\n\n\n\n\n\n\nOverview\n\n\nThe Everloop driver allows for:\n\n\n\n\nReading amount of LEDs your MATRIX device has.\n\n\nSetting the RGBW colors for each individual LED.\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20021\n\n\nKeep-alive port\n: 20022\n\n\nError port\n: 20023\n\n\nData update port\n: 20024\n\n\n\n\nCode Example\n\n\nThe following sections show how to implement a connection to each of the Everloop driver's ports. You can download this example \nhere\n.\n\n\n\n\n\n\n\nInitial Variables\n\nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Javascript. We also define a few helpful variables for easy references.\n\n\nvar zmq = require('zeromq');// Asynchronous Messaging Framework\nvar matrix_io = require('matrix-protos').matrix_io;// Protocol Buffers for MATRIX function\nvar matrix_ip = '127.0.0.1';// Local IP\nvar matrix_everloop_base_port = 20021;// Port for Everloop driver\nvar matrix_device_leds = 0;// Holds amount of LEDs on MATRIX device\n\n\n\n\n\n\n\n\n\n\n\nBase Port\n\nHere is where the main logic for our Everloop example goes. Once we connect to the \nBase Port\n, the program will start an endless loop to create and send LED configurations with randomly generated RGBW values. However, before sending the LED configuration to you MATRIX device, it will wait until the amount of \nmatrix_device_leds\n is defined.\n\n\n// Create a Pusher socket\nvar configSocket = zmq.socket('push');\n// Connect Pusher to Base Port\nconfigSocket.connect('tcp://' + matrix_ip + ':' + matrix_everloop_base_port);\n\n// Create an empty Everloop image\nvar image = matrix_io.malos.v1.io.EverloopImage.create();\n\n// Loop every 50 milliseconds\nsetInterval(function(){\n  // For each device LED\n  for (var i = 0; i \n matrix_device_leds; ++i) {\n    // Set individual LED value\n    image.led[i] = {\n      red: Math.floor(Math.random() * 200)+1,\n      green: Math.floor(Math.random() * 255)+1,\n      blue: Math.floor(Math.random() * 50)+1,\n      white: 0\n    };\n  }\n\n  // Store the Everloop image in MATRIX configuration\n  var config = matrix_io.malos.v1.driver.DriverConfig.create({\n    'image': image\n  });\n\n  // Send MATRIX configuration to MATRIX device\n  if(matrix_device_leds \n 0)\n    configSocket.send(matrix_io.malos.v1.driver.DriverConfig.encode(config).finish());\n},50);\n\n\n\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThe next step is to connect and send a message to the \nKeep-alive Port\n. That message, an empty string, will grant us a response from the \nData Update Port\n with the value we need for \nmatrix_device_leds\n.\n\n\n// Create a Pusher socket\nvar pingSocket = zmq.socket('push')\n// Connect Pusher to Keep-alive port\npingSocket.connect('tcp://' + matrix_ip + ':' + (matrix_everloop_base_port + 1));\n// Send a single ping\npingSocket.send('');\n\n\n\n\n\n\n\n\n\n\n\nError Port\n\nConnecting to the \nError Port\n is optional, but highly recommended if you want to log any errors that occur within MATRIX CORE.\n\n\n// Create a Subscriber socket\nvar errorSocket = zmq.socket('sub');\n// Connect Subscriber to Error port\nerrorSocket.connect('tcp://' + matrix_ip + ':' + (matrix_everloop_base_port + 2));\n// Connect Subscriber to Error port\nerrorSocket.subscribe('');\n// On Message\nerrorSocket.on('message', function(error_message){\n  console.log('Error received: ' + error_message.toString('utf8'));// Log error\n});\n\n\n\n\n\n\n\n\n\n\n\nData Update Port\n\nA connection to the \nData Update Port\n will allow us to receive the LED count we want for the \nmatrix_device_leds\n variable. Once that variable is set, the MATRIX device will begin reading the Everloop images being sent to the base port.\n\n\n// Create a Subscriber socket\nvar updateSocket = zmq.socket('sub');\n// Connect Subscriber to Data Update port\nupdateSocket.connect('tcp://' + matrix_ip + ':' + (matrix_everloop_base_port + 3));\n// Subscribe to messages\nupdateSocket.subscribe('');\n// On Message\nupdateSocket.on('message', function(buffer){\n  var data = matrix_io.malos.v1.io.EverloopImage.decode(buffer);// Extract message\n  matrix_device_leds = data.everloopLength;// Save MATRIX device LED count\n});\n\n\n\n\nData Output\n\n\n\nThe javascript object below is an example output you'll receive from the \nData Update Port\n.\n\n\n{\n  led: [],\n  everloopLength: 35\n}", 
            "title": "Everloop"
        }, 
        {
            "location": "/matrix-core/javascript-examples/everloop/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/javascript-examples/everloop/#overview", 
            "text": "The Everloop driver allows for:   Reading amount of LEDs your MATRIX device has.  Setting the RGBW colors for each individual LED.", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/javascript-examples/everloop/#code-example", 
            "text": "The following sections show how to implement a connection to each of the Everloop driver's ports. You can download this example  here .    Initial Variables \nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Javascript. We also define a few helpful variables for easy references.  var zmq = require('zeromq');// Asynchronous Messaging Framework\nvar matrix_io = require('matrix-protos').matrix_io;// Protocol Buffers for MATRIX function\nvar matrix_ip = '127.0.0.1';// Local IP\nvar matrix_everloop_base_port = 20021;// Port for Everloop driver\nvar matrix_device_leds = 0;// Holds amount of LEDs on MATRIX device     Base Port \nHere is where the main logic for our Everloop example goes. Once we connect to the  Base Port , the program will start an endless loop to create and send LED configurations with randomly generated RGBW values. However, before sending the LED configuration to you MATRIX device, it will wait until the amount of  matrix_device_leds  is defined.  // Create a Pusher socket\nvar configSocket = zmq.socket('push');\n// Connect Pusher to Base Port\nconfigSocket.connect('tcp://' + matrix_ip + ':' + matrix_everloop_base_port);\n\n// Create an empty Everloop image\nvar image = matrix_io.malos.v1.io.EverloopImage.create();\n\n// Loop every 50 milliseconds\nsetInterval(function(){\n  // For each device LED\n  for (var i = 0; i   matrix_device_leds; ++i) {\n    // Set individual LED value\n    image.led[i] = {\n      red: Math.floor(Math.random() * 200)+1,\n      green: Math.floor(Math.random() * 255)+1,\n      blue: Math.floor(Math.random() * 50)+1,\n      white: 0\n    };\n  }\n\n  // Store the Everloop image in MATRIX configuration\n  var config = matrix_io.malos.v1.driver.DriverConfig.create({\n    'image': image\n  });\n\n  // Send MATRIX configuration to MATRIX device\n  if(matrix_device_leds   0)\n    configSocket.send(matrix_io.malos.v1.driver.DriverConfig.encode(config).finish());\n},50);     Keep-alive Port \nThe next step is to connect and send a message to the  Keep-alive Port . That message, an empty string, will grant us a response from the  Data Update Port  with the value we need for  matrix_device_leds .  // Create a Pusher socket\nvar pingSocket = zmq.socket('push')\n// Connect Pusher to Keep-alive port\npingSocket.connect('tcp://' + matrix_ip + ':' + (matrix_everloop_base_port + 1));\n// Send a single ping\npingSocket.send('');     Error Port \nConnecting to the  Error Port  is optional, but highly recommended if you want to log any errors that occur within MATRIX CORE.  // Create a Subscriber socket\nvar errorSocket = zmq.socket('sub');\n// Connect Subscriber to Error port\nerrorSocket.connect('tcp://' + matrix_ip + ':' + (matrix_everloop_base_port + 2));\n// Connect Subscriber to Error port\nerrorSocket.subscribe('');\n// On Message\nerrorSocket.on('message', function(error_message){\n  console.log('Error received: ' + error_message.toString('utf8'));// Log error\n});     Data Update Port \nA connection to the  Data Update Port  will allow us to receive the LED count we want for the  matrix_device_leds  variable. Once that variable is set, the MATRIX device will begin reading the Everloop images being sent to the base port.  // Create a Subscriber socket\nvar updateSocket = zmq.socket('sub');\n// Connect Subscriber to Data Update port\nupdateSocket.connect('tcp://' + matrix_ip + ':' + (matrix_everloop_base_port + 3));\n// Subscribe to messages\nupdateSocket.subscribe('');\n// On Message\nupdateSocket.on('message', function(buffer){\n  var data = matrix_io.malos.v1.io.EverloopImage.decode(buffer);// Extract message\n  matrix_device_leds = data.everloopLength;// Save MATRIX device LED count\n});", 
            "title": "Code Example"
        }, 
        {
            "location": "/matrix-core/javascript-examples/humidity/", 
            "text": "Humidity\n\n\n\nJavascript Example\n\n\n\n\n\nHumidity is currently under maintenance\n\n\n\n\nDevice Compatibility\n\n\n\n\nOverview\n\n\nThe Humidity driver allows for:\n\n\n\n\nReading relative humidity on the board\n\n\nObtaining temperature in Celsius and raw values\n\n\nCalibrating temperature\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20017\n\n\nKeep-alive port\n: 20018\n\n\nError port\n: 20019\n\n\nData update port\n: 20020\n\n\n\n\nCode Example\n\n\nThe following sections show how to implement a connection to each of the Humidity driver's ports. You can download this example \nhere\n.\n\n\n\n\n\n\n\nInitial Variables\n\nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Javascript. We also define a few helpful variables for easy references.\n\n\nvar zmq = require('zeromq');// Asynchronous Messaging Framework\nvar matrix_io = require('matrix-protos').matrix_io;// Protocol Buffers for MATRIX function\nvar matrix_ip = '127.0.0.1';// Local IP\nvar matrix_humidity_base_port = 20017;// Port for Humidity driver\n\n\n\n\n\n\n\n\n\n\n\nBase Port\n\nHere is where the configuration for our Humidity example goes. Once we connect to the \nBase Port\n, We will pass a configuration to the humidity driver. With this we can set the update rate, timeout, and temperature configuration.\n\n\n// Create a Pusher socket\nvar configSocket = zmq.socket('push');\n// Connect Pusher to Base port\nconfigSocket.connect('tcp://' + matrix_ip + ':' + matrix_humidity_base_port);\n// Create driver configuration\nvar config = matrix_io.malos.v1.driver.DriverConfig.create({\n  // Update rate configuration\n  delayBetweenUpdates: 2.0,// 2 seconds between updates\n  timeoutAfterLastPing: 6.0,// Stop sending updates 6 seconds after pings.\n  // Humidity configuration\n  humidity: matrix_io.malos.v1.sense.HumidityParams.create({\n    currentTemperature: 23// Real current temperature [Celsius] for calibration \n  })\n});\n// Send driver configuration\nconfigSocket.send(matrix_io.malos.v1.driver.DriverConfig.encode(config).finish());\n\n\n\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThe next step is to connect and send a message to the \nKeep-alive Port\n. That message, an empty string, will grant us a response from the \nData Update Port\n for the current humidity value. An interval for pinging is then set to continuously obtain that data.\n\n\n// Create a Pusher socket\nvar pingSocket = zmq.socket('push');\n// Connect Pusher to Keep-alive port\npingSocket.connect('tcp://' + matrix_ip + ':' + (matrix_humidity_base_port + 1));\n// Send initial ping\npingSocket.send('');\n// Send ping every 5 seconds\nsetInterval(function(){\n  pingSocket.send('');\n}, 5000);\n\n\n\n\n\n\n\n\n\n\n\nError Port\n\nConnecting to the \nError Port\n is optional, but highly recommended if you want to log any errors that occur within MATRIX CORE.\n\n\n// Create a Subscriber socket\nvar errorSocket = zmq.socket('sub');\n// Connect Subscriber to Error port\nerrorSocket.connect('tcp://' + matrix_ip + ':' + (matrix_humidity_base_port + 2));\n// Connect Subscriber to Error port\nerrorSocket.subscribe('');\n// On Message\nerrorSocket.on('message', function(error_message){\n  console.log('Error received: ' + error_message.toString('utf8'));// Log error\n});\n\n\n\n\n\n\n\n\n\n\n\nData Update Port\n\nA connection to the \nData Update Port\n will allow us to receive the current humidity data we want.\n\n\n// Create a Subscriber socket\nvar updateSocket = zmq.socket('sub');\n// Connect Subscriber to Data Update port\nupdateSocket.connect('tcp://' + matrix_ip + ':' + (matrix_humidity_base_port + 3));\n// Subscribe to messages\nupdateSocket.subscribe('');\n// On Message\nupdateSocket.on('message', function(buffer){\n  var data = matrix_io.malos.v1.sense.Humidity.decode(buffer);// Extract message\n    console.log(data);// Log new humidity data\n});\n\n\n\n\nData Output\n\n\n\nThe javascript object below is an example output you'll receive from the \nData Update Port\n.\n\n\n{\n  humidity: 29.003999710083008,\n  temperature: 22.998397827148438,\n  temperatureRaw: 33.124000549316406,\n  temperatureIsCalibrated: true \n}", 
            "title": "Humidity"
        }, 
        {
            "location": "/matrix-core/javascript-examples/humidity/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/javascript-examples/humidity/#overview", 
            "text": "The Humidity driver allows for:   Reading relative humidity on the board  Obtaining temperature in Celsius and raw values  Calibrating temperature", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/javascript-examples/humidity/#code-example", 
            "text": "The following sections show how to implement a connection to each of the Humidity driver's ports. You can download this example  here .    Initial Variables \nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Javascript. We also define a few helpful variables for easy references.  var zmq = require('zeromq');// Asynchronous Messaging Framework\nvar matrix_io = require('matrix-protos').matrix_io;// Protocol Buffers for MATRIX function\nvar matrix_ip = '127.0.0.1';// Local IP\nvar matrix_humidity_base_port = 20017;// Port for Humidity driver     Base Port \nHere is where the configuration for our Humidity example goes. Once we connect to the  Base Port , We will pass a configuration to the humidity driver. With this we can set the update rate, timeout, and temperature configuration.  // Create a Pusher socket\nvar configSocket = zmq.socket('push');\n// Connect Pusher to Base port\nconfigSocket.connect('tcp://' + matrix_ip + ':' + matrix_humidity_base_port);\n// Create driver configuration\nvar config = matrix_io.malos.v1.driver.DriverConfig.create({\n  // Update rate configuration\n  delayBetweenUpdates: 2.0,// 2 seconds between updates\n  timeoutAfterLastPing: 6.0,// Stop sending updates 6 seconds after pings.\n  // Humidity configuration\n  humidity: matrix_io.malos.v1.sense.HumidityParams.create({\n    currentTemperature: 23// Real current temperature [Celsius] for calibration \n  })\n});\n// Send driver configuration\nconfigSocket.send(matrix_io.malos.v1.driver.DriverConfig.encode(config).finish());     Keep-alive Port \nThe next step is to connect and send a message to the  Keep-alive Port . That message, an empty string, will grant us a response from the  Data Update Port  for the current humidity value. An interval for pinging is then set to continuously obtain that data.  // Create a Pusher socket\nvar pingSocket = zmq.socket('push');\n// Connect Pusher to Keep-alive port\npingSocket.connect('tcp://' + matrix_ip + ':' + (matrix_humidity_base_port + 1));\n// Send initial ping\npingSocket.send('');\n// Send ping every 5 seconds\nsetInterval(function(){\n  pingSocket.send('');\n}, 5000);     Error Port \nConnecting to the  Error Port  is optional, but highly recommended if you want to log any errors that occur within MATRIX CORE.  // Create a Subscriber socket\nvar errorSocket = zmq.socket('sub');\n// Connect Subscriber to Error port\nerrorSocket.connect('tcp://' + matrix_ip + ':' + (matrix_humidity_base_port + 2));\n// Connect Subscriber to Error port\nerrorSocket.subscribe('');\n// On Message\nerrorSocket.on('message', function(error_message){\n  console.log('Error received: ' + error_message.toString('utf8'));// Log error\n});     Data Update Port \nA connection to the  Data Update Port  will allow us to receive the current humidity data we want.  // Create a Subscriber socket\nvar updateSocket = zmq.socket('sub');\n// Connect Subscriber to Data Update port\nupdateSocket.connect('tcp://' + matrix_ip + ':' + (matrix_humidity_base_port + 3));\n// Subscribe to messages\nupdateSocket.subscribe('');\n// On Message\nupdateSocket.on('message', function(buffer){\n  var data = matrix_io.malos.v1.sense.Humidity.decode(buffer);// Extract message\n    console.log(data);// Log new humidity data\n});", 
            "title": "Code Example"
        }, 
        {
            "location": "/matrix-core/javascript-examples/imu/", 
            "text": "Inertial Measurement Unit (IMU)\n\n\n\nJavascript Example\n\n\n\nDevice Compatibility\n\n\n\n\nOverview\n\n\nThe IMU driver reports values for:\n\n\n\n\nYaw, Pitch, and Roll\n\n\nAcceleration for \nx\n, \ny\n, \nz\n axes\n\n\nGyroscope for \nx\n, \ny\n, \nz\n axes\n\n\nMagnetometer for \nx\n, \ny\n, \nz\n axes\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20013\n\n\nKeep-alive port\n: 20014\n\n\nError port\n: 20015\n\n\nData Update port\n: 20016\n\n\n\n\nCode Example\n\n\nThe following sections show how to implement a connection to each of the IMU driver's ports. You can download this example \nhere\n.\n\n\n\n\n\n\n\nInitial Variables\n\nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Javascript. We also define a few helpful variables for easy references.\n\n\nvar zmq = require('zeromq');// Asynchronous Messaging Framework\nvar matrix_io = require('matrix-protos').matrix_io;// Protocol Buffers for MATRIX function\nvar matrix_ip = '127.0.0.1';// Local IP\nvar matrix_imu_base_port = 20013;// Port for IMU driver\n\n\n\n\n\n\n\n\n\n\n\nBase Port\n\nHere is where the configuration for our IMU example goes. Once we connect to the \nBase Port\n, We will pass a configuration to the IMU driver. With this we can set the update rate and timeout configuration.\n\n\n// Create a Pusher socket\nvar configSocket = zmq.socket('push');\n// Connect Pusher to Base port\nconfigSocket.connect('tcp://' + matrix_ip + ':' + matrix_imu_base_port);\n// Create driver configuration\nvar config = matrix_io.malos.v1.driver.DriverConfig.create({\n  // Update rate configuration\n  delayBetweenUpdates: 2.0,// 2 seconds between updates\n  timeoutAfterLastPing: 6.0,// Stop sending updates 6 seconds after pings.\n});\n// Send driver configuration\nconfigSocket.send(matrix_io.malos.v1.driver.DriverConfig.encode(config).finish());\n\n\n\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThe next step is to connect and send a message to the \nKeep-alive Port\n. That message, an empty string, will grant us a response from the \nData Update Port\n for the current IMU values. An interval for pinging is then set to continuously obtain that data.\n\n\n// Create a Pusher socket\nvar pingSocket = zmq.socket('push');\n// Connect Pusher to Keep-alive port\npingSocket.connect('tcp://' + matrix_ip + ':' + (matrix_imu_base_port + 1));\n// Send initial ping\npingSocket.send('');\n// Send ping every 5 seconds\nsetInterval(function(){\n  pingSocket.send('');\n}, 5000);\n\n\n\n\n\n\n\n\n\n\n\nError Port\n\nConnecting to the \nError Port\n is optional, but highly recommended if you want to log any errors that occur within MATRIX CORE.\n\n\n// Create a Subscriber socket\nvar errorSocket = zmq.socket('sub');\n// Connect Subscriber to Error port\nerrorSocket.connect('tcp://' + matrix_ip + ':' + (matrix_imu_base_port + 2));\n// Connect Subscriber to Error port\nerrorSocket.subscribe('');\n// On Message\nerrorSocket.on('message', function(error_message){\n  console.log('Error received: ' + error_message.toString('utf8'));// Log error\n});\n\n\n\n\n\n\n\n\n\n\n\nData Update Port\n\nA connection to the \nData Update Port\n is then made to allow us to receive the current IMU data we want.\n\n\n// Create a Subscriber socket\nvar updateSocket = zmq.socket('sub');\n// Connect Subscriber to Data Update port\nupdateSocket.connect('tcp://' + matrix_ip + ':' + (matrix_imu_base_port + 3));\n// Subscribe to messages\nupdateSocket.subscribe('');\n// On Message\nupdateSocket.on('message', function(buffer){\n  var data = matrix_io.malos.v1.sense.Imu.decode(buffer);// Extract message\n    console.log(data);// Log new IMU data\n});\n\n\n\n\nData Output\n\n\n\nThe javascript object below is an example output you'll receive from the \nData Update Port\n.\n\n\n{\n  yaw: 29.820072174072266,\n  pitch: 9.994316101074219,\n  roll: -179.4230194091797,\n  accelX: -0.17499999701976776,\n  accelY: -0.009999999776482582,\n  accelZ: -0.9929999709129333,\n  gyroX: 2.871000051498413,\n  gyroY: 0.3059999942779541,\n  gyroZ: 0.8069999814033508,\n  magX: -0.0820000022649765,\n  magY: 0.04699999839067459,\n  magZ: 0.11299999803304672\n}", 
            "title": "IMU"
        }, 
        {
            "location": "/matrix-core/javascript-examples/imu/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/javascript-examples/imu/#overview", 
            "text": "The IMU driver reports values for:   Yaw, Pitch, and Roll  Acceleration for  x ,  y ,  z  axes  Gyroscope for  x ,  y ,  z  axes  Magnetometer for  x ,  y ,  z  axes", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/javascript-examples/imu/#code-example", 
            "text": "The following sections show how to implement a connection to each of the IMU driver's ports. You can download this example  here .    Initial Variables \nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Javascript. We also define a few helpful variables for easy references.  var zmq = require('zeromq');// Asynchronous Messaging Framework\nvar matrix_io = require('matrix-protos').matrix_io;// Protocol Buffers for MATRIX function\nvar matrix_ip = '127.0.0.1';// Local IP\nvar matrix_imu_base_port = 20013;// Port for IMU driver     Base Port \nHere is where the configuration for our IMU example goes. Once we connect to the  Base Port , We will pass a configuration to the IMU driver. With this we can set the update rate and timeout configuration.  // Create a Pusher socket\nvar configSocket = zmq.socket('push');\n// Connect Pusher to Base port\nconfigSocket.connect('tcp://' + matrix_ip + ':' + matrix_imu_base_port);\n// Create driver configuration\nvar config = matrix_io.malos.v1.driver.DriverConfig.create({\n  // Update rate configuration\n  delayBetweenUpdates: 2.0,// 2 seconds between updates\n  timeoutAfterLastPing: 6.0,// Stop sending updates 6 seconds after pings.\n});\n// Send driver configuration\nconfigSocket.send(matrix_io.malos.v1.driver.DriverConfig.encode(config).finish());     Keep-alive Port \nThe next step is to connect and send a message to the  Keep-alive Port . That message, an empty string, will grant us a response from the  Data Update Port  for the current IMU values. An interval for pinging is then set to continuously obtain that data.  // Create a Pusher socket\nvar pingSocket = zmq.socket('push');\n// Connect Pusher to Keep-alive port\npingSocket.connect('tcp://' + matrix_ip + ':' + (matrix_imu_base_port + 1));\n// Send initial ping\npingSocket.send('');\n// Send ping every 5 seconds\nsetInterval(function(){\n  pingSocket.send('');\n}, 5000);     Error Port \nConnecting to the  Error Port  is optional, but highly recommended if you want to log any errors that occur within MATRIX CORE.  // Create a Subscriber socket\nvar errorSocket = zmq.socket('sub');\n// Connect Subscriber to Error port\nerrorSocket.connect('tcp://' + matrix_ip + ':' + (matrix_imu_base_port + 2));\n// Connect Subscriber to Error port\nerrorSocket.subscribe('');\n// On Message\nerrorSocket.on('message', function(error_message){\n  console.log('Error received: ' + error_message.toString('utf8'));// Log error\n});     Data Update Port \nA connection to the  Data Update Port  is then made to allow us to receive the current IMU data we want.  // Create a Subscriber socket\nvar updateSocket = zmq.socket('sub');\n// Connect Subscriber to Data Update port\nupdateSocket.connect('tcp://' + matrix_ip + ':' + (matrix_imu_base_port + 3));\n// Subscribe to messages\nupdateSocket.subscribe('');\n// On Message\nupdateSocket.on('message', function(buffer){\n  var data = matrix_io.malos.v1.sense.Imu.decode(buffer);// Extract message\n    console.log(data);// Log new IMU data\n});", 
            "title": "Code Example"
        }, 
        {
            "location": "/matrix-core/javascript-examples/pressure/", 
            "text": "Pressure\n\n\n\nJavascript Example\n\n\n\nDevice Compatibility\n\n\n\n\nOverview\n\n\nThe Pressure driver reports values for:\n\n\n\n\nPressure\n\n\nAltitude\n\n\nTemperature\n\n\n\n\n\n\nBased on component location, the temperature values from the \nHumidity driver\n are recommended over the Pressure driver\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20025\n\n\nKeep-alive port\n: 20026\n\n\nError port\n: 20027\n\n\nData Update port\n: 20028\n\n\n\n\nCode Example\n\n\nThe following sections show how to implement a connection to each of the Pressure driver's ports. You can download this example \nhere\n.\n\n\n\n\n\nInitial Variables\n\nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Javascript. We also define a few helpful variables for easy references.\n\n\nvar zmq = require('zeromq');// Asynchronous Messaging Framework\nvar matrix_io = require('matrix-protos').matrix_io;// Protocol Buffers for MATRIX function\nvar matrix_ip = '127.0.0.1';// Local IP\nvar matrix_pressure_base_port = 20025;// Port for Pressure driver\n\n\n\n\n\n\n\n\n\n\n\nBase Port\n\nHere is where the configuration for our Pressure example goes. Once we connect to the \nBase Port\n, We will pass a configuration to the pressure driver. With this we can set the update rate and timeout configuration.\n\n\n// Create a Pusher socket\nvar configSocket = zmq.socket('push');\n// Connect Pusher to Base port\nconfigSocket.connect('tcp://' + matrix_ip + ':' + matrix_pressure_base_port);\n// Create driver configuration\nvar config = matrix_io.malos.v1.driver.DriverConfig.create({\n  // Update rate configuration\n  delayBetweenUpdates: 2.0,// 2 seconds between updates\n  timeoutAfterLastPing: 6.0,// Stop sending updates 6 seconds after pings.\n});\n// Send driver configuration\nconfigSocket.send(matrix_io.malos.v1.driver.DriverConfig.encode(config).finish());\n\n\n\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThe next step is to connect and send a message to the \nKeep-alive Port\n. That message, an empty string, will grant us a response from the \nData Update Port\n for the current pressure value. An interval for pinging is then set to continuously obtain that data.\n\n\n// Create a Pusher socket\nvar pingSocket = zmq.socket('push');\n// Connect Pusher to Keep-alive port\npingSocket.connect('tcp://' + matrix_ip + ':' + (matrix_pressure_base_port + 1));\n// Send initial ping\npingSocket.send('');\n// Send ping every 5 seconds\nsetInterval(function(){\n  pingSocket.send('');\n}, 5000);\n\n\n\n\n\n\n\n\n\n\n\nError Port\n\nConnecting to the \nError Port\n is optional, but highly recommended if you want to log any errors that occur within MATRIX CORE.\n\n\n// Create a Subscriber socket\nvar errorSocket = zmq.socket('sub');\n// Connect Subscriber to Error port\nerrorSocket.connect('tcp://' + matrix_ip + ':' + (matrix_pressure_base_port + 2));\n// Connect Subscriber to Error port\nerrorSocket.subscribe('');\n// On Message\nerrorSocket.on('message', function(error_message){\n  console.log('Error received: ' + error_message.toString('utf8'));// Log error\n});\n\n\n\n\n\n\n\n\n\n\n\nData Update Port\n\nA connection to the \nData Update Port\n will allow us to receive the current pressure data we want.\n\n\n// Create a Subscriber socket\nvar updateSocket = zmq.socket('sub');\n// Connect Subscriber to Data Update port\nupdateSocket.connect('tcp://' + matrix_ip + ':' + (matrix_pressure_base_port + 3));\n// Subscribe to messages\nupdateSocket.subscribe('');\n// On Message\nupdateSocket.on('message', function(buffer){\n  var data = matrix_io.malos.v1.sense.Pressure.decode(buffer);// Extract message\n    console.log(data);// Log new pressure data\n});\n\n\n\n\nData Output\n\n\n\nThe javascript object below is an example output you'll receive from the \nData Update Port\n.\n\n\n{\n  pressure: 101173.75,\n  altitude: 12.812000274658203,\n  temperature: 37.3120002746582 \n}", 
            "title": "Pressure"
        }, 
        {
            "location": "/matrix-core/javascript-examples/pressure/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/javascript-examples/pressure/#overview", 
            "text": "The Pressure driver reports values for:   Pressure  Altitude  Temperature    Based on component location, the temperature values from the  Humidity driver  are recommended over the Pressure driver", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/javascript-examples/pressure/#code-example", 
            "text": "The following sections show how to implement a connection to each of the Pressure driver's ports. You can download this example  here .   Initial Variables \nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Javascript. We also define a few helpful variables for easy references.  var zmq = require('zeromq');// Asynchronous Messaging Framework\nvar matrix_io = require('matrix-protos').matrix_io;// Protocol Buffers for MATRIX function\nvar matrix_ip = '127.0.0.1';// Local IP\nvar matrix_pressure_base_port = 20025;// Port for Pressure driver     Base Port \nHere is where the configuration for our Pressure example goes. Once we connect to the  Base Port , We will pass a configuration to the pressure driver. With this we can set the update rate and timeout configuration.  // Create a Pusher socket\nvar configSocket = zmq.socket('push');\n// Connect Pusher to Base port\nconfigSocket.connect('tcp://' + matrix_ip + ':' + matrix_pressure_base_port);\n// Create driver configuration\nvar config = matrix_io.malos.v1.driver.DriverConfig.create({\n  // Update rate configuration\n  delayBetweenUpdates: 2.0,// 2 seconds between updates\n  timeoutAfterLastPing: 6.0,// Stop sending updates 6 seconds after pings.\n});\n// Send driver configuration\nconfigSocket.send(matrix_io.malos.v1.driver.DriverConfig.encode(config).finish());     Keep-alive Port \nThe next step is to connect and send a message to the  Keep-alive Port . That message, an empty string, will grant us a response from the  Data Update Port  for the current pressure value. An interval for pinging is then set to continuously obtain that data.  // Create a Pusher socket\nvar pingSocket = zmq.socket('push');\n// Connect Pusher to Keep-alive port\npingSocket.connect('tcp://' + matrix_ip + ':' + (matrix_pressure_base_port + 1));\n// Send initial ping\npingSocket.send('');\n// Send ping every 5 seconds\nsetInterval(function(){\n  pingSocket.send('');\n}, 5000);     Error Port \nConnecting to the  Error Port  is optional, but highly recommended if you want to log any errors that occur within MATRIX CORE.  // Create a Subscriber socket\nvar errorSocket = zmq.socket('sub');\n// Connect Subscriber to Error port\nerrorSocket.connect('tcp://' + matrix_ip + ':' + (matrix_pressure_base_port + 2));\n// Connect Subscriber to Error port\nerrorSocket.subscribe('');\n// On Message\nerrorSocket.on('message', function(error_message){\n  console.log('Error received: ' + error_message.toString('utf8'));// Log error\n});     Data Update Port \nA connection to the  Data Update Port  will allow us to receive the current pressure data we want.  // Create a Subscriber socket\nvar updateSocket = zmq.socket('sub');\n// Connect Subscriber to Data Update port\nupdateSocket.connect('tcp://' + matrix_ip + ':' + (matrix_pressure_base_port + 3));\n// Subscribe to messages\nupdateSocket.subscribe('');\n// On Message\nupdateSocket.on('message', function(buffer){\n  var data = matrix_io.malos.v1.sense.Pressure.decode(buffer);// Extract message\n    console.log(data);// Log new pressure data\n});", 
            "title": "Code Example"
        }, 
        {
            "location": "/matrix-core/javascript-examples/uv/", 
            "text": "UV\n\n\n\nJavascript Example\n\n\n\nDevice Compatibility\n\n\n\n\nOverview\n\n\nThe UV driver reports values for:\n\n\n\n\nUV Index scale used in the United States conforms with international guidelines for UVI reporting established by the World Health Organization.  From \nUV Index Scale\n\n\nUV Risk scale established by World Health Organization. From \nUV Index Scale\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20029\n\n\nKeep-alive port\n: 20030\n\n\nError port\n: 20031\n\n\nData Update port\n: 20032\n\n\n\n\nCode Example\n\n\nThe following sections show how to implement a connection to each of the UV driver's ports. You can download this example \nhere\n.\n\n\n\n\n\n\n\nInitial Variables\n\nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Javascript. We also define a few helpful variables for easy references.\n\n\nvar zmq = require('zeromq');// Asynchronous Messaging Framework\nvar matrix_io = require('matrix-protos').matrix_io;// Protocol Buffers for MATRIX function\nvar matrix_ip = '127.0.0.1';// Local IP\nvar matrix_uv_base_port = 20029;// Port for UV driver\n\n\n\n\n\n\n\n\n\n\n\nBase Port\n\nHere is where the configuration for our UV example goes. Once we connect to the \nBase Port\n, We will pass a configuration to the UV driver. With this we can set the update rate and timeout configuration.\n\n\n// Create a Pusher socket\nvar configSocket = zmq.socket('push');\n// Connect Pusher to Base port\nconfigSocket.connect('tcp://' + matrix_ip + ':' + matrix_uv_base_port);\n// Create driver configuration\nvar config = matrix_io.malos.v1.driver.DriverConfig.create({\n  // Update rate configuration\n  delayBetweenUpdates: 2.0,// 2 seconds between updates\n  timeoutAfterLastPing: 6.0,// Stop sending updates 6 seconds after pings.\n});\n// Send driver configuration\nconfigSocket.send(matrix_io.malos.v1.driver.DriverConfig.encode(config).finish());\n\n\n\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThe next step is to connect and send a message to the \nKeep-alive Port\n. That message, an empty string, will grant us a response from the \nData Update Port\n for the current UV value. An interval for pinging is then set to continuously obtain that data.\n\n\n// Create a Pusher socket\nvar pingSocket = zmq.socket('push');\n// Connect Pusher to Keep-alive port\npingSocket.connect('tcp://' + matrix_ip + ':' + (matrix_uv_base_port + 1));\n// Send initial ping\npingSocket.send('');\n// Send ping every 5 seconds\nsetInterval(function(){\n  pingSocket.send('');\n}, 5000);\n\n\n\n\n\n\n\n\n\n\n\nError Port\n\nConnecting to the \nError Port\n is optional, but highly recommended if you want to log any errors that occur within MATRIX CORE.\n\n\n// Create a Subscriber socket\nvar errorSocket = zmq.socket('sub');\n// Connect Subscriber to Error port\nerrorSocket.connect('tcp://' + matrix_ip + ':' + (matrix_uv_base_port + 2));\n// Connect Subscriber to Error port\nerrorSocket.subscribe('');\n// On Message\nerrorSocket.on('message', function(error_message){\n  console.log('Error received: ' + error_message.toString('utf8'));// Log error\n});\n\n\n\n\n\n\n\n\n\n\n\nData Update Port\n\nA connection to the \nData Update Port\n will allow us to receive the current UV data we want.\n\n\n// Create a Subscriber socket\nvar updateSocket = zmq.socket('sub');\n// Connect Subscriber to Data Update port\nupdateSocket.connect('tcp://' + matrix_ip + ':' + (matrix_uv_base_port + 3));\n// Subscribe to messages\nupdateSocket.subscribe('');\n// On Message\nupdateSocket.on('message', function(buffer){\n  var data = matrix_io.malos.v1.sense.UV.decode(buffer);// Extract message\n    console.log(data);// Log new UV data\n});\n\n\n\n\nData Output\n\n\n\nThe javascript object below is an example output you'll receive from the \nData Update Port\n.\n\n\n{\n  uvIndex: 0.0010000000474974513,\n  omsRisk: 'Low'\n}", 
            "title": "UV"
        }, 
        {
            "location": "/matrix-core/javascript-examples/uv/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/javascript-examples/uv/#overview", 
            "text": "The UV driver reports values for:   UV Index scale used in the United States conforms with international guidelines for UVI reporting established by the World Health Organization.  From  UV Index Scale  UV Risk scale established by World Health Organization. From  UV Index Scale", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/javascript-examples/uv/#code-example", 
            "text": "The following sections show how to implement a connection to each of the UV driver's ports. You can download this example  here .    Initial Variables \nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Javascript. We also define a few helpful variables for easy references.  var zmq = require('zeromq');// Asynchronous Messaging Framework\nvar matrix_io = require('matrix-protos').matrix_io;// Protocol Buffers for MATRIX function\nvar matrix_ip = '127.0.0.1';// Local IP\nvar matrix_uv_base_port = 20029;// Port for UV driver     Base Port \nHere is where the configuration for our UV example goes. Once we connect to the  Base Port , We will pass a configuration to the UV driver. With this we can set the update rate and timeout configuration.  // Create a Pusher socket\nvar configSocket = zmq.socket('push');\n// Connect Pusher to Base port\nconfigSocket.connect('tcp://' + matrix_ip + ':' + matrix_uv_base_port);\n// Create driver configuration\nvar config = matrix_io.malos.v1.driver.DriverConfig.create({\n  // Update rate configuration\n  delayBetweenUpdates: 2.0,// 2 seconds between updates\n  timeoutAfterLastPing: 6.0,// Stop sending updates 6 seconds after pings.\n});\n// Send driver configuration\nconfigSocket.send(matrix_io.malos.v1.driver.DriverConfig.encode(config).finish());     Keep-alive Port \nThe next step is to connect and send a message to the  Keep-alive Port . That message, an empty string, will grant us a response from the  Data Update Port  for the current UV value. An interval for pinging is then set to continuously obtain that data.  // Create a Pusher socket\nvar pingSocket = zmq.socket('push');\n// Connect Pusher to Keep-alive port\npingSocket.connect('tcp://' + matrix_ip + ':' + (matrix_uv_base_port + 1));\n// Send initial ping\npingSocket.send('');\n// Send ping every 5 seconds\nsetInterval(function(){\n  pingSocket.send('');\n}, 5000);     Error Port \nConnecting to the  Error Port  is optional, but highly recommended if you want to log any errors that occur within MATRIX CORE.  // Create a Subscriber socket\nvar errorSocket = zmq.socket('sub');\n// Connect Subscriber to Error port\nerrorSocket.connect('tcp://' + matrix_ip + ':' + (matrix_uv_base_port + 2));\n// Connect Subscriber to Error port\nerrorSocket.subscribe('');\n// On Message\nerrorSocket.on('message', function(error_message){\n  console.log('Error received: ' + error_message.toString('utf8'));// Log error\n});     Data Update Port \nA connection to the  Data Update Port  will allow us to receive the current UV data we want.  // Create a Subscriber socket\nvar updateSocket = zmq.socket('sub');\n// Connect Subscriber to Data Update port\nupdateSocket.connect('tcp://' + matrix_ip + ':' + (matrix_uv_base_port + 3));\n// Subscribe to messages\nupdateSocket.subscribe('');\n// On Message\nupdateSocket.on('message', function(buffer){\n  var data = matrix_io.malos.v1.sense.UV.decode(buffer);// Extract message\n    console.log(data);// Log new UV data\n});", 
            "title": "Code Example"
        }, 
        {
            "location": "/matrix-core/javascript-examples/servo/", 
            "text": "Servo\n\n\n\nJavascript Example\n\n\n\nDevice Compatibility\n\n\n\n\n\n\nOverview\n\n\nThe Servo driver can set the angle of your servos through the pins of your MATRIX device.\n\n\nDevice Pinouts\n:\n\n\n\n\nMATRIX Creator\n\n\nMATRIX Voice\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20045\n\n\nError port\n: 20047\n\n\n\n\nCode Example\n\n\nThe following sections show how to implement a connection to each of the Servo driver's ports. You can download this example \nhere\n.\n\n\n\n\n\n\n\nInitial Variables\n\nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Javascript. We also define a few helpful variables for easy references.\n\n\nvar zmq = require('zeromq');// Asynchronous Messaging Framework\nvar matrix_io = require('matrix-protos').matrix_io;// Protocol Buffers for MATRIX function\nvar matrix_ip = '127.0.0.1';// Local IP\nvar matrix_servo_base_port = 20045;// Port for Servo driver\n\n\n\n\n\n\n\n\n\n\n\nBase Port\n\nHere is where the configuration for our servo example goes. Once we connect to the \nBase Port\n, We will pass a configuration to the servo driver. With this we can choose the pin we want to edit and the angle to set for it. This example will send random numbers to any servo attached to pin 0.\n\n\n// Create a Pusher socket\nvar configSocket = zmq.socket('push');\n// Connect Pusher to Base port\nconfigSocket.connect('tcp://' + matrix_ip + ':' + matrix_servo_base_port);\n// Create driver configuration\nvar config = matrix_io.malos.v1.driver.DriverConfig.create({\n  // Create servo configuration\n  servo: matrix_io.malos.v1.io.ServoParams.create({\n    pin: 0,// Use pin 0\n    angle: 0// Set angle 0\n  })\n});\n// Loop every second\nsetInterval(function(){\n  // Pick number from 1-180\n  var angle = Math.floor(Math.random() * 180)+1;\n  // Set number as new random angle\n  config.servo.angle = angle;\n  // Log angle\n  console.log(angle);\n  // Send driver configuration\n  configSocket.send(matrix_io.malos.v1.driver.DriverConfig.encode(config).finish());\n}, 1000);\n\n\n\n\n\n\n\n\n\n\n\nError Port\n\nConnecting to the \nError Port\n is optional, but highly recommended if you want to log any errors that occur within MATRIX CORE.\n\n\n// Create a Subscriber socket\nvar errorSocket = zmq.socket('sub');\n// Connect Subscriber to Error port\nerrorSocket.connect('tcp://' + matrix_ip + ':' + (matrix_servo_base_port + 2));\n// Connect Subscriber to Error port\nerrorSocket.subscribe('');\n// On Message\nerrorSocket.on('message', function(error_message){\n  console.log('Error received: ' + error_message.toString('utf8'));// Log error\n});", 
            "title": "Servo"
        }, 
        {
            "location": "/matrix-core/javascript-examples/servo/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/javascript-examples/servo/#overview", 
            "text": "The Servo driver can set the angle of your servos through the pins of your MATRIX device.  Device Pinouts :   MATRIX Creator  MATRIX Voice", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/javascript-examples/servo/#code-example", 
            "text": "The following sections show how to implement a connection to each of the Servo driver's ports. You can download this example  here .    Initial Variables \nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Javascript. We also define a few helpful variables for easy references.  var zmq = require('zeromq');// Asynchronous Messaging Framework\nvar matrix_io = require('matrix-protos').matrix_io;// Protocol Buffers for MATRIX function\nvar matrix_ip = '127.0.0.1';// Local IP\nvar matrix_servo_base_port = 20045;// Port for Servo driver     Base Port \nHere is where the configuration for our servo example goes. Once we connect to the  Base Port , We will pass a configuration to the servo driver. With this we can choose the pin we want to edit and the angle to set for it. This example will send random numbers to any servo attached to pin 0.  // Create a Pusher socket\nvar configSocket = zmq.socket('push');\n// Connect Pusher to Base port\nconfigSocket.connect('tcp://' + matrix_ip + ':' + matrix_servo_base_port);\n// Create driver configuration\nvar config = matrix_io.malos.v1.driver.DriverConfig.create({\n  // Create servo configuration\n  servo: matrix_io.malos.v1.io.ServoParams.create({\n    pin: 0,// Use pin 0\n    angle: 0// Set angle 0\n  })\n});\n// Loop every second\nsetInterval(function(){\n  // Pick number from 1-180\n  var angle = Math.floor(Math.random() * 180)+1;\n  // Set number as new random angle\n  config.servo.angle = angle;\n  // Log angle\n  console.log(angle);\n  // Send driver configuration\n  configSocket.send(matrix_io.malos.v1.driver.DriverConfig.encode(config).finish());\n}, 1000);     Error Port \nConnecting to the  Error Port  is optional, but highly recommended if you want to log any errors that occur within MATRIX CORE.  // Create a Subscriber socket\nvar errorSocket = zmq.socket('sub');\n// Connect Subscriber to Error port\nerrorSocket.connect('tcp://' + matrix_ip + ':' + (matrix_servo_base_port + 2));\n// Connect Subscriber to Error port\nerrorSocket.subscribe('');\n// On Message\nerrorSocket.on('message', function(error_message){\n  console.log('Error received: ' + error_message.toString('utf8'));// Log error\n});", 
            "title": "Code Example"
        }, 
        {
            "location": "/matrix-core/javascript-examples/gpio/", 
            "text": "General Purpose Input Output (GPIO)\n\n\n\nJavascript Example\n\n\n\nDevice Compatibility\n\n\n\n\n\n\nOverview\n\n\nThe GPIO driver supports:\n\n\n\n\nReading pin input\n\n\nSetting pin output\n\n\n\n\nDevice Pinouts\n:\n\n\n\n\nMATRIX Creator\n\n\nMATRIX Voice\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20049\n\n\nKeep-alive port\n: 20050\n\n\nError port\n: 20051\n\n\nData Update port\n: 20052\n\n\n\n\nCode Example\n\n\nThe following sections show how to implement a connection to each of the GPIO driver's ports. You can download this example \nhere\n.\n\n\n\n\n\n\n\nInitial Variables\n\nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Javascript. We also define a few helpful variables for easy references.\n\n\nvar zmq = require('zeromq');// Asynchronous Messaging Framework\nvar matrix_io = require('matrix-protos').matrix_io;// Protocol Buffers for MATRIX function\nvar matrix_ip = '127.0.0.1';// Local IP\nvar matrix_gpio_base_port = 20049;// Port for GPIO driver\nvar counter = 1;// Counter for gpio value toggle \n\n\n\n\n\n\n\n\n\n\n\nBase Port\n\nHere is where the configuration for our GPIO example goes. Once we connect to the \nBase Port\n, We will pass a configuration to the GPIO driver. With this, we can set the update rate, timeout, and pin configuration. This example will use \npin: 0\n and use a function toggle the pin state between on\noff.\n\n\n\n\nEach \npin\n will save its last set \nvalue\n until the next device boot.\n\n\n\n\n// Create a Pusher socket\nvar configSocket = zmq.socket('push');\n// Connect Pusher to Base port\nconfigSocket.connect('tcp://' + matrix_ip + ':' + matrix_gpio_base_port);\n\n//Create driver configuration\nvar outputConfig = matrix_io.malos.v1.driver.DriverConfig.create({\n  // Update rate configuration\n  delayBetweenUpdates: 2.0,// 2 seconds between updates\n  timeoutAfterLastPing: 6.0,// Stop sending updates 6 seconds after pings.\n  //GPIO Configuration\n  gpio: matrix_io.malos.v1.io.GpioParams.create({\n    pin: 0,// Use pin 0\n    mode: matrix_io.malos.v1.io.GpioParams.EnumMode.OUTPUT,// Set as output mode\n    value: 0// Set initial pin value as off\n  })\n});\n\n//Function to toggle gpio value to 0 or 1\nfunction toggle(){\n  outputConfig.gpio.value = counter%2;// Set pin value as 1 or 0\n  counter++;// increase counter\n  // Send MATRIX configuration to MATRIX device\n  configSocket.send(matrix_io.malos.v1.driver.DriverConfig.encode(outputConfig).finish());\n}\n\n\n\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThe next step is to connect and send a message to the \nKeep-alive Port\n. That message, an empty string, will grant us a response from the \nData Update Port\n for the current GPIO pin values. An interval for pinging is then set to continuously obtain that data. The, previously defined, toggle function is also called to swap the pin state after a ping.\n\n\n// Create a Pusher socket\nvar pingSocket = zmq.socket('push');\n// Connect Pusher to Keep-alive port\npingSocket.connect('tcp://' + matrix_ip + ':' + (matrix_gpio_base_port + 1));\n// Send initial ping\npingSocket.send('');\n// Send ping \n toggle pin value every 2 seconds\nsetInterval(function(){\n  pingSocket.send('');// Send ping\n  toggle();// Change pin value\n}, 2000);\n\n\n\n\n\n\n\n\n\n\n\nError Port\n\nConnecting to the \nError Port\n is optional, but highly recommended if you want to log any errors that occur within MATRIX CORE.\n\n\n// Create a Subscriber socket\nvar errorSocket = zmq.socket('sub');\n// Connect Subscriber to Error port\nerrorSocket.connect('tcp://' + matrix_ip + ':' + (matrix_gpio_base_port + 2));\n// Connect Subscriber to Error port\nerrorSocket.subscribe('');\n// On Message\nerrorSocket.on('message', function(error_message){\n  console.log('Error received: ' + error_message.toString('utf8'));// Log error\n});\n\n\n\n\n\n\n\n\n\n\n\nData Update Port\n\nA connection to the \nData Update Port\n is then made to allow us to receive the current IMU data we want. The message received from the GPIO driver is converted into a 16 bit array, named \ngpioValues\n that represents each pin on your MATRIX device.\n\n\n// Create a Subscriber socket\nvar updateSocket = zmq.socket('sub');\n// Connect Subscriber to Data Update port\nupdateSocket.connect('tcp://' + matrix_ip + ':' + (matrix_gpio_base_port + 3));\n// Subscribe to messages\nupdateSocket.subscribe('');\n// On Message\nupdateSocket.on('message', function(buffer){\n  // Extract message\n  var data = matrix_io.malos.v1.io.GpioParams.decode(buffer);\n  // String value to represent all GPIO pins as off\n  var zeroPadding = '0000000000000000';\n  // Remove padding to make room for GPIO values\n  var gpioValues = zeroPadding.slice(0, zeroPadding.length - data.values.toString(2).length);\n  // Convert GPIO values to 16-bit and add to string\n  gpioValues = gpioValues.concat(data.values.toString(2));\n  // Convert string to chronologically ordered array\n  gpioValues = gpioValues.split(\n).reverse();\n  // Log GPIO pin states from gpioValues[0-15]\n  console.log('GPIO PINS--\n[0-15]\\n'+'['+gpioValues.toString()+']');\n});\n\n\n\n\nData Output\n\n\n\nThe Javascript object below is an example output you'll receive from the \nData Update Port\n. For readability, the code above has converted the output as a 16-bit value and turned it into an array.\n\n\n{\n  values: 513\n}", 
            "title": "GPIO"
        }, 
        {
            "location": "/matrix-core/javascript-examples/gpio/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/javascript-examples/gpio/#overview", 
            "text": "The GPIO driver supports:   Reading pin input  Setting pin output   Device Pinouts :   MATRIX Creator  MATRIX Voice", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/javascript-examples/gpio/#code-example", 
            "text": "The following sections show how to implement a connection to each of the GPIO driver's ports. You can download this example  here .    Initial Variables \nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Javascript. We also define a few helpful variables for easy references.  var zmq = require('zeromq');// Asynchronous Messaging Framework\nvar matrix_io = require('matrix-protos').matrix_io;// Protocol Buffers for MATRIX function\nvar matrix_ip = '127.0.0.1';// Local IP\nvar matrix_gpio_base_port = 20049;// Port for GPIO driver\nvar counter = 1;// Counter for gpio value toggle      Base Port \nHere is where the configuration for our GPIO example goes. Once we connect to the  Base Port , We will pass a configuration to the GPIO driver. With this, we can set the update rate, timeout, and pin configuration. This example will use  pin: 0  and use a function toggle the pin state between on off.   Each  pin  will save its last set  value  until the next device boot.   // Create a Pusher socket\nvar configSocket = zmq.socket('push');\n// Connect Pusher to Base port\nconfigSocket.connect('tcp://' + matrix_ip + ':' + matrix_gpio_base_port);\n\n//Create driver configuration\nvar outputConfig = matrix_io.malos.v1.driver.DriverConfig.create({\n  // Update rate configuration\n  delayBetweenUpdates: 2.0,// 2 seconds between updates\n  timeoutAfterLastPing: 6.0,// Stop sending updates 6 seconds after pings.\n  //GPIO Configuration\n  gpio: matrix_io.malos.v1.io.GpioParams.create({\n    pin: 0,// Use pin 0\n    mode: matrix_io.malos.v1.io.GpioParams.EnumMode.OUTPUT,// Set as output mode\n    value: 0// Set initial pin value as off\n  })\n});\n\n//Function to toggle gpio value to 0 or 1\nfunction toggle(){\n  outputConfig.gpio.value = counter%2;// Set pin value as 1 or 0\n  counter++;// increase counter\n  // Send MATRIX configuration to MATRIX device\n  configSocket.send(matrix_io.malos.v1.driver.DriverConfig.encode(outputConfig).finish());\n}     Keep-alive Port \nThe next step is to connect and send a message to the  Keep-alive Port . That message, an empty string, will grant us a response from the  Data Update Port  for the current GPIO pin values. An interval for pinging is then set to continuously obtain that data. The, previously defined, toggle function is also called to swap the pin state after a ping.  // Create a Pusher socket\nvar pingSocket = zmq.socket('push');\n// Connect Pusher to Keep-alive port\npingSocket.connect('tcp://' + matrix_ip + ':' + (matrix_gpio_base_port + 1));\n// Send initial ping\npingSocket.send('');\n// Send ping   toggle pin value every 2 seconds\nsetInterval(function(){\n  pingSocket.send('');// Send ping\n  toggle();// Change pin value\n}, 2000);     Error Port \nConnecting to the  Error Port  is optional, but highly recommended if you want to log any errors that occur within MATRIX CORE.  // Create a Subscriber socket\nvar errorSocket = zmq.socket('sub');\n// Connect Subscriber to Error port\nerrorSocket.connect('tcp://' + matrix_ip + ':' + (matrix_gpio_base_port + 2));\n// Connect Subscriber to Error port\nerrorSocket.subscribe('');\n// On Message\nerrorSocket.on('message', function(error_message){\n  console.log('Error received: ' + error_message.toString('utf8'));// Log error\n});     Data Update Port \nA connection to the  Data Update Port  is then made to allow us to receive the current IMU data we want. The message received from the GPIO driver is converted into a 16 bit array, named  gpioValues  that represents each pin on your MATRIX device.  // Create a Subscriber socket\nvar updateSocket = zmq.socket('sub');\n// Connect Subscriber to Data Update port\nupdateSocket.connect('tcp://' + matrix_ip + ':' + (matrix_gpio_base_port + 3));\n// Subscribe to messages\nupdateSocket.subscribe('');\n// On Message\nupdateSocket.on('message', function(buffer){\n  // Extract message\n  var data = matrix_io.malos.v1.io.GpioParams.decode(buffer);\n  // String value to represent all GPIO pins as off\n  var zeroPadding = '0000000000000000';\n  // Remove padding to make room for GPIO values\n  var gpioValues = zeroPadding.slice(0, zeroPadding.length - data.values.toString(2).length);\n  // Convert GPIO values to 16-bit and add to string\n  gpioValues = gpioValues.concat(data.values.toString(2));\n  // Convert string to chronologically ordered array\n  gpioValues = gpioValues.split( ).reverse();\n  // Log GPIO pin states from gpioValues[0-15]\n  console.log('GPIO PINS-- [0-15]\\n'+'['+gpioValues.toString()+']');\n});", 
            "title": "Code Example"
        }, 
        {
            "location": "/matrix-core/python-examples/", 
            "text": "Python Examples\n\n\nEverloop\n\nLED interface.\n\n\nHumidity\n\n\n\nHumidity and temperature measurement.\n\n\nIMU\n\n\n\nInertial Measurement Unit.\n\n\nPressure\n\n\n\nPressure, altitude and temperature measurement.\n\n\nUV\n\n\n\nUltraviolet light sensor.\n\n\nServo\n\n\n\nAdjust servo positions.\n\n\nGPIO\n\n\n\nGeneral Purpose Input/Output.", 
            "title": "Index"
        }, 
        {
            "location": "/matrix-core/python-examples/#python-examples", 
            "text": "", 
            "title": "Python Examples"
        }, 
        {
            "location": "/matrix-core/python-examples/everloop/", 
            "text": "Everloop\n\n\n\nPython Example\n\n\n\nDevice Compatibility\n\n\n\n\n\n\nOverview\n\n\nThe Everloop driver allows for:\n\n\n\n\nReading amount of LEDs your MATRIX device has.\n\n\nSetting the RGBW colors for each individual LED.\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20021\n\n\nKeep-alive port\n: 20022\n\n\nError port\n: 20023\n\n\nData update port\n: 20024\n\n\n\n\nCode Example\n\n\nThe following sections show how to implement a connection to each of the Everloop driver's ports. You can download this example \nhere\n.\n\n\n\n\n\n\n\nInitial Variables\n\nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Python. We also define a few helpful variables for easy references.\n\n\nimport os # Miscellaneous operating system interface\nimport zmq # Asynchronous messaging framework\nimport time # Time access and conversions\nfrom random import randint # Random numbers\nimport sys # System-specific parameters and functions\nfrom matrix_io.proto.malos.v1 import driver_pb2 # MATRIX Protocol Buffer driver library\nfrom matrix_io.proto.malos.v1 import io_pb2 # MATRIX Protocol Buffer sensor library\nfrom multiprocessing import Process, Manager, Value # Allow for multiple processes at once\nfrom zmq.eventloop import ioloop, zmqstream# Asynchronous events through ZMQ\nmatrix_ip = '127.0.0.1' # Local device ip\neverloop_port = 20021 # Driver Base port\nled_count = 0 # Amount of LEDs on MATRIX device\n# Handy function for connecting to the Error port \nfrom utils import register_error_callback\n\n\n\n\n\n\n\n\n\n\n\nBase Port\n\nHere is where the configuration for our Everloop example goes. Once we connect to the \nBase Port\n, we will pass a configuration to the Everloop driver. With this we can set the LED configuration. The \nwhile True\n loop is used to show how you can rapidly push different LED colors.\n\n\ndef config_socket(ledCount):  \n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Pusher socket\n    socket = context.socket(zmq.PUSH)\n    # Connect Pusher to configuration socket\n    socket.connect('tcp://{0}:{1}'.format(matrix_ip, everloop_port))\n\n    # Loop forever\n    while True:\n        # Create a new driver config\n        driver_config_proto = driver_pb2.DriverConfig()\n        # Create an empty Everloop image\n        image = []\n        # For each device LED\n        for led in range(ledCount):\n            # Set individual LED value\n            ledValue = io_pb2.LedValue()\n            ledValue.blue = randint(0, 50)\n            ledValue.red = randint(0, 200)\n            ledValue.green = randint(0, 255)\n            ledValue.white = 0\n            image.append(ledValue)\n        # Store the Everloop image in driver configuration\n        driver_config_proto.image.led.extend(image)\n\n        # Send driver configuration through ZMQ socket\n        socket.send(driver_config_proto.SerializeToString())\n        # Wait before restarting loop\n        time.sleep(0.05)\n\n\n\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThe next step is to connect and send a message to the \nKeep-alive Port\n. That message will grant us a response from the \nData Update Port\n for the current LED count of your MATRIX device. The code below will give only send one ping because LED count will not change.\n\n\ndef ping_socket():\n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Pusher socket\n    ping_socket = context.socket(zmq.PUSH)\n    # Connect to the socket\n    ping_socket.connect('tcp://{0}:{1}'.format(matrix_ip, everloop_port+1))\n    # Send one ping\n    ping_socket.send_string('')\n\n\n\n\n\n\n\n\n\n\n\nError Port\n\nThe \nError Port\n connection is taken care of by the \nutils import\n. Below we define a function to be called and given any error messages that occur within MATRIX CORE.\n\n\ndef everloop_error_callback(error):\n    # Log error\n    print('{0}'.format(error))\n\n\n\n\n\n\n\n\n\n\n\nData Update Port\n\nA connection to the \nData Update Port\n will allow us to receive the current LED count on your MATRIX device. Once we connect to the port, the \nupdateLedCount\n function will pass the LED count to a global variable and then close the connection the \nData-update Port\n.\n\n\ndef update_socket():\n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Subscriber socket\n    socket = context.socket(zmq.SUB)\n    # Connect to the Data Update port\n    socket.connect('tcp://{0}:{1}'.format(matrix_ip, everloop_port+3))\n    # Connect Subscriber to Error port\n    socket.setsockopt(zmq.SUBSCRIBE, b'')\n    # Create the stream to listen to data from port\n    stream = zmqstream.ZMQStream(socket)\n\n    # Function to update LED count and close connection to the Data Update Port\n    def updateLedCount(data):\n        # Extract data and pass into led_count global variable\n        global led_count\n        led_count = io_pb2.LedValue().FromString(data[0]).green\n        # Log LEDs\n        print('{0} LEDs counted'.format(led_count))\n        # If LED count obtained\n        if led_count \n 0:\n            # Close Data Update Port connection\n            ioloop.IOLoop.instance().stop()\n            print('LED count obtained. Disconnecting from data publisher {0}'.format(everloop_port+3))\n    # Call updateLedCount() once data is received\n    stream.on_recv(updateLedCount)\n\n    # Log and begin event loop for ZMQ connection to Data Update Port\n    print('Connected to data publisher with port {0}'.format(everloop_port+3))\n    ioloop.IOLoop.instance().start()\n\n\n\n\nData Output\n\n\n\nThe Python object below is an example output you'll receive from the \nData Update Port\n.\n\n\n\n\nThe output name will be changed in a following update\n\n\n\n\ngreen: 18\n\n\n\n\n\n\n\n\n\n\n\nStart Processes\n\nThis is where we begin the asynchronous events for each of the driver ports and where we define the functions we want to use for each port. This example is only using the \nError Port\n connection asynchronously because the \nKeep-alive Port\n and \nData-update Port\n are only used once.\n\n\nif __name__ == '__main__':\n    # Initiate asynchronous events\n    ioloop.install()\n    # Start Error Port connection\n    Process(target=register_error_callback, args=(everloop_error_callback, matrix_ip, everloop_port)).start()    \n    # Ping the Keep-alive Port once\n    ping_socket()\n    # Start Data Update Port connection \n close after response\n    update_socket()\n    # Send Base Port configuration\n    try:\n        config_socket(led_count)\n    # Avoid logging Everloop errors on user quiting\n    except KeyboardInterrupt:\n        print(' quit')", 
            "title": "Everloop"
        }, 
        {
            "location": "/matrix-core/python-examples/everloop/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/python-examples/everloop/#overview", 
            "text": "The Everloop driver allows for:   Reading amount of LEDs your MATRIX device has.  Setting the RGBW colors for each individual LED.", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/python-examples/everloop/#code-example", 
            "text": "The following sections show how to implement a connection to each of the Everloop driver's ports. You can download this example  here .    Initial Variables \nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Python. We also define a few helpful variables for easy references.  import os # Miscellaneous operating system interface\nimport zmq # Asynchronous messaging framework\nimport time # Time access and conversions\nfrom random import randint # Random numbers\nimport sys # System-specific parameters and functions\nfrom matrix_io.proto.malos.v1 import driver_pb2 # MATRIX Protocol Buffer driver library\nfrom matrix_io.proto.malos.v1 import io_pb2 # MATRIX Protocol Buffer sensor library\nfrom multiprocessing import Process, Manager, Value # Allow for multiple processes at once\nfrom zmq.eventloop import ioloop, zmqstream# Asynchronous events through ZMQ\nmatrix_ip = '127.0.0.1' # Local device ip\neverloop_port = 20021 # Driver Base port\nled_count = 0 # Amount of LEDs on MATRIX device\n# Handy function for connecting to the Error port \nfrom utils import register_error_callback     Base Port \nHere is where the configuration for our Everloop example goes. Once we connect to the  Base Port , we will pass a configuration to the Everloop driver. With this we can set the LED configuration. The  while True  loop is used to show how you can rapidly push different LED colors.  def config_socket(ledCount):  \n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Pusher socket\n    socket = context.socket(zmq.PUSH)\n    # Connect Pusher to configuration socket\n    socket.connect('tcp://{0}:{1}'.format(matrix_ip, everloop_port))\n\n    # Loop forever\n    while True:\n        # Create a new driver config\n        driver_config_proto = driver_pb2.DriverConfig()\n        # Create an empty Everloop image\n        image = []\n        # For each device LED\n        for led in range(ledCount):\n            # Set individual LED value\n            ledValue = io_pb2.LedValue()\n            ledValue.blue = randint(0, 50)\n            ledValue.red = randint(0, 200)\n            ledValue.green = randint(0, 255)\n            ledValue.white = 0\n            image.append(ledValue)\n        # Store the Everloop image in driver configuration\n        driver_config_proto.image.led.extend(image)\n\n        # Send driver configuration through ZMQ socket\n        socket.send(driver_config_proto.SerializeToString())\n        # Wait before restarting loop\n        time.sleep(0.05)     Keep-alive Port \nThe next step is to connect and send a message to the  Keep-alive Port . That message will grant us a response from the  Data Update Port  for the current LED count of your MATRIX device. The code below will give only send one ping because LED count will not change.  def ping_socket():\n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Pusher socket\n    ping_socket = context.socket(zmq.PUSH)\n    # Connect to the socket\n    ping_socket.connect('tcp://{0}:{1}'.format(matrix_ip, everloop_port+1))\n    # Send one ping\n    ping_socket.send_string('')     Error Port \nThe  Error Port  connection is taken care of by the  utils import . Below we define a function to be called and given any error messages that occur within MATRIX CORE.  def everloop_error_callback(error):\n    # Log error\n    print('{0}'.format(error))     Data Update Port \nA connection to the  Data Update Port  will allow us to receive the current LED count on your MATRIX device. Once we connect to the port, the  updateLedCount  function will pass the LED count to a global variable and then close the connection the  Data-update Port .  def update_socket():\n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Subscriber socket\n    socket = context.socket(zmq.SUB)\n    # Connect to the Data Update port\n    socket.connect('tcp://{0}:{1}'.format(matrix_ip, everloop_port+3))\n    # Connect Subscriber to Error port\n    socket.setsockopt(zmq.SUBSCRIBE, b'')\n    # Create the stream to listen to data from port\n    stream = zmqstream.ZMQStream(socket)\n\n    # Function to update LED count and close connection to the Data Update Port\n    def updateLedCount(data):\n        # Extract data and pass into led_count global variable\n        global led_count\n        led_count = io_pb2.LedValue().FromString(data[0]).green\n        # Log LEDs\n        print('{0} LEDs counted'.format(led_count))\n        # If LED count obtained\n        if led_count   0:\n            # Close Data Update Port connection\n            ioloop.IOLoop.instance().stop()\n            print('LED count obtained. Disconnecting from data publisher {0}'.format(everloop_port+3))\n    # Call updateLedCount() once data is received\n    stream.on_recv(updateLedCount)\n\n    # Log and begin event loop for ZMQ connection to Data Update Port\n    print('Connected to data publisher with port {0}'.format(everloop_port+3))\n    ioloop.IOLoop.instance().start()", 
            "title": "Code Example"
        }, 
        {
            "location": "/matrix-core/python-examples/humidity/", 
            "text": "Humidity\n\n\n\nPython Example\n\n\n\n\n\nHumidity is currently under maintenance\n\n\n\n\nDevice Compatibility\n\n\n\n\nOverview\n\n\nThe Humidity driver allows for:\n\n\n\n\nReading relative humidity on the board\n\n\nObtaining temperature in Celsius and raw values\n\n\nCalibrating temperature\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20017\n\n\nKeep-alive port\n: 20018\n\n\nError port\n: 20019\n\n\nData update port\n: 20020\n\n\n\n\nCode Example\n\n\nThe following sections show how to implement a connection to each of the Humidity driver's ports. You can download this example \nhere\n.\n\n\n\n\n\n\n\nInitial Variables\n\nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Python. We also define a few helpful variables for easy references.\n\n\nimport os # Miscellaneous operating system interface\nimport zmq # Asynchronous messaging framework\nimport time # Time access and conversions\nimport sys # System-specific parameters and functions\nfrom matrix_io.proto.malos.v1 import driver_pb2 # MATRIX Protocol Buffer driver library\nfrom matrix_io.proto.malos.v1 import sense_pb2 # MATRIX Protocol Buffer sensor library\nfrom multiprocessing import Process # Allow for multiple processes at once\nfrom zmq.eventloop import ioloop # Asynchronous events through ZMQ\nmatrix_ip = '127.0.0.1' # Local device ip\nhumidity_port = 20017 # Driver Base port\n# Handy functions for connecting to the keep-Alive, Data Update, \n Error port \nfrom utils import driver_keep_alive, register_data_callback, register_error_callback\n\n\n\n\n\n\n\n\n\n\n\nBase Port\n\nHere is where the configuration for our humidity example goes. Once we connect to the \nBase Port\n, we will pass a configuration to the humidity driver. With this we can set the update rate, timeout, and temperature configuration.\n\n\ndef config_socket():\n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Pusher socket\n    socket = context.socket(zmq.PUSH)\n    # Connect Pusher to configuration socket\n    socket.connect('tcp://{0}:{1}'.format(matrix_ip, humidity_port))\n\n    # Create a new driver config\n    driver_config_proto = driver_pb2.DriverConfig()\n    # Delay between updates in seconds\n    driver_config_proto.delay_between_updates = 2.0\n    # Timeout after last ping\n    driver_config_proto.timeout_after_last_ping = 6.0\n    # Current temperature in Celsius for calibration\n    driver_config_proto.humidity.current_temperature = 23\n\n    # Send driver configuration through ZMQ socket\n    socket.send(driver_config_proto.SerializeToString())\n\n\n\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThe next step is to connect and send a message to the \nKeep-alive Port\n. That message will grant us a response from the \nData Update Port\n for the current humidity value. The \nutils import\n from the \nInitial Variables\n section takes care of this.\n\n\n\n\n\n\n\n\nError Port\n\nThe \nError Port\n connection is also taken care of by the \nutils import\n. Below we define a function to be called and given any error messages that occur within MATRIX CORE.\n\n\ndef humidity_error_callback(error):\n    # Log error\n    print('{0}'.format(error))\n\n\n\n\n\n\n\n\n\n\n\nData Update Port\n\nA connection to the \nData Update Port\n will allow us to receive the current humidity data we want. The \nutils import\n takes care of this as well. We can define a function and expect humidity data to be passed to it.\n\n\ndef humidity_data_callback(data):\n    # Extract data\n    data = sense_pb2.Humidity().FromString(data[0])\n    # Log data \n    print('{0}'.format(data))\n\n\n\n\nData Output\n\n\n\nThe Python object below is an example output you'll receive from the \nData Update Port\n.\n\n\nhumidity: 29.0049991608\ntemperature: 23.4913063049\ntemperature_raw: 33.1269989014\ntemperature_is_calibrated: true\n\n\n\n\n\n\n\n\n\n\n\nStart Processes\n\nThis is where we begin the asynchronous events for each of the driver ports and where we define the functions we want to use for each port.\n\n\nif __name__ == '__main__':\n    # Initiate asynchronous events\n    ioloop.install()\n    # Send Base Port configuration \n    config_socket()\n    # Start Error Port connection\n    Process(target=register_error_callback, args=(humidity_error_callback, matrix_ip, humidity_port)).start()\n    # Start Data Update Port connection\n    Process(target=register_data_callback, args=(humidity_data_callback, matrix_ip, humidity_port)).start()\n    # Start Keep-alive Port connection\n    Process(target=driver_keep_alive, args=(matrix_ip, humidity_port)).start()", 
            "title": "Humidity"
        }, 
        {
            "location": "/matrix-core/python-examples/humidity/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/python-examples/humidity/#overview", 
            "text": "The Humidity driver allows for:   Reading relative humidity on the board  Obtaining temperature in Celsius and raw values  Calibrating temperature", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/python-examples/humidity/#code-example", 
            "text": "The following sections show how to implement a connection to each of the Humidity driver's ports. You can download this example  here .    Initial Variables \nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Python. We also define a few helpful variables for easy references.  import os # Miscellaneous operating system interface\nimport zmq # Asynchronous messaging framework\nimport time # Time access and conversions\nimport sys # System-specific parameters and functions\nfrom matrix_io.proto.malos.v1 import driver_pb2 # MATRIX Protocol Buffer driver library\nfrom matrix_io.proto.malos.v1 import sense_pb2 # MATRIX Protocol Buffer sensor library\nfrom multiprocessing import Process # Allow for multiple processes at once\nfrom zmq.eventloop import ioloop # Asynchronous events through ZMQ\nmatrix_ip = '127.0.0.1' # Local device ip\nhumidity_port = 20017 # Driver Base port\n# Handy functions for connecting to the keep-Alive, Data Update,   Error port \nfrom utils import driver_keep_alive, register_data_callback, register_error_callback     Base Port \nHere is where the configuration for our humidity example goes. Once we connect to the  Base Port , we will pass a configuration to the humidity driver. With this we can set the update rate, timeout, and temperature configuration.  def config_socket():\n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Pusher socket\n    socket = context.socket(zmq.PUSH)\n    # Connect Pusher to configuration socket\n    socket.connect('tcp://{0}:{1}'.format(matrix_ip, humidity_port))\n\n    # Create a new driver config\n    driver_config_proto = driver_pb2.DriverConfig()\n    # Delay between updates in seconds\n    driver_config_proto.delay_between_updates = 2.0\n    # Timeout after last ping\n    driver_config_proto.timeout_after_last_ping = 6.0\n    # Current temperature in Celsius for calibration\n    driver_config_proto.humidity.current_temperature = 23\n\n    # Send driver configuration through ZMQ socket\n    socket.send(driver_config_proto.SerializeToString())     Keep-alive Port \nThe next step is to connect and send a message to the  Keep-alive Port . That message will grant us a response from the  Data Update Port  for the current humidity value. The  utils import  from the  Initial Variables  section takes care of this.    Error Port \nThe  Error Port  connection is also taken care of by the  utils import . Below we define a function to be called and given any error messages that occur within MATRIX CORE.  def humidity_error_callback(error):\n    # Log error\n    print('{0}'.format(error))     Data Update Port \nA connection to the  Data Update Port  will allow us to receive the current humidity data we want. The  utils import  takes care of this as well. We can define a function and expect humidity data to be passed to it.  def humidity_data_callback(data):\n    # Extract data\n    data = sense_pb2.Humidity().FromString(data[0])\n    # Log data \n    print('{0}'.format(data))", 
            "title": "Code Example"
        }, 
        {
            "location": "/matrix-core/python-examples/imu/", 
            "text": "Inertial Measurement Unit (IMU)\n\n\n\nPython Example\n\n\n\nDevice Compatibility\n\n\n\n\nOverview\n\n\nThe IMU driver reports values for:\n\n\n\n\nYaw, Pitch, and Roll\n\n\nAcceleration for \nx\n, \ny\n, \nz\n axes\n\n\nGyroscope for \nx\n, \ny\n, \nz\n axes\n\n\nMagnetometer for \nx\n, \ny\n, \nz\n axes\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20013\n\n\nKeep-alive port\n: 20014\n\n\nError port\n: 20015\n\n\nData Update port\n: 20016\n\n\n\n\nCode Example\n\n\nThe following sections show how to implement a connection to each of the IMU driver's ports. You can download this example \nhere\n.\n\n\n\n\n\n\n\nInitial Variables\n\nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Python. We also define a few helpful variables for easy references.\n\n\nimport os # Miscellaneous operating system interface\nimport zmq # Asynchronous messaging framework\nimport time # Time access and conversions\nimport sys # System-specific parameters and functions\nfrom matrix_io.proto.malos.v1 import driver_pb2 # MATRIX Protocol Buffer driver library\nfrom matrix_io.proto.malos.v1 import sense_pb2 # MATRIX Protocol Buffer sensor library\nfrom multiprocessing import Process # Allow for multiple processes at once\nfrom zmq.eventloop import ioloop # Asynchronous events through ZMQ\nmatrix_ip = '127.0.0.1' # Local device ip\nimu_port = 20013 # Driver Base port\n# Handy functions for connecting to the keep-Alive, Data Update, \n Error port \nfrom utils import driver_keep_alive, register_data_callback, register_error_callback\n\n\n\n\n\n\n\n\n\n\n\nBase Port\n\nHere is where the configuration for our IMU example goes. Once we connect to the \nBase Port\n, we will pass a configuration to the IMU driver. With this we can set the update rate, timeout, and temperature configuration.\n\n\ndef config_socket():\n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Pusher socket\n    socket = context.socket(zmq.PUSH)\n    # Connect Pusher to configuration socket\n    socket.connect('tcp://{0}:{1}'.format(matrix_ip, imu_port))\n\n    # Create a new driver config\n    driver_config_proto = driver_pb2.DriverConfig()\n    # Delay between updates in seconds\n    driver_config_proto.delay_between_updates = 0.05\n    # Timeout after last ping\n    driver_config_proto.timeout_after_last_ping = 6.0\n\n    # Send driver configuration through ZMQ socket\n    socket.send(driver_config_proto.SerializeToString())\n\n\n\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThe next step is to connect and send a message to the \nKeep-alive Port\n. That message will grant us a response from the \nData Update Port\n for the current IMU value. The \nutils import\n from the \nInitial Variables\n section takes care of this.\n\n\n\n\n\n\n\n\nError Port\n\nThe \nError Port\n connection is also taken care of by the \nutils import\n. Below we define a function to be called and given any error messages that occur within MATRIX CORE.\n\n\ndef imu_error_callback(error):\n    # Log error\n    print('{0}'.format(error))\n\n\n\n\n\n\n\n\n\n\n\nData Update Port\n\nA connection to the \nData Update Port\n will allow us to receive the current IMU data we want. The \nutils import\n takes care of this as well. We can define a function and expect IMU data to be passed to it.\n\n\ndef imu_data_callback(data):\n    # Extract data\n    data = sense_pb2.Imu().FromString(data[0])\n    # Log data \n    print('{0}'.format(data))\n\n\n\n\nData Output\n\n\n\nThe Python object below is an example output you'll receive from the \nData Update Port\n.\n\n\nyaw: 151.336044312\nroll: 0.174327388406\naccel_y: 0.00300000002608\naccel_z: 0.986000001431\ngyro_x: 2.58599996567\ngyro_y: 0.0289999991655\ngyro_z: 0.84399998188\nmag_x: 0.300000011921\nmag_y: 0.16400000453\nmag_z: -0.0780000016093\n\n\n\n\n\n\n\n\n\n\n\nStart Processes\n\nThis is where we begin the asynchronous events for each of the driver ports and where we define the functions we want to use for each port.\n\n\nif __name__ == '__main__':\n    # Initiate asynchronous events\n    ioloop.install()\n    # Send Base Port configuration \n    config_socket()\n    # Start Error Port connection\n    Process(target=register_error_callback, args=(imu_error_callback, matrix_ip, imu_port)).start()\n    # Start Data Update Port connection\n    Process(target=register_data_callback, args=(imu_data_callback, matrix_ip, imu_port)).start()\n    # Start Keep-alive Port connection\n    Process(target=driver_keep_alive, args=(matrix_ip, imu_port)).start()", 
            "title": "IMU"
        }, 
        {
            "location": "/matrix-core/python-examples/imu/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/python-examples/imu/#overview", 
            "text": "The IMU driver reports values for:   Yaw, Pitch, and Roll  Acceleration for  x ,  y ,  z  axes  Gyroscope for  x ,  y ,  z  axes  Magnetometer for  x ,  y ,  z  axes", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/python-examples/imu/#code-example", 
            "text": "The following sections show how to implement a connection to each of the IMU driver's ports. You can download this example  here .    Initial Variables \nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Python. We also define a few helpful variables for easy references.  import os # Miscellaneous operating system interface\nimport zmq # Asynchronous messaging framework\nimport time # Time access and conversions\nimport sys # System-specific parameters and functions\nfrom matrix_io.proto.malos.v1 import driver_pb2 # MATRIX Protocol Buffer driver library\nfrom matrix_io.proto.malos.v1 import sense_pb2 # MATRIX Protocol Buffer sensor library\nfrom multiprocessing import Process # Allow for multiple processes at once\nfrom zmq.eventloop import ioloop # Asynchronous events through ZMQ\nmatrix_ip = '127.0.0.1' # Local device ip\nimu_port = 20013 # Driver Base port\n# Handy functions for connecting to the keep-Alive, Data Update,   Error port \nfrom utils import driver_keep_alive, register_data_callback, register_error_callback     Base Port \nHere is where the configuration for our IMU example goes. Once we connect to the  Base Port , we will pass a configuration to the IMU driver. With this we can set the update rate, timeout, and temperature configuration.  def config_socket():\n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Pusher socket\n    socket = context.socket(zmq.PUSH)\n    # Connect Pusher to configuration socket\n    socket.connect('tcp://{0}:{1}'.format(matrix_ip, imu_port))\n\n    # Create a new driver config\n    driver_config_proto = driver_pb2.DriverConfig()\n    # Delay between updates in seconds\n    driver_config_proto.delay_between_updates = 0.05\n    # Timeout after last ping\n    driver_config_proto.timeout_after_last_ping = 6.0\n\n    # Send driver configuration through ZMQ socket\n    socket.send(driver_config_proto.SerializeToString())     Keep-alive Port \nThe next step is to connect and send a message to the  Keep-alive Port . That message will grant us a response from the  Data Update Port  for the current IMU value. The  utils import  from the  Initial Variables  section takes care of this.    Error Port \nThe  Error Port  connection is also taken care of by the  utils import . Below we define a function to be called and given any error messages that occur within MATRIX CORE.  def imu_error_callback(error):\n    # Log error\n    print('{0}'.format(error))     Data Update Port \nA connection to the  Data Update Port  will allow us to receive the current IMU data we want. The  utils import  takes care of this as well. We can define a function and expect IMU data to be passed to it.  def imu_data_callback(data):\n    # Extract data\n    data = sense_pb2.Imu().FromString(data[0])\n    # Log data \n    print('{0}'.format(data))", 
            "title": "Code Example"
        }, 
        {
            "location": "/matrix-core/python-examples/pressure/", 
            "text": "Pressure\n\n\n\nPython Example\n\n\n\nDevice Compatibility\n\n\n\n\nOverview\n\n\nThe Pressure driver reports values for:\n\n\n\n\nPressure\n\n\nAltitude\n\n\nTemperature\n\n\n\n\n\n\nBased on component location, the temperature values from the \nHumidity driver\n are recommended over the Pressure driver\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20025\n\n\nKeep-alive port\n: 20026\n\n\nError port\n: 20027\n\n\nData Update port\n: 20028\n\n\n\n\nCode Example\n\n\nThe following sections show how to implement a connection to each of the Pressure driver's ports. You can download this example \nhere\n.\n\n\n\n\n\n\n\nInitial Variables\n\nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Python. We also define a few helpful variables for easy references.\n\n\nimport os # Miscellaneous operating system interface\nimport zmq # Asynchronous messaging framework\nimport time # Time access and conversions\nimport sys # System-specific parameters and functions\nfrom matrix_io.proto.malos.v1 import driver_pb2 # MATRIX Protocol Buffer driver library\nfrom matrix_io.proto.malos.v1 import sense_pb2 # MATRIX Protocol Buffer sensor library\nfrom multiprocessing import Process # Allow for multiple processes at once\nfrom zmq.eventloop import ioloop # Asynchronous events through ZMQ\nmatrix_ip = '127.0.0.1' # Local device ip\npressure_port = 20025 # Driver Base port\n# Handy functions for connecting to the keep-Alive, Data Update, \n Error port \nfrom utils import driver_keep_alive, register_data_callback, register_error_callback\n\n\n\n\n\n\n\n\n\n\n\nBase Port\n\nHere is where the configuration for our pressure example goes. Once we connect to the \nBase Port\n, We will pass a configuration to the pressure driver. With this we can set the update rate, timeout, and temperature configuration.\n\n\ndef config_socket():\n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Pusher socket\n    socket = context.socket(zmq.PUSH)\n    # Connect Pusher to configuration socket\n    socket.connect('tcp://{0}:{1}'.format(matrix_ip, pressure_port))\n\n    # Create a new driver config\n    driver_config_proto = driver_pb2.DriverConfig()\n    # Delay between updates in seconds\n    driver_config_proto.delay_between_updates = 1.0\n    # Timeout after last ping\n    driver_config_proto.timeout_after_last_ping = 6.0\n\n    # Send driver configuration through ZMQ socket\n    socket.send(driver_config_proto.SerializeToString())\n\n\n\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThe next step is to connect and send a message to the \nKeep-alive Port\n. That message will grant us a response from the \nData Update Port\n for the current pressure value. The \nutils import\n from the \nInitial Variables\n section takes care of this.\n\n\n\n\n\n\n\n\nError Port\n\nThe \nError Port\n connection is also taken care of by the \nutils import\n. Below we define a function to be called and given any error messages that occur within MATRIX CORE.\n\n\ndef pressure_error_callback(error):\n    # Log error\n    print('{0}'.format(error))\n\n\n\n\n\n\n\n\n\n\n\nData Update Port\n\nA connection to the \nData Update Port\n will allow us to receive the current pressure data we want. The \nutils import\n takes care of this as well. We can define a function and expect pressure data to be passed to it.\n\n\ndef pressure_data_callback(data):\n    # Extract data\n    data = sense_pb2.Pressure().FromString(data[0])\n    # Log data \n    print('{0}'.format(data))\n\n\n\n\nData Output\n\n\n\nThe Python object below is an example output you'll receive from the \nData Update Port\n.\n\n\npressure: 101268.492188\naltitude: 4.81199979782\ntemperature: 33.625\n\n\n\n\n\n\n\n\n\n\n\nStart Processes\n\nThis is where we begin the asynchronous events for each of the driver ports and where we define the functions we want to use for each port.\n\n\nif __name__ == '__main__':\n    # Initiate asynchronous events\n    ioloop.install()\n    # Send Base Port configuration \n    config_socket()\n    # Start Error Port connection\n    Process(target=register_error_callback, args=(pressure_error_callback, matrix_ip, pressure_port)).start()\n    # Start Data Update Port connection\n    Process(target=register_data_callback, args=(pressure_data_callback, matrix_ip, pressure_port)).start()\n    # Start Keep-alive Port connection\n    Process(target=driver_keep_alive, args=(matrix_ip, pressure_port)).start()", 
            "title": "Pressure"
        }, 
        {
            "location": "/matrix-core/python-examples/pressure/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/python-examples/pressure/#overview", 
            "text": "The Pressure driver reports values for:   Pressure  Altitude  Temperature    Based on component location, the temperature values from the  Humidity driver  are recommended over the Pressure driver", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/python-examples/pressure/#code-example", 
            "text": "The following sections show how to implement a connection to each of the Pressure driver's ports. You can download this example  here .    Initial Variables \nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Python. We also define a few helpful variables for easy references.  import os # Miscellaneous operating system interface\nimport zmq # Asynchronous messaging framework\nimport time # Time access and conversions\nimport sys # System-specific parameters and functions\nfrom matrix_io.proto.malos.v1 import driver_pb2 # MATRIX Protocol Buffer driver library\nfrom matrix_io.proto.malos.v1 import sense_pb2 # MATRIX Protocol Buffer sensor library\nfrom multiprocessing import Process # Allow for multiple processes at once\nfrom zmq.eventloop import ioloop # Asynchronous events through ZMQ\nmatrix_ip = '127.0.0.1' # Local device ip\npressure_port = 20025 # Driver Base port\n# Handy functions for connecting to the keep-Alive, Data Update,   Error port \nfrom utils import driver_keep_alive, register_data_callback, register_error_callback     Base Port \nHere is where the configuration for our pressure example goes. Once we connect to the  Base Port , We will pass a configuration to the pressure driver. With this we can set the update rate, timeout, and temperature configuration.  def config_socket():\n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Pusher socket\n    socket = context.socket(zmq.PUSH)\n    # Connect Pusher to configuration socket\n    socket.connect('tcp://{0}:{1}'.format(matrix_ip, pressure_port))\n\n    # Create a new driver config\n    driver_config_proto = driver_pb2.DriverConfig()\n    # Delay between updates in seconds\n    driver_config_proto.delay_between_updates = 1.0\n    # Timeout after last ping\n    driver_config_proto.timeout_after_last_ping = 6.0\n\n    # Send driver configuration through ZMQ socket\n    socket.send(driver_config_proto.SerializeToString())     Keep-alive Port \nThe next step is to connect and send a message to the  Keep-alive Port . That message will grant us a response from the  Data Update Port  for the current pressure value. The  utils import  from the  Initial Variables  section takes care of this.    Error Port \nThe  Error Port  connection is also taken care of by the  utils import . Below we define a function to be called and given any error messages that occur within MATRIX CORE.  def pressure_error_callback(error):\n    # Log error\n    print('{0}'.format(error))     Data Update Port \nA connection to the  Data Update Port  will allow us to receive the current pressure data we want. The  utils import  takes care of this as well. We can define a function and expect pressure data to be passed to it.  def pressure_data_callback(data):\n    # Extract data\n    data = sense_pb2.Pressure().FromString(data[0])\n    # Log data \n    print('{0}'.format(data))", 
            "title": "Code Example"
        }, 
        {
            "location": "/matrix-core/python-examples/uv/", 
            "text": "UV\n\n\n\nPython Example\n\n\n\nDevice Compatibility\n\n\n\n\nOverview\n\n\nThe UV driver reports values for:\n\n\n\n\nUV Index scale used in the United States conforms with international guidelines for UVI reporting established by the World Health Organization.  From \nUV Index Scale\n\n\nUV Risk scale established by World Health Organization. From \nUV Index Scale\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20029\n\n\nKeep-alive port\n: 20030\n\n\nError port\n: 20031\n\n\nData Update port\n: 20032\n\n\n\n\nCode Example\n\n\nThe following sections show how to implement a connection to each of the UV driver's ports. You can download this example \nhere\n.\n\n\n\n\n\n\n\nInitial Variables\n\nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Python. We also define a few helpful variables for easy references.\n\n\nimport os # Miscellaneous operating system interface\nimport zmq # Asynchronous messaging framework\nimport time # Time access and conversions\nimport sys # System-specific parameters and functions\nfrom matrix_io.proto.malos.v1 import driver_pb2 # MATRIX Protocol Buffer driver library\nfrom matrix_io.proto.malos.v1 import sense_pb2 # MATRIX Protocol Buffer sensor library\nfrom multiprocessing import Process # Allow for multiple processes at once\nfrom zmq.eventloop import ioloop # Asynchronous events through ZMQ\nmatrix_ip = '127.0.0.1' # Local device ip\nuv_port = 20029 # Driver Base port\n# Handy functions for connecting to the keep-Alive, Data Update, \n Error port \nfrom utils import driver_keep_alive, register_data_callback, register_error_callback\n\n\n\n\n\n\n\n\n\n\n\nBase Port\n\nHere is where the configuration for our UV example goes. Once we connect to the \nBase Port\n, We will pass a configuration to the UV driver. With this we can set the update rate, timeout, and temperature configuration.\n\n\ndef config_socket():\n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Pusher socket\n    socket = context.socket(zmq.PUSH)\n    # Connect Pusher to configuration socket\n    socket.connect('tcp://{0}:{1}'.format(matrix_ip, uv_port))\n\n    # Create a new driver config\n    driver_config_proto = driver_pb2.DriverConfig()\n    # Delay between updates in seconds\n    driver_config_proto.delay_between_updates = 1.0\n    # Timeout after last ping\n    driver_config_proto.timeout_after_last_ping = 6.0\n\n    # Send driver configuration through ZMQ socket\n    socket.send(driver_config_proto.SerializeToString())\n\n\n\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThe next step is to connect and send a message to the \nKeep-alive Port\n. That message will grant us a response from the \nData Update Port\n for the current UV value. The \nutils import\n from the \nInitial Variables\n section takes care of this.\n\n\n\n\n\n\n\n\nError Port\n\nThe \nError Port\n connection is also taken care of by the \nutils import\n. Below we define a function to be called and given any error messages that occur within MATRIX CORE.\n\n\ndef uv_error_callback(error):\n    # Log error\n    print('{0}'.format(error))\n\n\n\n\n\n\n\n\n\n\n\nData Update Port\n\nA connection to the \nData Update Port\n will allow us to receive the current UV data we want. The \nutils import\n takes care of this as well. We can define a function and expect UV data to be passed to it.\n\n\ndef uv_data_callback(data):\n    # Extract data\n    data = sense_pb2.UV().FromString(data[0])\n    # Log data \n    print('{0}'.format(data))\n\n\n\n\nData Output\n\n\n\nThe Python object below is an example output you'll receive from the \nData Update Port\n.\n\n\nuv_index: 0.00600000005215\noms_risk: \nLow\n\n\n\n\n\n\n\n\n\n\n\n\nStart Processes\n\nThis is where we begin the asynchronous events for each of the driver ports and where we define the functions we want to use for each port.\n\n\nif __name__ == '__main__':\n    # Initiate asynchronous events\n    ioloop.install()\n    # Send Base Port configuration \n    config_socket()\n    # Start Error Port connection\n    Process(target=register_error_callback, args=(uv_error_callback, matrix_ip, uv_port)).start()\n    # Start Data Update Port connection\n    Process(target=register_data_callback, args=(uv_data_callback, matrix_ip, uv_port)).start()\n    # Start Keep-alive Port connection\n    Process(target=driver_keep_alive, args=(matrix_ip, uv_port)).start()", 
            "title": "UV"
        }, 
        {
            "location": "/matrix-core/python-examples/uv/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/python-examples/uv/#overview", 
            "text": "The UV driver reports values for:   UV Index scale used in the United States conforms with international guidelines for UVI reporting established by the World Health Organization.  From  UV Index Scale  UV Risk scale established by World Health Organization. From  UV Index Scale", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/python-examples/uv/#code-example", 
            "text": "The following sections show how to implement a connection to each of the UV driver's ports. You can download this example  here .    Initial Variables \nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Python. We also define a few helpful variables for easy references.  import os # Miscellaneous operating system interface\nimport zmq # Asynchronous messaging framework\nimport time # Time access and conversions\nimport sys # System-specific parameters and functions\nfrom matrix_io.proto.malos.v1 import driver_pb2 # MATRIX Protocol Buffer driver library\nfrom matrix_io.proto.malos.v1 import sense_pb2 # MATRIX Protocol Buffer sensor library\nfrom multiprocessing import Process # Allow for multiple processes at once\nfrom zmq.eventloop import ioloop # Asynchronous events through ZMQ\nmatrix_ip = '127.0.0.1' # Local device ip\nuv_port = 20029 # Driver Base port\n# Handy functions for connecting to the keep-Alive, Data Update,   Error port \nfrom utils import driver_keep_alive, register_data_callback, register_error_callback     Base Port \nHere is where the configuration for our UV example goes. Once we connect to the  Base Port , We will pass a configuration to the UV driver. With this we can set the update rate, timeout, and temperature configuration.  def config_socket():\n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Pusher socket\n    socket = context.socket(zmq.PUSH)\n    # Connect Pusher to configuration socket\n    socket.connect('tcp://{0}:{1}'.format(matrix_ip, uv_port))\n\n    # Create a new driver config\n    driver_config_proto = driver_pb2.DriverConfig()\n    # Delay between updates in seconds\n    driver_config_proto.delay_between_updates = 1.0\n    # Timeout after last ping\n    driver_config_proto.timeout_after_last_ping = 6.0\n\n    # Send driver configuration through ZMQ socket\n    socket.send(driver_config_proto.SerializeToString())     Keep-alive Port \nThe next step is to connect and send a message to the  Keep-alive Port . That message will grant us a response from the  Data Update Port  for the current UV value. The  utils import  from the  Initial Variables  section takes care of this.    Error Port \nThe  Error Port  connection is also taken care of by the  utils import . Below we define a function to be called and given any error messages that occur within MATRIX CORE.  def uv_error_callback(error):\n    # Log error\n    print('{0}'.format(error))     Data Update Port \nA connection to the  Data Update Port  will allow us to receive the current UV data we want. The  utils import  takes care of this as well. We can define a function and expect UV data to be passed to it.  def uv_data_callback(data):\n    # Extract data\n    data = sense_pb2.UV().FromString(data[0])\n    # Log data \n    print('{0}'.format(data))", 
            "title": "Code Example"
        }, 
        {
            "location": "/matrix-core/python-examples/servo/", 
            "text": "Servo\n\n\n\nPython Example\n\n\n\nDevice Compatibility\n\n\n\n\n\n\nOverview\n\n\nThe Servo driver can set the angle of your servos through the pins of your MATRIX device.\n\n\nDevice Pinouts\n:\n\n\n\n\nMATRIX Creator\n\n\nMATRIX Voice\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20045\n\n\nError port\n: 20047\n\n\n\n\nCode Example\n\n\nThe following sections show how to implement a connection to each of the Servo driver's ports. You can download this example \nhere\n.\n\n\n\n\n\n\n\nInitial Variables\n\nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Python. We also define a few helpful variables for easy references.\n\n\nimport os # Miscellaneous operating system interface\nimport zmq # Asynchronous messaging framework\nimport time # Time access and conversions\nimport sys # System-specific parameters and functions\nimport random # Generate pseudo-random numbers\nfrom matrix_io.proto.malos.v1 import driver_pb2 # MATRIX Protocol Buffer driver library\nfrom multiprocessing import Process # Allow for multiple processes at once\nfrom zmq.eventloop import ioloop # Asynchronous events through ZMQ\nmatrix_ip = '127.0.0.1' # Local device ip\nservo_port = 20045 # Driver Base port\n# Handy function for connecting to the Error port \nfrom utils import register_error_callback\n\n\n\n\n\n\n\n\n\n\n\nBase Port\n\nHere is where the configuration for our servo example goes. Once we connect to the \nBase Port\n, we will pass a configuration to the servo driver. With this we can choose the pin we want to edit and the angle to set for it. This example will send random numbers to any servo attached to pin 0. This example has a \nmoveServo()\n function that calls itself to send random angles to your servo.\n\n\ndef send_servo_command(pin):\n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Pusher socket\n    socket = context.socket(zmq.PUSH)\n    # Connect Pusher to configuration socket\n    socket.connect('tcp://{0}:{1}'.format(matrix_ip, servo_port))\n\n    # Create a new driver config\n    servo_config = driver_pb2.DriverConfig()\n    # Set a pin that the servo will operate on\n    servo_config.servo.pin = pin\n\n    # Function to change servo angle\n    def moveServo(angle):\n        # Log angle\n        print('Angle: {0}'.format(angle))\n        # Set the servo's angle in the config\n        servo_config.servo.angle = angle\n        # Serialize the config and send it to the driver\n        socket.send(servo_config.SerializeToString())\n        # Wait for 1 second\n        time.sleep(1)\n        # Run function again with random angle\n        moveServo(random.randint(0, 180))\n\n    # Initial moveServo call\n    moveServo(180)\n\n\n\n\n\n\n\n\n\n\n\nError Port\n\nThe \nError Port\n connection is taken care of by the \nutils import\n. Below we define a function to be called and given any error messages that occur within MATRIX CORE.\n\n\ndef servo_error_callback(error):\n    # Log error\n    print('{0}'.format(error))\n\n\n\n\n\n\n\n\n\n\n\nStart Processes\n\nThis is where we begin the asynchronous events for each of the driver ports used and where we define the functions we want to use for each port.\n\n\nif __name__ == '__main__':\n    # Initiate asynchronous events\n    ioloop.install()\n    # Start Error Port connection\n    Process(target=register_error_callback, args=(servo_error_callback, matrix_ip, servo_port)).start()\n    # Send Base Port configuration \n    try:\n        send_servo_command(0)\n    # Avoid logging servo angle errors on user quiting\n    except KeyboardInterrupt:\n        print(' quit')", 
            "title": "Servo"
        }, 
        {
            "location": "/matrix-core/python-examples/servo/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/python-examples/servo/#overview", 
            "text": "The Servo driver can set the angle of your servos through the pins of your MATRIX device.  Device Pinouts :   MATRIX Creator  MATRIX Voice", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/python-examples/servo/#code-example", 
            "text": "The following sections show how to implement a connection to each of the Servo driver's ports. You can download this example  here .    Initial Variables \nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Python. We also define a few helpful variables for easy references.  import os # Miscellaneous operating system interface\nimport zmq # Asynchronous messaging framework\nimport time # Time access and conversions\nimport sys # System-specific parameters and functions\nimport random # Generate pseudo-random numbers\nfrom matrix_io.proto.malos.v1 import driver_pb2 # MATRIX Protocol Buffer driver library\nfrom multiprocessing import Process # Allow for multiple processes at once\nfrom zmq.eventloop import ioloop # Asynchronous events through ZMQ\nmatrix_ip = '127.0.0.1' # Local device ip\nservo_port = 20045 # Driver Base port\n# Handy function for connecting to the Error port \nfrom utils import register_error_callback     Base Port \nHere is where the configuration for our servo example goes. Once we connect to the  Base Port , we will pass a configuration to the servo driver. With this we can choose the pin we want to edit and the angle to set for it. This example will send random numbers to any servo attached to pin 0. This example has a  moveServo()  function that calls itself to send random angles to your servo.  def send_servo_command(pin):\n    # Define zmq socket\n    context = zmq.Context()\n    # Create a Pusher socket\n    socket = context.socket(zmq.PUSH)\n    # Connect Pusher to configuration socket\n    socket.connect('tcp://{0}:{1}'.format(matrix_ip, servo_port))\n\n    # Create a new driver config\n    servo_config = driver_pb2.DriverConfig()\n    # Set a pin that the servo will operate on\n    servo_config.servo.pin = pin\n\n    # Function to change servo angle\n    def moveServo(angle):\n        # Log angle\n        print('Angle: {0}'.format(angle))\n        # Set the servo's angle in the config\n        servo_config.servo.angle = angle\n        # Serialize the config and send it to the driver\n        socket.send(servo_config.SerializeToString())\n        # Wait for 1 second\n        time.sleep(1)\n        # Run function again with random angle\n        moveServo(random.randint(0, 180))\n\n    # Initial moveServo call\n    moveServo(180)     Error Port \nThe  Error Port  connection is taken care of by the  utils import . Below we define a function to be called and given any error messages that occur within MATRIX CORE.  def servo_error_callback(error):\n    # Log error\n    print('{0}'.format(error))     Start Processes \nThis is where we begin the asynchronous events for each of the driver ports used and where we define the functions we want to use for each port.  if __name__ == '__main__':\n    # Initiate asynchronous events\n    ioloop.install()\n    # Start Error Port connection\n    Process(target=register_error_callback, args=(servo_error_callback, matrix_ip, servo_port)).start()\n    # Send Base Port configuration \n    try:\n        send_servo_command(0)\n    # Avoid logging servo angle errors on user quiting\n    except KeyboardInterrupt:\n        print(' quit')", 
            "title": "Code Example"
        }, 
        {
            "location": "/matrix-core/python-examples/gpio/", 
            "text": "General Purpose Input Output (GPIO)\n\n\n\nPython Example\n\n\n\nDevice Compatibility\n\n\n\n\n\n\nOverview\n\n\nThe GPIO driver supports:\n\n\n\n\nReading pin input\n\n\nSetting pin output\n\n\n\n\nDevice Pinouts\n:\n\n\n\n\nMATRIX Creator\n\n\nMATRIX Voice\n\n\n\n\nAvailable ZeroMQ Ports\n\n\n\n\n\nBase port\n: 20049\n\n\nKeep-alive port\n: 20050\n\n\nError port\n: 20051\n\n\nData Update port\n: 20052\n\n\n\n\nCode Example\n\n\nThe following sections show how to implement a connection to each of the GPIO driver's ports. You can download this example \nhere\n.\n\n\n\n\n\n\n\nInitial Variables\n\nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Python. We also define a few helpful variables for easy references.\n\n\nimport os # Miscellaneous operating system interface\nimport zmq # Asynchronous messaging framework\nimport time # Time access and conversions\nimport sys # System-specific parameters and functions\nfrom matrix_io.proto.malos.v1 import driver_pb2 # MATRIX Protocol Buffer driver library\nfrom matrix_io.proto.malos.v1 import io_pb2 # MATRIX Protocol Buffer sensor library\nfrom multiprocessing import Process # Allow for multiple processes at once\nfrom zmq.eventloop import ioloop # Asynchronous events through ZMQ\nmatrix_ip = '127.0.0.1' # Local device ip\ngpio_port = 20049 # Driver Base port\n# Handy functions for connecting to the keep-Alive, Data Update, \n Error port \nfrom utils import driver_keep_alive, register_data_callback, register_error_callback\n\n\n\n\n\n\n\n\n\n\n\nBase Port\n\nHere is where the configuration for our GPIO example goes. Once we connect to the \nBase Port\n, we will pass a configuration to the GPIO driver. With this, we can set the update rate, timeout, and pin configuration. This example will use \npin: 0\n and use a function toggle the pin state between on\noff.\n\n\n\n\nEach \npin\n will save its last set \nvalue\n until the next device boot.\n\n\n\n\n# Define zmq socket\ncontext = zmq.Context()\n# Create a Pusher socket\nsocket = context.socket(zmq.PUSH)\n# Connect Pusher to configuration socket\nsocket.connect('tcp://{0}:{1}'.format(matrix_ip, gpio_port))\n\n# Configure GPIO update rates and timeout\ndef config_gpio_read():\n    # Create a new driver config\n    config = driver_pb2.DriverConfig()\n    # Delay between updates in seconds\n    config.delay_between_updates = 2.0\n    # Timeout after last ping\n    config.timeout_after_last_ping = 3.5\n    # Send driver configuration through ZMQ socket\n    socket.send(config.SerializeToString())\n\n# Recursive function to toggle pin state\ndef config_gpio_write(pin, value):\n    # Create a new driver config\n    config = driver_pb2.DriverConfig()\n    # set desired pin\n    config.gpio.pin = pin\n    # Set pin mode to output\n    config.gpio.mode = io_pb2.GpioParams.OUTPUT\n    # Set the output of the pin initially\n    config.gpio.value = value%2\n    # Send driver configuration through ZMQ socket\n    socket.send(config.SerializeToString())\n\n    # Wait 2 seconds\n    time.sleep(2)\n    # Increase value and run again\n    value += 1\n    config_gpio_write(0, value%2)\n\n\n\n\n\n\n\n\n\n\n\nKeep-alive Port\n\nThe next step is to connect and send a message to the \nKeep-alive Port\n. That message will grant us a response from the \nData Update Port\n for the current GPIO values. The \nutils import\n from the \nInitial Variables\n section takes care of this.\n\n\n\n\n\n\n\n\nError Port\n\nThe \nError Port\n connection is also taken care of by the \nutils import\n. Below we define a function to be called and given any error messages that occur within MATRIX CORE.\n\n\ndef gpio_error_callback(error):\n    # Log error\n    print('{0}'.format(error))\n\n\n\n\n\n\n\n\n\n\n\nData Update Port\n\nA connection to the \nData Update Port\n is then made to allow us to receive the current IMU data we want. The message received from the GPIO driver is converted into a 16 bit array, named \ngpioValues\n that represents each pin on your MATRIX device.\n\n\ndef gpio_callback(msg):\n    # Extract data\n    data = io_pb2.GpioParams().FromString(msg[0])\n    # Convert GPIO values to 16-bit\n    gpioValues = ('{0:016b}'.format(data.values))\n    # Reverse string for chronological order\n    gpioValues = gpioValues[::-1]\n    # Convert string into an array\n    gpioValues = list(gpioValues)\n    # Log GPIO pin states from gpioValues[0-15]\n    print('GPIO PINS--\n[0-15]\\n{0}'.format(gpioValues))\n\n\n\n\nData Output\n\n\n\nThe Python object below is an example output you'll receive from the \nData Update Port\n. For readability, the code above has converted the output as a 16-bit value and turned it into an array.\n\n\nvalues: 513\n\n\n\n\n\n\n\n\n\n\n\nStart Processes\n\nThis is where we begin the asynchronous events for each of the driver ports and where we define the functions we want to use for each port.\n\n\nif __name__ == \n__main__\n:\n    # Initiate asynchronous events\n    ioloop.install()\n    # Start Error Port connection\n    Process(target=register_error_callback, args=(gpio_error_callback, matrix_ip, gpio_port)).start()\n    # Start Keep-alive Port connection\n    Process(target=driver_keep_alive, args=(matrix_ip, gpio_port, 1)).start()\n    # Start Data Update Port connection\n    Process(target=register_data_callback, args=(gpio_callback, matrix_ip, gpio_port)).start()\n    # Send Base Port configurations\n    try:\n        # Configure GPIO update and timeout\n        config_gpio_read()\n        # Toggle state of selected pin, start with pin on\n        config_gpio_write(0, 1)\n    # Avoid logging GPIO errors on user quiting\n    except KeyboardInterrupt:\n        print('quit')", 
            "title": "GPIO"
        }, 
        {
            "location": "/matrix-core/python-examples/gpio/#device-compatibility", 
            "text": "", 
            "title": "Device Compatibility"
        }, 
        {
            "location": "/matrix-core/python-examples/gpio/#overview", 
            "text": "The GPIO driver supports:   Reading pin input  Setting pin output   Device Pinouts :   MATRIX Creator  MATRIX Voice", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-core/python-examples/gpio/#code-example", 
            "text": "The following sections show how to implement a connection to each of the GPIO driver's ports. You can download this example  here .    Initial Variables \nBefore we go into connecting to each port, the variables defined below are needed in order to access the ZeroMQ and MATRIX Protocol Buffer libraries for Python. We also define a few helpful variables for easy references.  import os # Miscellaneous operating system interface\nimport zmq # Asynchronous messaging framework\nimport time # Time access and conversions\nimport sys # System-specific parameters and functions\nfrom matrix_io.proto.malos.v1 import driver_pb2 # MATRIX Protocol Buffer driver library\nfrom matrix_io.proto.malos.v1 import io_pb2 # MATRIX Protocol Buffer sensor library\nfrom multiprocessing import Process # Allow for multiple processes at once\nfrom zmq.eventloop import ioloop # Asynchronous events through ZMQ\nmatrix_ip = '127.0.0.1' # Local device ip\ngpio_port = 20049 # Driver Base port\n# Handy functions for connecting to the keep-Alive, Data Update,   Error port \nfrom utils import driver_keep_alive, register_data_callback, register_error_callback     Base Port \nHere is where the configuration for our GPIO example goes. Once we connect to the  Base Port , we will pass a configuration to the GPIO driver. With this, we can set the update rate, timeout, and pin configuration. This example will use  pin: 0  and use a function toggle the pin state between on off.   Each  pin  will save its last set  value  until the next device boot.   # Define zmq socket\ncontext = zmq.Context()\n# Create a Pusher socket\nsocket = context.socket(zmq.PUSH)\n# Connect Pusher to configuration socket\nsocket.connect('tcp://{0}:{1}'.format(matrix_ip, gpio_port))\n\n# Configure GPIO update rates and timeout\ndef config_gpio_read():\n    # Create a new driver config\n    config = driver_pb2.DriverConfig()\n    # Delay between updates in seconds\n    config.delay_between_updates = 2.0\n    # Timeout after last ping\n    config.timeout_after_last_ping = 3.5\n    # Send driver configuration through ZMQ socket\n    socket.send(config.SerializeToString())\n\n# Recursive function to toggle pin state\ndef config_gpio_write(pin, value):\n    # Create a new driver config\n    config = driver_pb2.DriverConfig()\n    # set desired pin\n    config.gpio.pin = pin\n    # Set pin mode to output\n    config.gpio.mode = io_pb2.GpioParams.OUTPUT\n    # Set the output of the pin initially\n    config.gpio.value = value%2\n    # Send driver configuration through ZMQ socket\n    socket.send(config.SerializeToString())\n\n    # Wait 2 seconds\n    time.sleep(2)\n    # Increase value and run again\n    value += 1\n    config_gpio_write(0, value%2)     Keep-alive Port \nThe next step is to connect and send a message to the  Keep-alive Port . That message will grant us a response from the  Data Update Port  for the current GPIO values. The  utils import  from the  Initial Variables  section takes care of this.    Error Port \nThe  Error Port  connection is also taken care of by the  utils import . Below we define a function to be called and given any error messages that occur within MATRIX CORE.  def gpio_error_callback(error):\n    # Log error\n    print('{0}'.format(error))     Data Update Port \nA connection to the  Data Update Port  is then made to allow us to receive the current IMU data we want. The message received from the GPIO driver is converted into a 16 bit array, named  gpioValues  that represents each pin on your MATRIX device.  def gpio_callback(msg):\n    # Extract data\n    data = io_pb2.GpioParams().FromString(msg[0])\n    # Convert GPIO values to 16-bit\n    gpioValues = ('{0:016b}'.format(data.values))\n    # Reverse string for chronological order\n    gpioValues = gpioValues[::-1]\n    # Convert string into an array\n    gpioValues = list(gpioValues)\n    # Log GPIO pin states from gpioValues[0-15]\n    print('GPIO PINS-- [0-15]\\n{0}'.format(gpioValues))", 
            "title": "Code Example"
        }, 
        {
            "location": "/matrix-core/troubleshooting/", 
            "text": "Check MATRIX CORE Services are Running\n\n\nRun the following command on your Raspberry Pi to confirm your MATRIX Services are running.\n\n\n$ ps aux | grep 'malos'\n\n\n\n\nThis should return something along the lines of:\n\n\nroot       445  0.0  0.6 126240  5964 ?        Ssl  16:51   0:00 /usr/bin/malos_eye\nroot       449  5.3  0.8 853204  8352 ?        Ssl  16:51   4:41 /usr/bin/malos\n\n\n\n\nRunning Services Manually\n\n\nIf your services are not listed as shown above, you can run them manually using the following terminal commands:\n\n\n# Running MATRIX CORE Sensors \n Comm. Services\n$ malos\n\n# Running MATRIX CORE Vision Services\n$ malos_eye\n\n\n\n\nStopping Services\n\n\n# Stopping the services altogether\n\n$ pkill -9 malos\n$ pkill -9 malos_eye\n\n\n\n\nSupport\n\n\n\n\nPost questions or comments on \ncommunity.matrix.one\n\n\nPost package issues on github under \nmatrix-io\n\n\nSubmit documentation issues or improvements at \nmatrix-io/matrix-documentation", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/matrix-core/troubleshooting/#check-matrix-core-services-are-running", 
            "text": "Run the following command on your Raspberry Pi to confirm your MATRIX Services are running.  $ ps aux | grep 'malos'  This should return something along the lines of:  root       445  0.0  0.6 126240  5964 ?        Ssl  16:51   0:00 /usr/bin/malos_eye\nroot       449  5.3  0.8 853204  8352 ?        Ssl  16:51   4:41 /usr/bin/malos", 
            "title": "Check MATRIX CORE Services are Running"
        }, 
        {
            "location": "/matrix-core/troubleshooting/#running-services-manually", 
            "text": "If your services are not listed as shown above, you can run them manually using the following terminal commands:  # Running MATRIX CORE Sensors   Comm. Services\n$ malos\n\n# Running MATRIX CORE Vision Services\n$ malos_eye", 
            "title": "Running Services Manually"
        }, 
        {
            "location": "/matrix-core/troubleshooting/#stopping-services", 
            "text": "# Stopping the services altogether\n\n$ pkill -9 malos\n$ pkill -9 malos_eye", 
            "title": "Stopping Services"
        }, 
        {
            "location": "/matrix-core/troubleshooting/#support", 
            "text": "Post questions or comments on  community.matrix.one  Post package issues on github under  matrix-io  Submit documentation issues or improvements at  matrix-io/matrix-documentation", 
            "title": "Support"
        }, 
        {
            "location": "/matrix-hal/", 
            "text": "Overview\n\n\nHAL is the lowest-level abstraction for the MATRIX Creator drivers. You can interface directly with HAL, or use the higher level components like \nCORE\n, and \nMATRIX OS\n.\n\n\nTooling\n\n\n\n\nxc3sprog\n - To program the FPGA.\n\n\nOpenOCD\n - To program the microcontroller.\n\n\n\n\nExample Software Integrations\n\n\n\n\nMATRIX CORE\n\n\nMATRIX OS", 
            "title": "MATRIX HAL"
        }, 
        {
            "location": "/matrix-hal/#overview", 
            "text": "HAL is the lowest-level abstraction for the MATRIX Creator drivers. You can interface directly with HAL, or use the higher level components like  CORE , and  MATRIX OS .", 
            "title": "Overview"
        }, 
        {
            "location": "/matrix-hal/#tooling", 
            "text": "xc3sprog  - To program the FPGA.  OpenOCD  - To program the microcontroller.", 
            "title": "Tooling"
        }, 
        {
            "location": "/matrix-hal/#example-software-integrations", 
            "text": "MATRIX CORE  MATRIX OS", 
            "title": "Example Software Integrations"
        }, 
        {
            "location": "/matrix-hal/getting-started/installation/", 
            "text": "Installation\n\n\nInstall from package\n\n\nIf you haven't already installed the required MATRIX packages that configure everything after each boot, please install:\n\n\n# Add repo and key\ncurl https://apt.matrix.one/doc/apt-key.gpg | sudo apt-key add -\necho \ndeb https://apt.matrix.one/raspbian $(lsb_release -sc) main\n | sudo tee /etc/apt/sources.list.d/matrixlabs.list\n\n# Update packages and install\nsudo apt-get update\nsudo apt-get upgrade\n\n# Installation\nsudo apt-get install matrixio-creator-init libmatrixio-creator-hal libmatrixio-creator-hal-dev\n\n# Reboot after installation\nsudo reboot\n\n\n\n\nInstall from source\n\n\nInstall Pre-Requisites\n\n\nsudo apt-get install cmake g++ git libfftw3-dev wiringpi libgflags-dev\n\n\n\n\nClone and Build\n\n\nTo start working with HAL directly, you'll need to clone it and then build it. \n\n\ngit clone https://github.com/matrix-io/matrix-creator-hal.git\ncd matrix-creator-hal\nmkdir build\ncd build\ncmake ..\nmake \n sudo make install\n\n\n\n\nContinue\n\n\n\n\nDo \nHello World\n\n\nTry out the \nhardware demos\n available inside the \ndemos\n directory.\n\n\nWrite and run your own HAL abstraction layer by using our \nComponent\n documentation.", 
            "title": "Installation"
        }, 
        {
            "location": "/matrix-hal/getting-started/installation/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/matrix-hal/getting-started/installation/#install-from-package", 
            "text": "If you haven't already installed the required MATRIX packages that configure everything after each boot, please install:  # Add repo and key\ncurl https://apt.matrix.one/doc/apt-key.gpg | sudo apt-key add -\necho  deb https://apt.matrix.one/raspbian $(lsb_release -sc) main  | sudo tee /etc/apt/sources.list.d/matrixlabs.list\n\n# Update packages and install\nsudo apt-get update\nsudo apt-get upgrade\n\n# Installation\nsudo apt-get install matrixio-creator-init libmatrixio-creator-hal libmatrixio-creator-hal-dev\n\n# Reboot after installation\nsudo reboot", 
            "title": "Install from package"
        }, 
        {
            "location": "/matrix-hal/getting-started/installation/#install-from-source", 
            "text": "", 
            "title": "Install from source"
        }, 
        {
            "location": "/matrix-hal/getting-started/installation/#install-pre-requisites", 
            "text": "sudo apt-get install cmake g++ git libfftw3-dev wiringpi libgflags-dev", 
            "title": "Install Pre-Requisites"
        }, 
        {
            "location": "/matrix-hal/getting-started/installation/#clone-and-build", 
            "text": "To start working with HAL directly, you'll need to clone it and then build it.   git clone https://github.com/matrix-io/matrix-creator-hal.git\ncd matrix-creator-hal\nmkdir build\ncd build\ncmake ..\nmake   sudo make install", 
            "title": "Clone and Build"
        }, 
        {
            "location": "/matrix-hal/getting-started/installation/#continue", 
            "text": "Do  Hello World  Try out the  hardware demos  available inside the  demos  directory.  Write and run your own HAL abstraction layer by using our  Component  documentation.", 
            "title": "Continue"
        }, 
        {
            "location": "/matrix-hal/getting-started/hello-world/", 
            "text": "Basic Examples\n\n\nBasic examples can be found inside the \ndemo\n directory inside of the repository that you cloned during \ninstallation\n. Below we'll get you started with the Everloop demo which should turn the LEDs a \nblue\n color.\n\n\n# should already be in ~/matrix-creator-hal/build directory.\ncd demos\n\n# run the everloop demo\n./everloop_demo\n\n# see the rest of the examples\nls -l\n\n\n\n\nContinue\n\n\nMove onto the rest of the \nC++ examples\n.", 
            "title": "Hello World"
        }, 
        {
            "location": "/matrix-hal/getting-started/hello-world/#basic-examples", 
            "text": "Basic examples can be found inside the  demo  directory inside of the repository that you cloned during  installation . Below we'll get you started with the Everloop demo which should turn the LEDs a  blue  color.  # should already be in ~/matrix-creator-hal/build directory.\ncd demos\n\n# run the everloop demo\n./everloop_demo\n\n# see the rest of the examples\nls -l", 
            "title": "Basic Examples"
        }, 
        {
            "location": "/matrix-hal/getting-started/hello-world/#continue", 
            "text": "Move onto the rest of the  C++ examples .", 
            "title": "Continue"
        }, 
        {
            "location": "/matrix-hal/getting-started/next-steps/", 
            "text": "Next Steps\n\n\nShare your creation\n\n\nShow us know what you've made and we'll share it to our channels! \n\n\n\n\nMATRIX Community\n\n\nTutorials/Projects Pages\n\n\nVideos\n\n\nMATRIX Twitter", 
            "title": "Next Steps"
        }, 
        {
            "location": "/matrix-hal/getting-started/next-steps/#next-steps", 
            "text": "", 
            "title": "Next Steps"
        }, 
        {
            "location": "/matrix-hal/getting-started/next-steps/#share-your-creation", 
            "text": "Show us know what you've made and we'll share it to our channels!    MATRIX Community  Tutorials/Projects Pages  Videos  MATRIX Twitter", 
            "title": "Share your creation"
        }, 
        {
            "location": "/matrix-hal/examples/hardware-demos/", 
            "text": "Sensor Tests\n\n\nWith the following instructions you will be able to run demos for the Everloop LED Array and for the IMU. These demos make use of the \nhardware abstraction layer\n. Make sure you followed the \ngetting started\n steps.\n\n\nThus you can get the required source code and build it:\n\n\n    git clone https://github.com/matrix-io/matrix-creator-hal.git\n    cd matrix-creator-hal\n    mkdir build \n cd build\n    cmake .. \n make\n\n\n\n\nIf the project built with no issues you can run the demos. The demos run for ever, you can terminate them with Control+C.\n\n\nSpinning leds ( \nvideo\n ):\n\n\ndemos/everloop_demo\n\n\n\nArc demo ( \nvideo\n ) :\n\n\ndemos/arc_demo\n\n\n\nCompass demo:\n\n\ndemos/compass_demo\n\nyaw = -116.006  roll = 3.19588  pitch = 0.370596\nyaw = -116.577  roll = 3.61794  pitch = 0.210613\nyaw = -115.649  roll = 3.64227  pitch = 0.334733\nyaw = -115.468  roll = 3.34762  pitch = 0.42658\nyaw = -116.423  roll = 3.49536  pitch = 0.566351\n\n\n\nMicrophones:\n\n\ndemos/mic_demo\n\n52  29  54  74  74  49  39  60\n60  31  52  46  41  55  68  70\n60  44  55  43  53  68  62  62\n45  17  69  54  18  38  74  67\n\n(You get one value for each microphone)\n\n\n\nQuestions? Post them on \nraspberrypi.stackexchange.com\n! Use the tag #matrix-creator", 
            "title": "Sensor Tests"
        }, 
        {
            "location": "/matrix-hal/examples/hardware-demos/#sensor-tests", 
            "text": "With the following instructions you will be able to run demos for the Everloop LED Array and for the IMU. These demos make use of the  hardware abstraction layer . Make sure you followed the  getting started  steps.  Thus you can get the required source code and build it:      git clone https://github.com/matrix-io/matrix-creator-hal.git\n    cd matrix-creator-hal\n    mkdir build   cd build\n    cmake ..   make  If the project built with no issues you can run the demos. The demos run for ever, you can terminate them with Control+C.  Spinning leds (  video  ):  demos/everloop_demo  Arc demo (  video  ) :  demos/arc_demo  Compass demo:  demos/compass_demo\n\nyaw = -116.006  roll = 3.19588  pitch = 0.370596\nyaw = -116.577  roll = 3.61794  pitch = 0.210613\nyaw = -115.649  roll = 3.64227  pitch = 0.334733\nyaw = -115.468  roll = 3.34762  pitch = 0.42658\nyaw = -116.423  roll = 3.49536  pitch = 0.566351  Microphones:  demos/mic_demo\n\n52  29  54  74  74  49  39  60\n60  31  52  46  41  55  68  70\n60  44  55  43  53  68  62  62\n45  17  69  54  18  38  74  67\n\n(You get one value for each microphone)  Questions? Post them on  raspberrypi.stackexchange.com ! Use the tag #matrix-creator", 
            "title": "Sensor Tests"
        }, 
        {
            "location": "/help/", 
            "text": "Support\n\n\n\n\nPost questions or comments on \ncommunity.matrix.one\n\n\nAlert issues on our \nGitHub\n under the corresponding repository\n\n\nSubmit documentation issues or improvements to the \nMATRIX Documentation Repository", 
            "title": "Support"
        }, 
        {
            "location": "/help/#support", 
            "text": "Post questions or comments on  community.matrix.one  Alert issues on our  GitHub  under the corresponding repository  Submit documentation issues or improvements to the  MATRIX Documentation Repository", 
            "title": "Support"
        }
    ]
}