{
    "docs": [
        {
            "location": "/", 
            "text": "Support\n\n\n\n\nPost questions or comments on \ncommunity.matrix.one\n\n\nPost package issues on github under \nmatrix-io\n\n\nSubmit documentation issues or improvements at \nmatrix-io/matrix-documentation\n\n\n\n\nInstallation\n\n\nLocal Machine Setup\n\n\nImportant:    \nKeep in mind that MATRIX CLI is intended to run on your host computer, not directly on the Pi running MOS.\n\n\nNote 1:\n Pre-requisite of \nNodeJS\n on the client computer.\n\n\n\n\nInstall \nMATRIX CLI\n via npm \nsudo npm install -g matrix-cli\n.\n\n\nTarget the proper environment \nmatrix set env rc\n.\n\n\nWith MATRIX CLI installed on your computer, register an account with MATRIX via \nmatrix register\n.\n\n\nLog into your account using \nmatrix login\n.\n\n\nOnce registered an account, run \nmatrix register device\n.\n\n\nEnter a \ndevice name\n and (optional) \ndevice description\n.\n\n\nAfter a few moments you will be provided with a \nMATRIX_DEVICE_ID\n and \nMATRIX_DEVICE_SECRET\n.\n\n\nSelect your device using \nmatrix use\n, and enter your device ID. Command examples will be provided for easy copy paste.\n\n\n\n\n# example variables generated via registration, yours will be different\nexport MATRIX_DEVICE_ID=dc7a1a71be2d\nexport MATRIX_DEVICE_SECRET=08629018e9d77h15i5n0t4r3alz0f06cd4f7e5544272b\n\n\n\n\nSave these for the Configure ENV Variables step, near the end.\n\n\nNote 2:\n Watch \nGetting Started\n, \nRegistration\n and \nInstallation\n of MATRIX OS and MATRIX CLI on Youtube. \nWatch now\n.\n\n\nRaspberry Pi Setup\n\n\nThe following installation configures the MATRIX Creator, as well as installs the MATRIX Open Source platform.\n\n\n# Does everything including reboot.\ncurl https://raw.githubusercontent.com/matrix-io/matrix-creator-quickstart/master/install.sh | sh\n\n\n\n\nConfigure ENV variables\n\n\n\n\nOn the Pi, inside your \n~\n folder, create a file named \n.envrc\n with the variables from the Matrix CLI Setup above.  \n\n\n\n\n# in .envrc file or place in ~/.bash_profile to auto configure\nexport MATRIX_DEVICE_ID=dc7a1a71be2d\nexport MATRIX_DEVICE_SECRET=08629018e9d77h15i5n0t4r3alz0f06cd4f7e5544272b\n\n\n\n\n\n\nsource .envrc\n from \n~\n to make the variables available to the shell.\n\n\n\n\nRun MATRIX OS\n\n\n\n\nFrom the \nmatrix-os\n folder. \nNODE_ENV=rc node index.js\n. While in alpha, we are running in our Release Candidate environment.\n\n\n\n\nReturning to local computer\n\n\n\n\nIf you didn't do it earlier, \nmatrix use $deviceId\n\n\nRun \nmatrix\n, verify you are on \nrc\n environment, your user is correct, and your selected device is correct.\n\n\nNow you can issue commands and deploy apps to your MATRIX OS from the \nMATRIX CLI\n.\n\n\n\n\nCustom Raspbian Package\n\n\nWe'll be making a custom raspbian package available for download very soon!", 
            "title": "Installation"
        }, 
        {
            "location": "/#support", 
            "text": "Post questions or comments on  community.matrix.one  Post package issues on github under  matrix-io  Submit documentation issues or improvements at  matrix-io/matrix-documentation", 
            "title": "Support"
        }, 
        {
            "location": "/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/#local-machine-setup", 
            "text": "", 
            "title": "Local Machine Setup"
        }, 
        {
            "location": "/#important-keep-in-mind-that-matrix-cli-is-intended-to-run-on-your-host-computer-not-directly-on-the-pi-running-mos", 
            "text": "Note 1:  Pre-requisite of  NodeJS  on the client computer.   Install  MATRIX CLI  via npm  sudo npm install -g matrix-cli .  Target the proper environment  matrix set env rc .  With MATRIX CLI installed on your computer, register an account with MATRIX via  matrix register .  Log into your account using  matrix login .  Once registered an account, run  matrix register device .  Enter a  device name  and (optional)  device description .  After a few moments you will be provided with a  MATRIX_DEVICE_ID  and  MATRIX_DEVICE_SECRET .  Select your device using  matrix use , and enter your device ID. Command examples will be provided for easy copy paste.   # example variables generated via registration, yours will be different\nexport MATRIX_DEVICE_ID=dc7a1a71be2d\nexport MATRIX_DEVICE_SECRET=08629018e9d77h15i5n0t4r3alz0f06cd4f7e5544272b  Save these for the Configure ENV Variables step, near the end.  Note 2:  Watch  Getting Started ,  Registration  and  Installation  of MATRIX OS and MATRIX CLI on Youtube.  Watch now .", 
            "title": "Important:    Keep in mind that MATRIX CLI is intended to run on your host computer, not directly on the Pi running MOS."
        }, 
        {
            "location": "/#raspberry-pi-setup", 
            "text": "The following installation configures the MATRIX Creator, as well as installs the MATRIX Open Source platform.  # Does everything including reboot.\ncurl https://raw.githubusercontent.com/matrix-io/matrix-creator-quickstart/master/install.sh | sh", 
            "title": "Raspberry Pi Setup"
        }, 
        {
            "location": "/#configure-env-variables", 
            "text": "On the Pi, inside your  ~  folder, create a file named  .envrc  with the variables from the Matrix CLI Setup above.     # in .envrc file or place in ~/.bash_profile to auto configure\nexport MATRIX_DEVICE_ID=dc7a1a71be2d\nexport MATRIX_DEVICE_SECRET=08629018e9d77h15i5n0t4r3alz0f06cd4f7e5544272b   source .envrc  from  ~  to make the variables available to the shell.", 
            "title": "Configure ENV variables"
        }, 
        {
            "location": "/#run-matrix-os", 
            "text": "From the  matrix-os  folder.  NODE_ENV=rc node index.js . While in alpha, we are running in our Release Candidate environment.", 
            "title": "Run MATRIX OS"
        }, 
        {
            "location": "/#returning-to-local-computer", 
            "text": "If you didn't do it earlier,  matrix use $deviceId  Run  matrix , verify you are on  rc  environment, your user is correct, and your selected device is correct.  Now you can issue commands and deploy apps to your MATRIX OS from the  MATRIX CLI .", 
            "title": "Returning to local computer"
        }, 
        {
            "location": "/#custom-raspbian-package", 
            "text": "We'll be making a custom raspbian package available for download very soon!", 
            "title": "Custom Raspbian Package"
        }, 
        {
            "location": "/upgrades/", 
            "text": "Support\n\n\n\n\nPost questions or comments on \ncommunity.matrix.one\n\n\nPost package issues on github under \nmatrix-io\n\n\nSubmit documentation issues or improvements at \nmatrix-io/matrix-documentation\n\n\n\n\nUpgrade\n\n\nBecause we are currently in Alpha stage, we are constantly updating and releasing new versions of our debian packages. To keep up to date, please regularly run:\n\n\nMATRIX Creator Packages\n\n\nsudo apt-get update \n sudo apt-get upgrade\nsudo shutdown -r now //sudo reboot\n\n\n\n\nMATRIX OS\n\n\nBypass Automatic Upgrades\n\n\nThe MATRIX OS upgrades packages, and systems, automagically on initialization. If you would like to bypass this, set the \nNO_UPGRADE\n environment flag to true.\n\n\nNO_UPGRADE=true node index.js\n\n\n\n\nManual Upgrades\n\n\nOn your Raspberry Pi, execute the following commands to make sure your hardware is up to date manually.\n\n\ncd matrix-os\ngit checkout master\ngit pull\nnpm install\nnpm upgrade matrix-app-config-helper matrix-firebase matrix-node-sdk matrix-eventfilter\ngit submodule update --init\n\n\n\n\nMATRIX CLI\n\n\nOn your PC, Linux, or Mac computer, you can update your Command Line Tools by just making sure you have installed the latest.\n\n\nsudo npm install matrix-cli -g", 
            "title": "Upgrades"
        }, 
        {
            "location": "/upgrades/#support", 
            "text": "Post questions or comments on  community.matrix.one  Post package issues on github under  matrix-io  Submit documentation issues or improvements at  matrix-io/matrix-documentation", 
            "title": "Support"
        }, 
        {
            "location": "/upgrades/#upgrade", 
            "text": "Because we are currently in Alpha stage, we are constantly updating and releasing new versions of our debian packages. To keep up to date, please regularly run:", 
            "title": "Upgrade"
        }, 
        {
            "location": "/upgrades/#matrix-creator-packages", 
            "text": "sudo apt-get update   sudo apt-get upgrade\nsudo shutdown -r now //sudo reboot", 
            "title": "MATRIX Creator Packages"
        }, 
        {
            "location": "/upgrades/#matrix-os", 
            "text": "", 
            "title": "MATRIX OS"
        }, 
        {
            "location": "/upgrades/#bypass-automatic-upgrades", 
            "text": "The MATRIX OS upgrades packages, and systems, automagically on initialization. If you would like to bypass this, set the  NO_UPGRADE  environment flag to true.  NO_UPGRADE=true node index.js", 
            "title": "Bypass Automatic Upgrades"
        }, 
        {
            "location": "/upgrades/#manual-upgrades", 
            "text": "On your Raspberry Pi, execute the following commands to make sure your hardware is up to date manually.  cd matrix-os\ngit checkout master\ngit pull\nnpm install\nnpm upgrade matrix-app-config-helper matrix-firebase matrix-node-sdk matrix-eventfilter\ngit submodule update --init", 
            "title": "Manual Upgrades"
        }, 
        {
            "location": "/upgrades/#matrix-cli", 
            "text": "On your PC, Linux, or Mac computer, you can update your Command Line Tools by just making sure you have installed the latest.  sudo npm install matrix-cli -g", 
            "title": "MATRIX CLI"
        }, 
        {
            "location": "/CLI/overview/", 
            "text": "Overview\n\n\nInstallation\n\n\nInstallation, Registration, Commands\n\n\nApplications\n\n\nApplication Management\n\n\nDevices\n\n\nDevice Management\n\n\nExamples\n\n\nExample Workflows\n\n\nTroubleshooting\n\n\nTroubleshooting", 
            "title": "Overview"
        }, 
        {
            "location": "/CLI/overview/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/CLI/overview/#installation", 
            "text": "Installation, Registration, Commands", 
            "title": "Installation"
        }, 
        {
            "location": "/CLI/overview/#applications", 
            "text": "Application Management", 
            "title": "Applications"
        }, 
        {
            "location": "/CLI/overview/#devices", 
            "text": "Device Management", 
            "title": "Devices"
        }, 
        {
            "location": "/CLI/overview/#examples", 
            "text": "Example Workflows", 
            "title": "Examples"
        }, 
        {
            "location": "/CLI/overview/#troubleshooting", 
            "text": "Troubleshooting", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/CLI/installation/", 
            "text": "Installation\n\n\nInstalling MATRIX CLI is quite easy. However, you do need to have a couple of other things installed first:\n\n\n\n\nNode.js\n\n\nGit\n\n\n\n\nIf your computer already has these, congratulations! This will make the \nmatrix\n command available in your terminal. Just install MATRIX CLI with \nnpm\n and you're good to go.\n\n\nRemember not to install MATRIX CLI  on a Raspberry PI\n\n\nnpm install -g matrix-cli\n\n\n\n\nEnvironment Configuration\n\n\nPoints the CLI to the right servers. If you have errors right off the bat, try this first.\n\n\nmatrix set env rc\n\n\n\n\nRegistration\n\n\nUser registration\n\n\nIf you do not have an AdMobilize MATRIX account, use:\n\n\nmatrix register\n\n\n\n\nCheck your email to confirm the account then you can login.\n\n\nDevice registration\n\n\nIn order to set up your device, use:\n\n\nmatrix register device\n\n\n\n\nThis will ask for your device details and then provide you with an id and a secret, you need to set those ENV vars in your device to link it to our platform.  \n\n\nHelp\n\n\nFor a list of all the available options, use:\n\n\nmatrix", 
            "title": "Installation"
        }, 
        {
            "location": "/CLI/installation/#installation", 
            "text": "Installing MATRIX CLI is quite easy. However, you do need to have a couple of other things installed first:   Node.js  Git   If your computer already has these, congratulations! This will make the  matrix  command available in your terminal. Just install MATRIX CLI with  npm  and you're good to go.  Remember not to install MATRIX CLI  on a Raspberry PI  npm install -g matrix-cli", 
            "title": "Installation"
        }, 
        {
            "location": "/CLI/installation/#environment-configuration", 
            "text": "Points the CLI to the right servers. If you have errors right off the bat, try this first.  matrix set env rc", 
            "title": "Environment Configuration"
        }, 
        {
            "location": "/CLI/installation/#registration", 
            "text": "", 
            "title": "Registration"
        }, 
        {
            "location": "/CLI/installation/#user-registration", 
            "text": "If you do not have an AdMobilize MATRIX account, use:  matrix register  Check your email to confirm the account then you can login.", 
            "title": "User registration"
        }, 
        {
            "location": "/CLI/installation/#device-registration", 
            "text": "In order to set up your device, use:  matrix register device  This will ask for your device details and then provide you with an id and a secret, you need to set those ENV vars in your device to link it to our platform.", 
            "title": "Device registration"
        }, 
        {
            "location": "/CLI/installation/#help", 
            "text": "For a list of all the available options, use:  matrix", 
            "title": "Help"
        }, 
        {
            "location": "/CLI/apps/", 
            "text": "Applications\n\n\nApplications are how the MATRIX OS interfaces with the MATRIX Creator hardware. Applications are a top-level abstraction of MALOS interface. Applications are developed primarly in Javascript (supported), and can leverage other languages (like Python) with non-standard implementations.\n\n\nSearch\n\n\n# Find MatrixOS apps for a keyword\nmatrix search keyword\n\n\n\n\nAll the following commands require an active MatrixOS to be specified with \nmatrix use\n.\n\n\nInstall\n\n\n# Install an app from the store to MatrixOS\nmatrix install appName\n\n\n\n\nUninstall\n\n\n# Uninstall an app from your device\nmatrix uninstall appName\n\n\n\n\nCreate\n\n\n#creates a folder with a base matrix app template\nmatrix create appName\n\n\n\n\nSee \nMatrix OS \n API\n for more information about writing MatrixOS apps.\n\n\nDeploy\n\n\n# uploads app folder to MatrixOS\nmatrix deploy appName\n\n\n\n\nRun\n\n\nmatrix start appName\n\n\n\n\nStop\n\n\nmatrix stop appName\n\n\n\n\nRestart\n\n\nmatrix restart appName", 
            "title": "Apps"
        }, 
        {
            "location": "/CLI/apps/#applications", 
            "text": "Applications are how the MATRIX OS interfaces with the MATRIX Creator hardware. Applications are a top-level abstraction of MALOS interface. Applications are developed primarly in Javascript (supported), and can leverage other languages (like Python) with non-standard implementations.", 
            "title": "Applications"
        }, 
        {
            "location": "/CLI/apps/#search", 
            "text": "# Find MatrixOS apps for a keyword\nmatrix search keyword  All the following commands require an active MatrixOS to be specified with  matrix use .", 
            "title": "Search"
        }, 
        {
            "location": "/CLI/apps/#install", 
            "text": "# Install an app from the store to MatrixOS\nmatrix install appName", 
            "title": "Install"
        }, 
        {
            "location": "/CLI/apps/#uninstall", 
            "text": "# Uninstall an app from your device\nmatrix uninstall appName", 
            "title": "Uninstall"
        }, 
        {
            "location": "/CLI/apps/#create", 
            "text": "#creates a folder with a base matrix app template\nmatrix create appName  See  Matrix OS   API  for more information about writing MatrixOS apps.", 
            "title": "Create"
        }, 
        {
            "location": "/CLI/apps/#deploy", 
            "text": "# uploads app folder to MatrixOS\nmatrix deploy appName", 
            "title": "Deploy"
        }, 
        {
            "location": "/CLI/apps/#run", 
            "text": "matrix start appName", 
            "title": "Run"
        }, 
        {
            "location": "/CLI/apps/#stop", 
            "text": "matrix stop appName", 
            "title": "Stop"
        }, 
        {
            "location": "/CLI/apps/#restart", 
            "text": "matrix restart appName", 
            "title": "Restart"
        }, 
        {
            "location": "/CLI/device/", 
            "text": "Devices\n\n\nDevices are virtual or physical containers where applications can be installed. A typical device would be a raspberry pi.\n\n\nDevice Registration\n\n\n# Find MatrixOS apps for a keyword\nmatrix register device\n\n\n\n\nList your Devices\n\n\nmatrix list devices\n\n\n\n\nUse a Specific Device\n\n\n# Choosing a device identifier from the list above\nmatrix use \ndevice-id", 
            "title": "Devices"
        }, 
        {
            "location": "/CLI/device/#devices", 
            "text": "Devices are virtual or physical containers where applications can be installed. A typical device would be a raspberry pi.", 
            "title": "Devices"
        }, 
        {
            "location": "/CLI/device/#device-registration", 
            "text": "# Find MatrixOS apps for a keyword\nmatrix register device", 
            "title": "Device Registration"
        }, 
        {
            "location": "/CLI/device/#list-your-devices", 
            "text": "matrix list devices", 
            "title": "List your Devices"
        }, 
        {
            "location": "/CLI/device/#use-a-specific-device", 
            "text": "# Choosing a device identifier from the list above\nmatrix use  device-id", 
            "title": "Use a Specific Device"
        }, 
        {
            "location": "/CLI/example/", 
            "text": "Example Workflows\n\n\nRegister an Account\n\n\nmatrix register\n\n\n\n\nSetup New Device\n\n\nSet up a brand new device. This flow provides Device ID and Secret. Save these for future use, you are only given this once.\n\n\nmatrix login\nmatrix device register\n\n# use provided id\nmatrix use \ndeviceId\n\n\n# should show new device\nmatrix list devices\n\n\n\n\nApp Deployment\n\n\nDeploys an application you are developing locally.\n\n\nmatrix login\nmatrix list devices\nmatrix use \ndeviceId\n\n\nmatrix deploy frontdoor\n\n\n\n\nApp Installation\n\n\nInstalls an application that you have published locally.\n\n\nmatrix login\nmatrix list devices\nmatrix use \ndeviceId\n\n\nmatrix install frontdoor\nmatrix set config frontdoor settings.lock.apiKey=ABC123FED\nmatrix start frontdoor\n\n\n\n\nApp Publishing\n\n\nPublishes an application to the store.\n\n\nmatrix login\nmatrix list devices\nmatrix use \ndeviceId\n\n\nmatrix publish frontdoor\nmatrix install frontdoor\nmatrix start frontdoor\n\n\n\n\nUsing the Simulator\n\n\nCreates a local simulator to interface with. Currently has a dependency of Docker \n Docker-Machine.\n\n\nmatrix login\nmatrix sim init\nmatrix use simid-abc123\nmatrix sim start\n\n# makes testapp/ with app scaffold\nmatrix create testapp\n\n# places testapp/ onto matrixos\nmatrix deploy testapp\n\n# starts testapp/\nmatrix start testapp", 
            "title": "Examples"
        }, 
        {
            "location": "/CLI/example/#example-workflows", 
            "text": "", 
            "title": "Example Workflows"
        }, 
        {
            "location": "/CLI/example/#register-an-account", 
            "text": "matrix register", 
            "title": "Register an Account"
        }, 
        {
            "location": "/CLI/example/#setup-new-device", 
            "text": "Set up a brand new device. This flow provides Device ID and Secret. Save these for future use, you are only given this once.  matrix login\nmatrix device register\n\n# use provided id\nmatrix use  deviceId \n\n# should show new device\nmatrix list devices", 
            "title": "Setup New Device"
        }, 
        {
            "location": "/CLI/example/#app-deployment", 
            "text": "Deploys an application you are developing locally.  matrix login\nmatrix list devices\nmatrix use  deviceId \n\nmatrix deploy frontdoor", 
            "title": "App Deployment"
        }, 
        {
            "location": "/CLI/example/#app-installation", 
            "text": "Installs an application that you have published locally.  matrix login\nmatrix list devices\nmatrix use  deviceId \n\nmatrix install frontdoor\nmatrix set config frontdoor settings.lock.apiKey=ABC123FED\nmatrix start frontdoor", 
            "title": "App Installation"
        }, 
        {
            "location": "/CLI/example/#app-publishing", 
            "text": "Publishes an application to the store.  matrix login\nmatrix list devices\nmatrix use  deviceId \n\nmatrix publish frontdoor\nmatrix install frontdoor\nmatrix start frontdoor", 
            "title": "App Publishing"
        }, 
        {
            "location": "/CLI/example/#using-the-simulator", 
            "text": "Creates a local simulator to interface with. Currently has a dependency of Docker   Docker-Machine.  matrix login\nmatrix sim init\nmatrix use simid-abc123\nmatrix sim start\n\n# makes testapp/ with app scaffold\nmatrix create testapp\n\n# places testapp/ onto matrixos\nmatrix deploy testapp\n\n# starts testapp/\nmatrix start testapp", 
            "title": "Using the Simulator"
        }, 
        {
            "location": "/intro/cli-troubleshooting/", 
            "text": "Troubleshooting\n\n\nRun \nDEBUG=* matrix ...\n to see more information.\n\n\nYou will be notified if a dependency needs to be updated.\n\n\nnpm update\n will manually update dependencies.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/intro/cli-troubleshooting/#troubleshooting", 
            "text": "Run  DEBUG=* matrix ...  to see more information.  You will be notified if a dependency needs to be updated.  npm update  will manually update dependencies.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/API/overview/", 
            "text": "Overview\n\n\nMATRIX OS\n\n\nMATRIX OS is an open source operating system for hosting IoT applications. MATRIX OS runs on node.js, but applications will be language-agnostic, as we finish writing an API and SDK for different languages. Fundamentally, MATRIX OS applications logically connect hardware and machine learning abstractions. In this way, you can connect the output from a computer vision system to drive real-world behavior in the form of hardware signaling.\n\n\nApplications\n\n\nApplications, on a fundamental level, provides logical connections between physical data producers and consumers.  \n\n\nSo it makes sense to think of information as streams and filters instead of objects and trees. JavaScript has an elegant approach to data filtering through callbacks and first-order func \n\n\nApp API\n\n\nSensors\n\n\nSensor interfaces and data structures.\n\n\nEverloop\n\n\nEverloop interface.\n\n\nFilters\n\n\nFilters interface for Sensors, Computer Vision, etc...\n\n\nComputer Vision\n\n\nComputer Vision services.\n\n\nMicrophones\n\n\nMicrophone Services.\n\n\nIR TX/RX\n\n\nIR receiving and transmitter services.\n\n\nGPIO\n\n\nGPIO interfaces.\n\n\nServos\n\n\nServo interfaces.\n\n\nNFC\n\n\nNFC interfaces.\n\n\nZigbee\n\n\nZigbee interfaces.\n\n\nZ-wave\n\n\nZ-wave interfaces.\n\n\nConfiguration\n\n\nData Types\n\n\nData structures and how to save to the infrastructure.\n\n\nScreens\n\n\nDashboard creation and how to structure your widgets.\n\n\nFilters\n\n\nDashboard filter configuration.\n\n\nWidgets\n\n\nDashboard widget configuration.\n\n\nServices\n\n\nAvailable infrastructure services.\n\n\nTroubleshooting\n\n\nTroubleshooting", 
            "title": "Overview"
        }, 
        {
            "location": "/API/overview/#overview", 
            "text": "", 
            "title": "Overview"
        }, 
        {
            "location": "/API/overview/#matrix-os", 
            "text": "MATRIX OS is an open source operating system for hosting IoT applications. MATRIX OS runs on node.js, but applications will be language-agnostic, as we finish writing an API and SDK for different languages. Fundamentally, MATRIX OS applications logically connect hardware and machine learning abstractions. In this way, you can connect the output from a computer vision system to drive real-world behavior in the form of hardware signaling.", 
            "title": "MATRIX OS"
        }, 
        {
            "location": "/API/overview/#applications", 
            "text": "Applications, on a fundamental level, provides logical connections between physical data producers and consumers.    So it makes sense to think of information as streams and filters instead of objects and trees. JavaScript has an elegant approach to data filtering through callbacks and first-order func", 
            "title": "Applications"
        }, 
        {
            "location": "/API/overview/#app-api", 
            "text": "", 
            "title": "App API"
        }, 
        {
            "location": "/API/overview/#sensors", 
            "text": "Sensor interfaces and data structures.", 
            "title": "Sensors"
        }, 
        {
            "location": "/API/overview/#everloop", 
            "text": "Everloop interface.", 
            "title": "Everloop"
        }, 
        {
            "location": "/API/overview/#filters", 
            "text": "Filters interface for Sensors, Computer Vision, etc...", 
            "title": "Filters"
        }, 
        {
            "location": "/API/overview/#computer-vision", 
            "text": "Computer Vision services.", 
            "title": "Computer Vision"
        }, 
        {
            "location": "/API/overview/#microphones", 
            "text": "Microphone Services.", 
            "title": "Microphones"
        }, 
        {
            "location": "/API/overview/#ir-txrx", 
            "text": "IR receiving and transmitter services.", 
            "title": "IR TX/RX"
        }, 
        {
            "location": "/API/overview/#gpio", 
            "text": "GPIO interfaces.", 
            "title": "GPIO"
        }, 
        {
            "location": "/API/overview/#servos", 
            "text": "Servo interfaces.", 
            "title": "Servos"
        }, 
        {
            "location": "/API/overview/#nfc", 
            "text": "NFC interfaces.", 
            "title": "NFC"
        }, 
        {
            "location": "/API/overview/#zigbee", 
            "text": "Zigbee interfaces.", 
            "title": "Zigbee"
        }, 
        {
            "location": "/API/overview/#z-wave", 
            "text": "Z-wave interfaces.", 
            "title": "Z-wave"
        }, 
        {
            "location": "/API/overview/#configuration", 
            "text": "", 
            "title": "Configuration"
        }, 
        {
            "location": "/API/overview/#data-types", 
            "text": "Data structures and how to save to the infrastructure.", 
            "title": "Data Types"
        }, 
        {
            "location": "/API/overview/#screens", 
            "text": "Dashboard creation and how to structure your widgets.", 
            "title": "Screens"
        }, 
        {
            "location": "/API/overview/#filters_1", 
            "text": "Dashboard filter configuration.", 
            "title": "Filters"
        }, 
        {
            "location": "/API/overview/#widgets", 
            "text": "Dashboard widget configuration.", 
            "title": "Widgets"
        }, 
        {
            "location": "/API/overview/#services", 
            "text": "Available infrastructure services.", 
            "title": "Services"
        }, 
        {
            "location": "/API/overview/#troubleshooting", 
            "text": "Troubleshooting", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/intro/app-publishing/", 
            "text": "Publishing your Application\n\n\nApp Store\n\n\nhttp://apps.matrix.one\n\n\nThree Steps to Distribution\n\n\n\n\nmatrix create\n - Make your application\n\n\nmatrix deploy\n - Test your application\n\n\nmatrix publish\n - Publish on the app Store\n\n\n\n\nGuidelines\n\n\nYour application must do only what it claims to do with the name, description and README.md.\n\n\nAll sensors, integrations and computer vision usage must be registered in the \nconfig.yaml\n, and will be authorized by users on install.\n\n\nAll applications will be code-reviewed and are subject to removal at any time.\n\n\nBefore publishing an application.\n\n\nEnsure Meta Information is Accurate\n\n\nname\n and \ndescription\n must be included in your config.yaml. If you want to use a multiword application name, provide a \ndisplayName\n with a correlating \nname\n. Users will use \nname\n when \nmatrix install\ning.\n\n\nThe contents of \nREADME.md\n will be shown on the app detail page, along with images provided\n\nimageUrls\n will be used on the detail page\n\n\ngalleryUrl\n will be used on the main App Store page, or the first item in \nimageUrls\n will be used\n\n\nkeywords\n are used to tag your application and will be used to return your application on searches for these keywords.\n\n\ncategories\n are not yet formalized, but will divide the store listings. Submitting proposed app categories will inform this process.\n\n\nexample config.yaml\n\nname: example-app\ndisplayName: The Example App\ndescription: An example application config.yaml.\n\nimageUrls:\n  - http://image.com/1\n  - http://image.com/2\n\ngalleryUrl: http://image.com/3\n\nkeywords:\n  - example\n  - configuration\n\ncategories:\n  - entertainment\n  - development\n\n\n\n\nEnsure Components are Setup\n\n\nAll applications which use events, CV or sensors, must register these in the config file.\n\n\nevents\n are registered as follows:\n\n\nEvents\n\n\nevents:\n  - face-recognized\n  - locked-door\n\n\n\n\nSensors\n\n\nsensors:\n  - temperature\n  - uv\n\n\n\n\nComputer Vision\n\n\nservices:\n  faceService:\n    engine: detection\n    type: face\n\n\n\n\nA user will be required to grant an application permissions before installing. A user may install an app with any or all permissions enabled.\n\n\nTest your Application\n\n\nUse \nmatrix deploy\n to test your application before publishing. Make sure it functions as intended. Share a video of your creation with us!", 
            "title": "App Publishing"
        }, 
        {
            "location": "/intro/app-publishing/#publishing-your-application", 
            "text": "", 
            "title": "Publishing your Application"
        }, 
        {
            "location": "/intro/app-publishing/#app-store", 
            "text": "http://apps.matrix.one", 
            "title": "App Store"
        }, 
        {
            "location": "/intro/app-publishing/#three-steps-to-distribution", 
            "text": "matrix create  - Make your application  matrix deploy  - Test your application  matrix publish  - Publish on the app Store", 
            "title": "Three Steps to Distribution"
        }, 
        {
            "location": "/intro/app-publishing/#guidelines", 
            "text": "Your application must do only what it claims to do with the name, description and README.md.  All sensors, integrations and computer vision usage must be registered in the  config.yaml , and will be authorized by users on install.  All applications will be code-reviewed and are subject to removal at any time.", 
            "title": "Guidelines"
        }, 
        {
            "location": "/intro/app-publishing/#before-publishing-an-application", 
            "text": "", 
            "title": "Before publishing an application."
        }, 
        {
            "location": "/intro/app-publishing/#ensure-meta-information-is-accurate", 
            "text": "name  and  description  must be included in your config.yaml. If you want to use a multiword application name, provide a  displayName  with a correlating  name . Users will use  name  when  matrix install ing.  The contents of  README.md  will be shown on the app detail page, along with images provided imageUrls  will be used on the detail page  galleryUrl  will be used on the main App Store page, or the first item in  imageUrls  will be used  keywords  are used to tag your application and will be used to return your application on searches for these keywords.  categories  are not yet formalized, but will divide the store listings. Submitting proposed app categories will inform this process.  example config.yaml\n\nname: example-app\ndisplayName: The Example App\ndescription: An example application config.yaml.\n\nimageUrls:\n  - http://image.com/1\n  - http://image.com/2\n\ngalleryUrl: http://image.com/3\n\nkeywords:\n  - example\n  - configuration\n\ncategories:\n  - entertainment\n  - development", 
            "title": "Ensure Meta Information is Accurate"
        }, 
        {
            "location": "/intro/app-publishing/#ensure-components-are-setup", 
            "text": "All applications which use events, CV or sensors, must register these in the config file.  events  are registered as follows:", 
            "title": "Ensure Components are Setup"
        }, 
        {
            "location": "/intro/app-publishing/#events", 
            "text": "events:\n  - face-recognized\n  - locked-door", 
            "title": "Events"
        }, 
        {
            "location": "/intro/app-publishing/#sensors", 
            "text": "sensors:\n  - temperature\n  - uv", 
            "title": "Sensors"
        }, 
        {
            "location": "/intro/app-publishing/#computer-vision", 
            "text": "services:\n  faceService:\n    engine: detection\n    type: face  A user will be required to grant an application permissions before installing. A user may install an app with any or all permissions enabled.", 
            "title": "Computer Vision"
        }, 
        {
            "location": "/intro/app-publishing/#test-your-application", 
            "text": "Use  matrix deploy  to test your application before publishing. Make sure it functions as intended. Share a video of your creation with us!", 
            "title": "Test your Application"
        }, 
        {
            "location": "/API/sensors/", 
            "text": "Sensors\n\n\nSensors and Configuration\n\n\nEnd users must explicitly authorize MOS applications to utilize\u00a0hardware sensors and computer vision algorithms.\n\n\nThis requires that each application identify required sensors in \nconfig.yaml\n.\n\n\nsensors:\n  - temperature\n  - uv\n\n\n\n\nOtherwise sensors will not work.\n\n\n.init\n\n\nAll sensors are initialized using the \ninit\n method.\n\n\n\n\nsensorType\n: Type of sensor you are initializing \ntemperature\n, \nhumidity\n, \npressure\n, \nuv\n, \ngyroscope\n, \naccelerometer\n.\n\n\noptions\n: The options for that sensor. By default, all sensors have a \nrefresh\n and \ntimeout\n property.\n\n\n\n\nvar options = {\n  refresh: 1000, //milliseconds\n  timeout: 1000 //milliseconds\n};\n\nmatrix.init('temperature', options).then(function(data){\n  //see below for data formats\n});\n\n\n\n\nOutputs\n\n\nTemperature\n\n\nOutput for \ntemperature\n (in \n).\n\n\n{\n  value: 36.95899963378906,\n  type: 'temperature'\n}\n\n\n\n\nHumidity\n\n\nOutput for \nhumidity\n.\n\n\n{\n  value: 30.409704208374023,\n  type: 'humidity'\n}\n\n\n\n\nPressure\n\n\nOutput for \npressure\n (in mbars).\n\n\n{\n  value: 101692,\n  type: 'pressure'\n}\n\n\n\n\nUV\n\n\nOutput for \nUV\n.\n\n\n{\n   value: 0.0053547522984445095,\n   risk: 'Low'\n}\n\n\n\n\nGyroscope\n\n\nOutput for \ngyroscope\n.\n\n\n{\n  yaw: 144.78964233398438,\n  pitch: 2.112252950668335,\n  roll: -92.0414810180664,\n  x: -10.78155517578125,\n  y: 1.8841552734375,\n  z: 0.441131591796875,\n  type: 'gyroscope'\n}\n\n\n\n\n\nAccelerometer\n\n\nOutput for \naccelerometer\n\n\n{\n  x: 0.1,\n  y: 0.23,\n  z: 0.224,\n  type: 'accelerometer'\n}\n\n\n\n\nMagnetometer\n\n\nOutput for \nmagnetometer\n\n\n{\n  x: 0.51,\n  y: 0.53,\n  z: -0.124,\n  type: 'magnetometer'\n}\n\n\n\n\nFiltering Sensor Data\n\n\nSee \nAPI \n Filter", 
            "title": "Sensors"
        }, 
        {
            "location": "/API/sensors/#sensors", 
            "text": "", 
            "title": "Sensors"
        }, 
        {
            "location": "/API/sensors/#sensors-and-configuration", 
            "text": "End users must explicitly authorize MOS applications to utilize\u00a0hardware sensors and computer vision algorithms.  This requires that each application identify required sensors in  config.yaml .  sensors:\n  - temperature\n  - uv  Otherwise sensors will not work.", 
            "title": "Sensors and Configuration"
        }, 
        {
            "location": "/API/sensors/#init", 
            "text": "All sensors are initialized using the  init  method.   sensorType : Type of sensor you are initializing  temperature ,  humidity ,  pressure ,  uv ,  gyroscope ,  accelerometer .  options : The options for that sensor. By default, all sensors have a  refresh  and  timeout  property.   var options = {\n  refresh: 1000, //milliseconds\n  timeout: 1000 //milliseconds\n};\n\nmatrix.init('temperature', options).then(function(data){\n  //see below for data formats\n});", 
            "title": ".init"
        }, 
        {
            "location": "/API/sensors/#outputs", 
            "text": "", 
            "title": "Outputs"
        }, 
        {
            "location": "/API/sensors/#temperature", 
            "text": "Output for  temperature  (in  ).  {\n  value: 36.95899963378906,\n  type: 'temperature'\n}", 
            "title": "Temperature"
        }, 
        {
            "location": "/API/sensors/#humidity", 
            "text": "Output for  humidity .  {\n  value: 30.409704208374023,\n  type: 'humidity'\n}", 
            "title": "Humidity"
        }, 
        {
            "location": "/API/sensors/#pressure", 
            "text": "Output for  pressure  (in mbars).  {\n  value: 101692,\n  type: 'pressure'\n}", 
            "title": "Pressure"
        }, 
        {
            "location": "/API/sensors/#uv", 
            "text": "Output for  UV .  {\n   value: 0.0053547522984445095,\n   risk: 'Low'\n}", 
            "title": "UV"
        }, 
        {
            "location": "/API/sensors/#gyroscope", 
            "text": "Output for  gyroscope .  {\n  yaw: 144.78964233398438,\n  pitch: 2.112252950668335,\n  roll: -92.0414810180664,\n  x: -10.78155517578125,\n  y: 1.8841552734375,\n  z: 0.441131591796875,\n  type: 'gyroscope'\n}", 
            "title": "Gyroscope"
        }, 
        {
            "location": "/API/sensors/#accelerometer", 
            "text": "Output for  accelerometer  {\n  x: 0.1,\n  y: 0.23,\n  z: 0.224,\n  type: 'accelerometer'\n}", 
            "title": "Accelerometer"
        }, 
        {
            "location": "/API/sensors/#magnetometer", 
            "text": "Output for  magnetometer  {\n  x: 0.51,\n  y: 0.53,\n  z: -0.124,\n  type: 'magnetometer'\n}", 
            "title": "Magnetometer"
        }, 
        {
            "location": "/API/sensors/#filtering-sensor-data", 
            "text": "See  API   Filter", 
            "title": "Filtering Sensor Data"
        }, 
        {
            "location": "/API/everloop/", 
            "text": "Everloop\n\n\nA powerful tool for communicating with end users is the EverLoop LED circle. CLICK VIDEO BELOW:\n\n\n\n\nRendering\n\n\nMatrixOS is an attempt at abstracting out the complexity of hardware to make it very accessible for end users. At the same time, one also wants to support those who might want to perform more complex operations. When designing a language, sometimes compromises between ease of use and features must be made.\n\n\nThe problem\n\n\nMany things might want to write to the LED. We can leave it up to chance as to which gets to write, or we can approach it intelligently to optimize the aesthetics and performance. We also want to be able to manage and optimize LED transformations from a system level. Normally, MATRIX OS enables very fast communication with the hardware and tries to get out of the way as much as possible. For LEDS, we still get out of the way, but we need to blend all the input from different applications, otherwise this creates flicker as multiple applications compete for the same light indices. To discretely manage this, we created a special channel and notation just for leds.\n\n\nThe Solution\n\n\nmatrix.led\n\n\n\n\nBasic Operations\n\n\nString Notation \n Render\n\n\nmatrix.led('blue'); //does nothing\n\nmatrix.led('green').render(); //lights change\n\n// supports css\nmatrix.led('rgba(255, 0, 100)').render();\n\n\n\n\nYou can use any CSS color property, including \nhttps://www.wikiwand.com/en/Web_colors#/X11_color_names\n. Darker colors on the Everloop generally display with more precision then lighter colors, which tend to get washed out. \n\n\nFurther examples omit the \nrender\n for readability. \n\n\nIntermediate Operation\n\n\nObject Notation - Shape Generators\n\n\nShape objects \n{Shape}\n are the fastest way to get started with Everloop. We are always building, \nlet us know\n what shapes you want us to work on next!\n\n\nThe object creation is simple, you combine global properties with specific properties into a single object that controls a single generator. To draw multiple shapes, see Multiple Shapes below.\n\n\nGlobal Shape Properties\n\n\nEvery Shape object must include a \ncolor\n property to render.\n\n\ncolor - color strings, as specified above\nblend - mix lights to make angle positioning more precise\nspin - number of degrees by which to spin the hue ( 0 - 360 )\nstart - ( arc only ), start light index\n\n\n\n\nAvailable Shapes\n\n\nInclude one of these properties to enable the shape generator.\n\n\narc - number of degrees to draw an arc, important for smile faces, supports negative values\nfade - similiar to arc, except lights fade out\nangle - draw a single light at this degree point\n\n\n\n\nExample Shape Object\n\n\n{\n  color: 'red'\n  angle: 90\n}\n\n\n\n\nChaining Operations\n\n\nThese operate on the shapes and colors defined in the \nled\n object.\n\n\nrotate(angle) - rotates whole shape by this many degrees \nbrighten(steps) - brighten light by this many steps ( 0 - 10 )\ndarken(steps) - darken light by this many steps ( 0 - 10 )\n// brighten / darken are expensive operations and may not be suitable for rapidly updating displays\n\n\n\n\nMultiple shapes and pixel drawing\n\n\nUse an array to include multiple shapes. Color strings can also be included and will be drawn as a single light whose index matches the strings index in the array provided.\n\n\nExamples\n\n\nvar a = matrix.led({\n  // degrees of arc [ 90\u00b0 = quadrant ]   \n  arc: 90,\n\n  color: 'green',\n\n  // index to start drawing arc\n  start: 12\n});\n\n\n// draw a point\nvar b = matrix.led({\n  angle: 245,\n  color: 'white',\n  // blends interlight space if true, solid lights if false, default false\n  blend: true\n});\n\n// rotate the lights clockwise by a specified angle\nmatrix.led([a, b]).rotate(90);\n\n\n\n\nComposition\n\n\nShape Objects\n\n\n// make a smiley face\nmatrix.led([\n  {\n    angle: 45,\n    color: 'yellow'\n  },\n  {\n    angle: 135,\n    color: 'yellow'\n  },\n  {\n    arc: 90,\n    color: 'yellow',\n    start: 225\n  }\n]);\n\n\n\n\nDirect Pixel Manipulation\n\n\nArray index = led to change\n\n\nmatrix.led([0, 0, 0, 0, 'yellow', 0,\n0, 0, 0, 0, 0, 0, 0, 'yellow', 0, 0,\n0, 0, 0, 0, 0, 0, 'yellow', 'yellow',\n'yellow', 'yellow', 'yellow', 'yellow',\n'yellow', 'yellow', 'yellow' ]);\n\n\n\n\nExample clock\n\n\nsetInterval(function(){\n  var time = new Date();\n  var h = time.getHours();\n  var m = time.getMinutes();\n  var s = time.getSeconds();\n\n  var hourLED = {\n    // translate hours (12) to angle (360)\n    arc: h * 3,\n    color: 'blue'\n  };\n\n  var minuteLED = {\n    // translate minutes ( 60 ) to angle ( 360 )\n    angle: m * 6,\n    color: 'green'\n  };\n\n  var secondLED = {\n    // translate seconds (60) to angle (360)\n    angle: s * 6,\n    color: 'yellow',\n    blend: true\n  };\n\n  matrix.led([hourLED, minuteLED]).render();\n\n}, 1000);\n\n\n\n\nAdvanced Use\n\n\nEnable \nSUN_MODE=true\n as a flag when launching MATRIX OS to turn on the white LEDs (and the luminence calculations). Wear sunglasses or use another mode of protecting your eyes when using this while developing. It is intended for use behind coverings.", 
            "title": "Everloop"
        }, 
        {
            "location": "/API/everloop/#everloop", 
            "text": "A powerful tool for communicating with end users is the EverLoop LED circle. CLICK VIDEO BELOW:", 
            "title": "Everloop"
        }, 
        {
            "location": "/API/everloop/#rendering", 
            "text": "MatrixOS is an attempt at abstracting out the complexity of hardware to make it very accessible for end users. At the same time, one also wants to support those who might want to perform more complex operations. When designing a language, sometimes compromises between ease of use and features must be made.", 
            "title": "Rendering"
        }, 
        {
            "location": "/API/everloop/#the-problem", 
            "text": "Many things might want to write to the LED. We can leave it up to chance as to which gets to write, or we can approach it intelligently to optimize the aesthetics and performance. We also want to be able to manage and optimize LED transformations from a system level. Normally, MATRIX OS enables very fast communication with the hardware and tries to get out of the way as much as possible. For LEDS, we still get out of the way, but we need to blend all the input from different applications, otherwise this creates flicker as multiple applications compete for the same light indices. To discretely manage this, we created a special channel and notation just for leds.", 
            "title": "The problem"
        }, 
        {
            "location": "/API/everloop/#the-solution", 
            "text": "matrix.led", 
            "title": "The Solution"
        }, 
        {
            "location": "/API/everloop/#basic-operations", 
            "text": "", 
            "title": "Basic Operations"
        }, 
        {
            "location": "/API/everloop/#string-notation-render", 
            "text": "matrix.led('blue'); //does nothing\n\nmatrix.led('green').render(); //lights change\n\n// supports css\nmatrix.led('rgba(255, 0, 100)').render();  You can use any CSS color property, including  https://www.wikiwand.com/en/Web_colors#/X11_color_names . Darker colors on the Everloop generally display with more precision then lighter colors, which tend to get washed out.   Further examples omit the  render  for readability.", 
            "title": "String Notation &amp; Render"
        }, 
        {
            "location": "/API/everloop/#intermediate-operation", 
            "text": "", 
            "title": "Intermediate Operation"
        }, 
        {
            "location": "/API/everloop/#object-notation-shape-generators", 
            "text": "Shape objects  {Shape}  are the fastest way to get started with Everloop. We are always building,  let us know  what shapes you want us to work on next!  The object creation is simple, you combine global properties with specific properties into a single object that controls a single generator. To draw multiple shapes, see Multiple Shapes below.", 
            "title": "Object Notation - Shape Generators"
        }, 
        {
            "location": "/API/everloop/#global-shape-properties", 
            "text": "Every Shape object must include a  color  property to render.  color - color strings, as specified above\nblend - mix lights to make angle positioning more precise\nspin - number of degrees by which to spin the hue ( 0 - 360 )\nstart - ( arc only ), start light index", 
            "title": "Global Shape Properties"
        }, 
        {
            "location": "/API/everloop/#available-shapes", 
            "text": "Include one of these properties to enable the shape generator.  arc - number of degrees to draw an arc, important for smile faces, supports negative values\nfade - similiar to arc, except lights fade out\nangle - draw a single light at this degree point", 
            "title": "Available Shapes"
        }, 
        {
            "location": "/API/everloop/#example-shape-object", 
            "text": "{\n  color: 'red'\n  angle: 90\n}", 
            "title": "Example Shape Object"
        }, 
        {
            "location": "/API/everloop/#chaining-operations", 
            "text": "These operate on the shapes and colors defined in the  led  object.  rotate(angle) - rotates whole shape by this many degrees \nbrighten(steps) - brighten light by this many steps ( 0 - 10 )\ndarken(steps) - darken light by this many steps ( 0 - 10 )\n// brighten / darken are expensive operations and may not be suitable for rapidly updating displays", 
            "title": "Chaining Operations"
        }, 
        {
            "location": "/API/everloop/#multiple-shapes-and-pixel-drawing", 
            "text": "Use an array to include multiple shapes. Color strings can also be included and will be drawn as a single light whose index matches the strings index in the array provided.", 
            "title": "Multiple shapes and pixel drawing"
        }, 
        {
            "location": "/API/everloop/#examples", 
            "text": "var a = matrix.led({\n  // degrees of arc [ 90\u00b0 = quadrant ]   \n  arc: 90,\n\n  color: 'green',\n\n  // index to start drawing arc\n  start: 12\n});\n\n\n// draw a point\nvar b = matrix.led({\n  angle: 245,\n  color: 'white',\n  // blends interlight space if true, solid lights if false, default false\n  blend: true\n});\n\n// rotate the lights clockwise by a specified angle\nmatrix.led([a, b]).rotate(90);", 
            "title": "Examples"
        }, 
        {
            "location": "/API/everloop/#composition", 
            "text": "", 
            "title": "Composition"
        }, 
        {
            "location": "/API/everloop/#shape-objects", 
            "text": "// make a smiley face\nmatrix.led([\n  {\n    angle: 45,\n    color: 'yellow'\n  },\n  {\n    angle: 135,\n    color: 'yellow'\n  },\n  {\n    arc: 90,\n    color: 'yellow',\n    start: 225\n  }\n]);", 
            "title": "Shape Objects"
        }, 
        {
            "location": "/API/everloop/#direct-pixel-manipulation", 
            "text": "Array index = led to change  matrix.led([0, 0, 0, 0, 'yellow', 0,\n0, 0, 0, 0, 0, 0, 0, 'yellow', 0, 0,\n0, 0, 0, 0, 0, 0, 'yellow', 'yellow',\n'yellow', 'yellow', 'yellow', 'yellow',\n'yellow', 'yellow', 'yellow' ]);", 
            "title": "Direct Pixel Manipulation"
        }, 
        {
            "location": "/API/everloop/#example-clock", 
            "text": "setInterval(function(){\n  var time = new Date();\n  var h = time.getHours();\n  var m = time.getMinutes();\n  var s = time.getSeconds();\n\n  var hourLED = {\n    // translate hours (12) to angle (360)\n    arc: h * 3,\n    color: 'blue'\n  };\n\n  var minuteLED = {\n    // translate minutes ( 60 ) to angle ( 360 )\n    angle: m * 6,\n    color: 'green'\n  };\n\n  var secondLED = {\n    // translate seconds (60) to angle (360)\n    angle: s * 6,\n    color: 'yellow',\n    blend: true\n  };\n\n  matrix.led([hourLED, minuteLED]).render();\n\n}, 1000);", 
            "title": "Example clock"
        }, 
        {
            "location": "/API/everloop/#advanced-use", 
            "text": "Enable  SUN_MODE=true  as a flag when launching MATRIX OS to turn on the white LEDs (and the luminence calculations). Wear sunglasses or use another mode of protecting your eyes when using this while developing. It is intended for use behind coverings.", 
            "title": "Advanced Use"
        }, 
        {
            "location": "/API/filter/", 
            "text": "Filters\n\n\nMatrixOS sensors and computer vision algorithms provide data which can be filtered between the \nsensor\n, which can be regarded as the data source, and the \nthen\n, which can be regarded as the data receiver. Between the two, we can use chaining methods to easily filter what data is received.\n\n\n// filtering in a simple application\nmatrix.sensor('temperature')\n.above(80)\n.then(function(data){\n  // see CrossTalk documentation for more information about matrix.emit\n  matrix.emit('ac-control', 'turnOn');\n});\n\n\n\n\nFiltering decides whether or not a data point is passed to the \nthen()\n, it does not change the data in any way.\n\n\nSimple Filtering methods\n\n\nequality\n\n\nNumeric\n\n\nis()\n \nlike()\n\n\nmatrix.sensor('temperature').is(72)\n\n\n\n\n\n\n\nhas\n\n\nhas()\n is used to refine a data source by additional criteria and keys.\n\n\n// for simple sensors\nmatrix.sensor('temperature').has('value')\n// equivalent to\nmatrix.sensor('temperature').has()\n\n// for complex sensors\nmatrix.sensor('gyroscope').has('x')\n\n\n\n\n\nbounds\n\n\n greater then\n\n\nabove\n, \nover\n, 'after'\n\n\nmatrix.sensor('temperature').has().above(72)\n\n\n\n\n less then\n\n\nbelow\n, \nunder\n, 'before'\n\n\nmatrix.sensor('temperature').has().below(32)\n\n\n\n\nbetween\n\n\nmatrix.service('face').start().has('happy').between(50,100)", 
            "title": "Filters"
        }, 
        {
            "location": "/API/filter/#filters", 
            "text": "MatrixOS sensors and computer vision algorithms provide data which can be filtered between the  sensor , which can be regarded as the data source, and the  then , which can be regarded as the data receiver. Between the two, we can use chaining methods to easily filter what data is received.  // filtering in a simple application\nmatrix.sensor('temperature')\n.above(80)\n.then(function(data){\n  // see CrossTalk documentation for more information about matrix.emit\n  matrix.emit('ac-control', 'turnOn');\n});  Filtering decides whether or not a data point is passed to the  then() , it does not change the data in any way.", 
            "title": "Filters"
        }, 
        {
            "location": "/API/filter/#simple-filtering-methods", 
            "text": "", 
            "title": "Simple Filtering methods"
        }, 
        {
            "location": "/API/filter/#equality", 
            "text": "", 
            "title": "equality"
        }, 
        {
            "location": "/API/filter/#numeric", 
            "text": "is()   like()  matrix.sensor('temperature').is(72)", 
            "title": "Numeric"
        }, 
        {
            "location": "/API/filter/#has", 
            "text": "has()  is used to refine a data source by additional criteria and keys.  // for simple sensors\nmatrix.sensor('temperature').has('value')\n// equivalent to\nmatrix.sensor('temperature').has()\n\n// for complex sensors\nmatrix.sensor('gyroscope').has('x')", 
            "title": "has"
        }, 
        {
            "location": "/API/filter/#bounds", 
            "text": "", 
            "title": "bounds"
        }, 
        {
            "location": "/API/filter/#greater-then", 
            "text": "above ,  over , 'after'  matrix.sensor('temperature').has().above(72)", 
            "title": "&gt; greater then"
        }, 
        {
            "location": "/API/filter/#less-then", 
            "text": "below ,  under , 'before'  matrix.sensor('temperature').has().below(32)", 
            "title": "&lt; less then"
        }, 
        {
            "location": "/API/filter/#between", 
            "text": "matrix.service('face').start().has('happy').between(50,100)", 
            "title": "between"
        }, 
        {
            "location": "/API/computer-vision/", 
            "text": "Computer Vision\n\n\nMATRIX OS is designed to integrate with computer vision in a powerful and robust way. You can use computer vision output to drive behavior, capture data for further analysis or anything you want!\n\n\nExample\n\n\nFrom \nfaceTest MATRIX App\n\n\nmatrix.led('red').render();\n\nmatrix.service('face').start().then(function(data){\n  matrix.led('green').render();\n  setTimeout(function() {\n    matrix.led('black').render();\n  },2000);\n});\n\n\n\n\nConfiguration\n\n\nTo facilitate communication with the hardware,  CV services must be defined in \nconfig.yaml\n before they will be available to your application.\n\n\nservices:\n  faceDetection:\n    engine: detection\n    type: face\n\n\n\n\nSee \nServices\n for more information\n\n\nmatrix.service\n\n\nmatrix.service( algorithm, options )\n\n\n\n\nalgorithm\n\n\nface\n - triggers when it sees a face shape\n\nfist\n - gesture recognition for a closed fist\n\npalm\n - gesture recognition for an open palm\n\n\noptions\n\n\nrefresh\n - how many seconds before restarting the detection, default: 3\n\ntimeout\n - if there is no detection, stop after this many seconds, default: none\n\n\nstart()\n\n\nStarts a given CV algorithm with provided options.\n\n\nmatrix.service( algorithm, options ).start()\n\n\n\n\nstop()\n\n\nStops running a CV algorithm.\n\n\nvar s = matrix.service( algorithm, options ).start();\ns.stop();\n\n//or\nmatrix.service(algorithm).stop();\n\n\n\n\n\n\n\n.then()\n\n\nReturns the data, \nPromise\n style.\n\n\npalm\n, \nface\n and \nfist\n have associated tags\n\n\nReturns \ntag\n: \nHAND_PALM\n, \nHAND_FIST\n, or\nFACE\n\n\nExample\n\n\n{\n  location: {\n   x: 333,\n   y: 237,\n   width: 55,\n   height: 55\n  },\n  tag: 'HAND_PALM'\n}\n\n\n\n\nComplete Example\n\n\n# app.js\nvar algorithm = 'face';\nvar options   = {};\nmatrix.service( algorithm, options ).start().then(function( data ){\n  // your CV detection data will be available here\n  console.log( data );\n});\n\n\n\n\nExtended Face Analytics\n\n\nUse \ndemographics\n for the service call and in \nconfig\nservices\nname\nengine\n\n\nExample Config.yaml\n\n\nservices:\n  facelytics:\n    engine: demographics\n    type: face\n\n\n\n\ndemographics\n - \nmatrix.service('demographics')\n\n\nExtended Face Data Format\n\n\nemotions\n\n\nHAPPY\n\n\nSAD\n\n\nCONFUSED\n\n\nANGRY\n\n\nCALM\n\n\nSURPRISED\n\n\nDISGUST\n\n\nDemographics Output\n\n\n{ location: { x: 213, y: 221, width: 55, height: 55 },\n tag: 'FACE',\n demographics:\n  { gender: 'MALE',\n    emotion: 'CALM',\n    age: 35,\n    pose:\n     { yaw: -0.24303536117076874,\n       roll: 0.04344254732131958,\n       pitch: -0.10279278457164764 },\n    face_id: '4' } }\n\n\n\n\nRecognition\n\n\nrecognition\n - \nmatrix.service('recognition')\n\n\nMATRIX OS includes face recognition which turns a face into a series of numbers which can be used to identify the face when it is seen later. We do not store face images, just the numbers.\n\n\nRecognition only works from \n ~4 ft away. Removing hats and glasses will result in more accurate results.\n\n\nExample Config.yaml\n\n\nservices:\n  faceRecog:\n    engine: recognition\n    type: face\n\n\n\n\nBy default, \nrecognition\n works in \nRECOGNITION\n mode. Recognition requires training first.\n\n\ntrain()\n\n\nmatrix.service('recognition').train('test').then(function(data) { ... });\n\n\n\n\nThis will associate a face with a particular tag. The data which is passed to \nthen\n are uuid's internal to MATRIX and not particularly useful, but you could use the callback for other reasons.\n\n\nstart()\n\n\nAfter training, you can enable normal recognition as follows.\n\n\nmatrix.service('recognition').start().then(function(data){...})\n\n\n\n\nthen()\n\n\nOutputs a collection of tags and scores.\n\n\n[{ tags : ['tagName'], score: 0.8 }, {...}]\n\n\n\n\ntags\n are the tags matched with each recognition. \nscore\n is the measure of a match, lower numbers are better. \n 0.8\n is a good metric to use for recognition.", 
            "title": "Computer Vision"
        }, 
        {
            "location": "/API/computer-vision/#computer-vision", 
            "text": "MATRIX OS is designed to integrate with computer vision in a powerful and robust way. You can use computer vision output to drive behavior, capture data for further analysis or anything you want!", 
            "title": "Computer Vision"
        }, 
        {
            "location": "/API/computer-vision/#example", 
            "text": "From  faceTest MATRIX App  matrix.led('red').render();\n\nmatrix.service('face').start().then(function(data){\n  matrix.led('green').render();\n  setTimeout(function() {\n    matrix.led('black').render();\n  },2000);\n});", 
            "title": "Example"
        }, 
        {
            "location": "/API/computer-vision/#configuration", 
            "text": "To facilitate communication with the hardware,  CV services must be defined in  config.yaml  before they will be available to your application.  services:\n  faceDetection:\n    engine: detection\n    type: face  See  Services  for more information", 
            "title": "Configuration"
        }, 
        {
            "location": "/API/computer-vision/#matrixservice", 
            "text": "matrix.service( algorithm, options )", 
            "title": "matrix.service"
        }, 
        {
            "location": "/API/computer-vision/#algorithm", 
            "text": "face  - triggers when it sees a face shape fist  - gesture recognition for a closed fist palm  - gesture recognition for an open palm", 
            "title": "algorithm"
        }, 
        {
            "location": "/API/computer-vision/#options", 
            "text": "refresh  - how many seconds before restarting the detection, default: 3 timeout  - if there is no detection, stop after this many seconds, default: none", 
            "title": "options"
        }, 
        {
            "location": "/API/computer-vision/#start", 
            "text": "Starts a given CV algorithm with provided options.  matrix.service( algorithm, options ).start()", 
            "title": "start()"
        }, 
        {
            "location": "/API/computer-vision/#stop", 
            "text": "Stops running a CV algorithm.  var s = matrix.service( algorithm, options ).start();\ns.stop();\n\n//or\nmatrix.service(algorithm).stop();", 
            "title": "stop()"
        }, 
        {
            "location": "/API/computer-vision/#then", 
            "text": "Returns the data,  Promise  style.  palm ,  face  and  fist  have associated tags  Returns  tag :  HAND_PALM ,  HAND_FIST , or FACE", 
            "title": ".then()"
        }, 
        {
            "location": "/API/computer-vision/#example_1", 
            "text": "{\n  location: {\n   x: 333,\n   y: 237,\n   width: 55,\n   height: 55\n  },\n  tag: 'HAND_PALM'\n}", 
            "title": "Example"
        }, 
        {
            "location": "/API/computer-vision/#complete-example", 
            "text": "# app.js\nvar algorithm = 'face';\nvar options   = {};\nmatrix.service( algorithm, options ).start().then(function( data ){\n  // your CV detection data will be available here\n  console.log( data );\n});", 
            "title": "Complete Example"
        }, 
        {
            "location": "/API/computer-vision/#extended-face-analytics", 
            "text": "Use  demographics  for the service call and in  config services name engine", 
            "title": "Extended Face Analytics"
        }, 
        {
            "location": "/API/computer-vision/#example-configyaml", 
            "text": "services:\n  facelytics:\n    engine: demographics\n    type: face  demographics  -  matrix.service('demographics')", 
            "title": "Example Config.yaml"
        }, 
        {
            "location": "/API/computer-vision/#extended-face-data-format", 
            "text": "", 
            "title": "Extended Face Data Format"
        }, 
        {
            "location": "/API/computer-vision/#emotions", 
            "text": "HAPPY  SAD  CONFUSED  ANGRY  CALM  SURPRISED  DISGUST", 
            "title": "emotions"
        }, 
        {
            "location": "/API/computer-vision/#demographics-output", 
            "text": "{ location: { x: 213, y: 221, width: 55, height: 55 },\n tag: 'FACE',\n demographics:\n  { gender: 'MALE',\n    emotion: 'CALM',\n    age: 35,\n    pose:\n     { yaw: -0.24303536117076874,\n       roll: 0.04344254732131958,\n       pitch: -0.10279278457164764 },\n    face_id: '4' } }", 
            "title": "Demographics Output"
        }, 
        {
            "location": "/API/computer-vision/#recognition", 
            "text": "recognition  -  matrix.service('recognition')  MATRIX OS includes face recognition which turns a face into a series of numbers which can be used to identify the face when it is seen later. We do not store face images, just the numbers.  Recognition only works from   ~4 ft away. Removing hats and glasses will result in more accurate results.", 
            "title": "Recognition"
        }, 
        {
            "location": "/API/computer-vision/#example-configyaml_1", 
            "text": "services:\n  faceRecog:\n    engine: recognition\n    type: face  By default,  recognition  works in  RECOGNITION  mode. Recognition requires training first.", 
            "title": "Example Config.yaml"
        }, 
        {
            "location": "/API/computer-vision/#train", 
            "text": "matrix.service('recognition').train('test').then(function(data) { ... });  This will associate a face with a particular tag. The data which is passed to  then  are uuid's internal to MATRIX and not particularly useful, but you could use the callback for other reasons.", 
            "title": "train()"
        }, 
        {
            "location": "/API/computer-vision/#start_1", 
            "text": "After training, you can enable normal recognition as follows.  matrix.service('recognition').start().then(function(data){...})", 
            "title": "start()"
        }, 
        {
            "location": "/API/computer-vision/#then_1", 
            "text": "Outputs a collection of tags and scores.  [{ tags : ['tagName'], score: 0.8 }, {...}]  tags  are the tags matched with each recognition.  score  is the measure of a match, lower numbers are better.   0.8  is a good metric to use for recognition.", 
            "title": "then()"
        }, 
        {
            "location": "/API/microphone/", 
            "text": "Microphone\n\n\nComing soon...", 
            "title": "Microphone"
        }, 
        {
            "location": "/API/microphone/#microphone", 
            "text": "Coming soon...", 
            "title": "Microphone"
        }, 
        {
            "location": "/API/crosstalk/", 
            "text": "Cross-Talk\n\n\nCross-Talk is a mechanism for applications to communicate, whether on the same device, or on different devices. Applications can exchange information with other applications, or with other instances of the same application. All messages get sent to all devices, so if you have the same app running on different devices, this is how to communicate between installations of the\u00a0same app.\n\n\nConfig Setup\n\n\nCrossTalk requires setup in configuration to execute successfully. This information is also used in the app store to determine which applications can communicate via events.\n\n\nGlobal\n\n\nevents:\n  - globalEvent\n\n\n\n\nApp Targeted\n\n\nevents:\n  - appName\n\n\n\n\nApp/Event Targeted\n\n\nevents:\n  - appname:\n    - eventname\n\n\n\n\nGlobal Emitters \n Listeners\n\n\nGlobal messages that can be received across applications, devices, and clients. e.g. Emit from one device, receive on another.\n\n\n.emit(payload)\n\n\n\n\npayload\n Object or string to pass through to retrieve with the listener.\n\n\n\n\n// Send a payload to all listeners\nmatrix.emit(payload);\n\n\n\n\n.on(cb)\n\n\n\n\ncb\n Callback method with \npayload\n returned.\n\n\n\n\n// Listen for global CrossTalk messages\nmatrix.on(function(payload) { ... });\n\n\n\n\nApp Specific Message\n\n\nMessages that can be shared across applications on a single device.\n\n\n.emit(app, payload)\n\n\n\n\napp\n Label to later listen for.\n\n\npayload\n Object or string to pass through to retrieve with the listener.\n\n\n\n\n// Send a message to a particular application\nmatrix.emit('app', payload);\n\n\n\n\n.on(cb)\n\n\n\n\ncb\n Callback method with payload returned.\n\n\n\n\n// Listen for application specific CrossTalk messages\nmatrix.on(function(payload) { ... });\n\n\n\n\nSpecific Event within App\n\n\nMessages that can be filtered by application, and an event type.\n\n\n.emit(app, event, payload)\n\n\n\n\napp\n Label to later listen for.\n\n\nevent\n Event scope within \napp\n to listen for.\n\n\npayload\n Object or string to pass through to retrieve with the listener.\n\n\n\n\n// Trigger an event in a specific application\nmatrix.emit('app', 'event', payload);\n\n\n\n\n.on(event, cb)\n\n\n\n\nevent\n Event to listen on.\n\n\ncb\n Callback method with payload returned.\n\n\n\n\n// Listen for CrossTalk events sent to this application\nmatrix.on('event', function(payload) { ... });\n\n\n\n\nDashboard\n\n\nReceive events from web or mobile by binding them to widget controls.\n\n\n// Interface elements from Dashboards can also trigger CrossTalk events.\nmatrix.on('buttonClick', function(payload) { ... });\n\n\n\n\nConfiguration-Driven Events\n\n\nSee \nConfiguration \n Widgets", 
            "title": "Cross-Talk"
        }, 
        {
            "location": "/API/crosstalk/#cross-talk", 
            "text": "Cross-Talk is a mechanism for applications to communicate, whether on the same device, or on different devices. Applications can exchange information with other applications, or with other instances of the same application. All messages get sent to all devices, so if you have the same app running on different devices, this is how to communicate between installations of the\u00a0same app.", 
            "title": "Cross-Talk"
        }, 
        {
            "location": "/API/crosstalk/#config-setup", 
            "text": "CrossTalk requires setup in configuration to execute successfully. This information is also used in the app store to determine which applications can communicate via events.", 
            "title": "Config Setup"
        }, 
        {
            "location": "/API/crosstalk/#global", 
            "text": "events:\n  - globalEvent", 
            "title": "Global"
        }, 
        {
            "location": "/API/crosstalk/#app-targeted", 
            "text": "events:\n  - appName", 
            "title": "App Targeted"
        }, 
        {
            "location": "/API/crosstalk/#appevent-targeted", 
            "text": "events:\n  - appname:\n    - eventname", 
            "title": "App/Event Targeted"
        }, 
        {
            "location": "/API/crosstalk/#global-emitters-listeners", 
            "text": "Global messages that can be received across applications, devices, and clients. e.g. Emit from one device, receive on another.", 
            "title": "Global Emitters &amp; Listeners"
        }, 
        {
            "location": "/API/crosstalk/#emitpayload", 
            "text": "payload  Object or string to pass through to retrieve with the listener.   // Send a payload to all listeners\nmatrix.emit(payload);", 
            "title": ".emit(payload)"
        }, 
        {
            "location": "/API/crosstalk/#oncb", 
            "text": "cb  Callback method with  payload  returned.   // Listen for global CrossTalk messages\nmatrix.on(function(payload) { ... });", 
            "title": ".on(cb)"
        }, 
        {
            "location": "/API/crosstalk/#app-specific-message", 
            "text": "Messages that can be shared across applications on a single device.", 
            "title": "App Specific Message"
        }, 
        {
            "location": "/API/crosstalk/#emitapp-payload", 
            "text": "app  Label to later listen for.  payload  Object or string to pass through to retrieve with the listener.   // Send a message to a particular application\nmatrix.emit('app', payload);", 
            "title": ".emit(app, payload)"
        }, 
        {
            "location": "/API/crosstalk/#oncb_1", 
            "text": "cb  Callback method with payload returned.   // Listen for application specific CrossTalk messages\nmatrix.on(function(payload) { ... });", 
            "title": ".on(cb)"
        }, 
        {
            "location": "/API/crosstalk/#specific-event-within-app", 
            "text": "Messages that can be filtered by application, and an event type.", 
            "title": "Specific Event within App"
        }, 
        {
            "location": "/API/crosstalk/#emitapp-event-payload", 
            "text": "app  Label to later listen for.  event  Event scope within  app  to listen for.  payload  Object or string to pass through to retrieve with the listener.   // Trigger an event in a specific application\nmatrix.emit('app', 'event', payload);", 
            "title": ".emit(app, event, payload)"
        }, 
        {
            "location": "/API/crosstalk/#onevent-cb", 
            "text": "event  Event to listen on.  cb  Callback method with payload returned.   // Listen for CrossTalk events sent to this application\nmatrix.on('event', function(payload) { ... });", 
            "title": ".on(event, cb)"
        }, 
        {
            "location": "/API/crosstalk/#dashboard", 
            "text": "Receive events from web or mobile by binding them to widget controls.  // Interface elements from Dashboards can also trigger CrossTalk events.\nmatrix.on('buttonClick', function(payload) { ... });", 
            "title": "Dashboard"
        }, 
        {
            "location": "/API/crosstalk/#configuration-driven-events", 
            "text": "See  Configuration   Widgets", 
            "title": "Configuration-Driven Events"
        }, 
        {
            "location": "/API/typesend/", 
            "text": "Unless otherwise specified, sensor data is typed with the application name.\n\n\nmatrix.send({\n  foo: 123\n})\n\n\n\n\nis read in a widget \nconfig.yaml\n ( See \nConfiguration\nWidgets\n)\n\n\nname: fooApp\nwidgets:\n  fooWidget:\n    display: digit,\n    type: fooApp\n    key: foo\n\n\n\n\nType\n\n\nTypes are another way to organize the data coming off MatrixOS and make it easier to work with in dashboards.\n\n\nmatrix.type('bar').send({\n  foo: 123\n})\n\n\n\n\nwould instead be utilized with the following\n\n\nname: fooApp\nwidgets:\n  fooWidget:\n    display: digit,\n    type: bar\n    key: foo\n\n\n\n\nTypes are also different ways of segmenting the data. When your application generates reports, types and keys will form the structure of that report. ( See \n Data Types \n for more )", 
            "title": "Type"
        }, 
        {
            "location": "/API/typesend/#type", 
            "text": "Types are another way to organize the data coming off MatrixOS and make it easier to work with in dashboards.  matrix.type('bar').send({\n  foo: 123\n})  would instead be utilized with the following  name: fooApp\nwidgets:\n  fooWidget:\n    display: digit,\n    type: bar\n    key: foo  Types are also different ways of segmenting the data. When your application generates reports, types and keys will form the structure of that report. ( See   Data Types   for more )", 
            "title": "Type"
        }, 
        {
            "location": "/API/GPIO/", 
            "text": "GPIO\n\n\nGPIO can be used to communicate or receive input from analog and digital components through the MATRIX Creator, or any other sensor leveraging Raspberry Pi's GPIOs.\n\n\nConfiguration\n\n\nMake sure to add the following to your \nconfig.yaml\n to enable GPIO's/\n\n\nintegrations:\n  - gpio\n\n\n\n\n.read\n\n\n\n\npinNumber\n: The GPIO you are reading from.\n\n\ncallback\n: Returns \nerr\n, \nvalue\n.\n\n\n\n\nmatrix.gpio.read(16, function(err, value) {\n  if(err) throw err;\n  console.log(value);   // The current state of the pin\n});\n\n\n\n\n.write\n\n\n\n\npinNumber\n: The GPIO you are reading from.\n\n\nvalue\n: The value you would like to update the GPIO with.\n\n\ncallback\n: Returns \nerr\n, \nvalue\n.\n\n\n\n\nmatrix.gpio.write(16, 1, function(err) {\n    if(err) throw err;\n});", 
            "title": "GPIO"
        }, 
        {
            "location": "/API/GPIO/#gpio", 
            "text": "GPIO can be used to communicate or receive input from analog and digital components through the MATRIX Creator, or any other sensor leveraging Raspberry Pi's GPIOs.", 
            "title": "GPIO"
        }, 
        {
            "location": "/API/GPIO/#configuration", 
            "text": "Make sure to add the following to your  config.yaml  to enable GPIO's/  integrations:\n  - gpio", 
            "title": "Configuration"
        }, 
        {
            "location": "/API/GPIO/#read", 
            "text": "pinNumber : The GPIO you are reading from.  callback : Returns  err ,  value .   matrix.gpio.read(16, function(err, value) {\n  if(err) throw err;\n  console.log(value);   // The current state of the pin\n});", 
            "title": ".read"
        }, 
        {
            "location": "/API/GPIO/#write", 
            "text": "pinNumber : The GPIO you are reading from.  value : The value you would like to update the GPIO with.  callback : Returns  err ,  value .   matrix.gpio.write(16, 1, function(err) {\n    if(err) throw err;\n});", 
            "title": ".write"
        }, 
        {
            "location": "/API/ir/", 
            "text": "Sending IR Commands as a remote control\n\n\nWe will offer a more precise way to send and recieve information over IR. Right now, we have implemented remote emulation.\n\n\nFind the remote you want to use at the \nLIRC Remote Table\n.\n\n\nOpen the \n.conf\n file and take note of the \ncodes\n. These will replicate a button press and blast a signal out the IR transmitters. \n\n\nExample\n\n\nmatrix.ir('SONY', 'RM-833').send('KEY_POWER')", 
            "title": "IR TX/RX"
        }, 
        {
            "location": "/API/ir/#sending-ir-commands-as-a-remote-control", 
            "text": "We will offer a more precise way to send and recieve information over IR. Right now, we have implemented remote emulation.  Find the remote you want to use at the  LIRC Remote Table .  Open the  .conf  file and take note of the  codes . These will replicate a button press and blast a signal out the IR transmitters.", 
            "title": "Sending IR Commands as a remote control"
        }, 
        {
            "location": "/API/ir/#example", 
            "text": "matrix.ir('SONY', 'RM-833').send('KEY_POWER')", 
            "title": "Example"
        }, 
        {
            "location": "/API/nfc/", 
            "text": "Still working out the precise API for this. Stay tuned.\n\n\nmatrix.init('nfc')...", 
            "title": "NFC"
        }, 
        {
            "location": "/API/zwave/", 
            "text": "Still working out the precise API for this. Stay tuned.\n\n\nmatrix.init('zwave')...", 
            "title": "Z-wave"
        }, 
        {
            "location": "/API/zigbee/", 
            "text": "Zigbee\n\n\nAlpha API, subject to deprecation\n\n\nVersion Introduced: 0.9.0\n\n\nBase\n\n\nmatrix.zigbee()\n - activates the zigbee network and sees if any of the remembered devices are available\n\n\nReturns an object which is used to activate other zigbee commands\n\n\nvar zb = matrix.zigbee();\n\n\n\n\nNetwork\n\n\nzb.discover()\n - put zigbee into discover mode for 60 seconds. power on your zigbee device to have it be found\n\n\nzb.reset()\n - if you get into problems, issue a reset command\n\n\nLights\n\n\ncurrently, only zigbee lights are supported\n\nzb.light(n)\n - address found lights. \nn\n indicates the number of the light, in order of which it was added, default to the first.\n\n\nzb.light().on()\n - turns on the light\n\nzb.light().off()\n - turns off the light\n\nzb.light().toggle()\n - turns the light\u00a0on or off\n\n\nzb.light().fadeIn(time)\n - slowly turn a light over \ntime\n seconds\n\nzb.light().fadeOut(time)\n - slowly turn off a light over \ntime\n seconds\n\n\nzb.light().color(hue, time)\n - sets the light to \nhue\n color, over \ntime\n seconds, defaulting to 3 seconds. \nhue\n accepts 0-360 hue values, in addition any \ncolor\n value which would be passed to the Everloop, like \n'blue'\n or \n'#0000FF'\n. see \nEverloop\n\n\nzb.light().level(level, time)\n - sets the light level to \nlevel\n 0-100 over \ntime\n seconds, defaults to 3\n\n\nExample\n\n\nUse events to have precise control over your zigbee devices.\n\n\nmatrix.on('discover', function(){\n  matrix.zigbee().discover();\n});\n\nmatrix.on('reset', function(){\n  matrix.zigbee().reset();\n});\n\nmatrix.on('toggle', function(){\n  matrix.zigbee().light().toggle();\n});\n\nmatrix.on('off', function(){\n  matrix.zigbee().light().fadeOut(10);\n});\n\nmatrix.on('on', function(){\n  matrix.zigbee().light().fadeIn(10);\n});\n\nmatrix.on('dim', function(){\n  matrix.zigbee().light().level(10, 5);\n});\n\nvar spin;\nmatrix.on('spin', function(){\n  var hue = 0;\n  var i = 0;\n  setInterval( function(){\n    spin = matrix.led({\n        h: hue++,\n        s: 1,\n        l: 0.5\n      }).render();\n\n    if ( i \n 35 ){\n      i = 0;\n    }\n\n    if ( hue \n 360){\n      hue = 0;\n    }\n\n    if ( hue % 10 === 0){\n      matrix.zigbee().light().color(hue, 1);\n    }\n  }, 50);\n});\n\nmatrix.on('stop', function(){\n  clearInterval(spin);\n});\n\n\n\n\nIssue a \nspin\n event against the above application to cycle colors on the Everloop and set the zigbee light to the same color.", 
            "title": "Zigbee"
        }, 
        {
            "location": "/API/zigbee/#zigbee", 
            "text": "Alpha API, subject to deprecation  Version Introduced: 0.9.0", 
            "title": "Zigbee"
        }, 
        {
            "location": "/API/zigbee/#base", 
            "text": "matrix.zigbee()  - activates the zigbee network and sees if any of the remembered devices are available  Returns an object which is used to activate other zigbee commands  var zb = matrix.zigbee();", 
            "title": "Base"
        }, 
        {
            "location": "/API/zigbee/#network", 
            "text": "zb.discover()  - put zigbee into discover mode for 60 seconds. power on your zigbee device to have it be found  zb.reset()  - if you get into problems, issue a reset command", 
            "title": "Network"
        }, 
        {
            "location": "/API/zigbee/#lights", 
            "text": "currently, only zigbee lights are supported zb.light(n)  - address found lights.  n  indicates the number of the light, in order of which it was added, default to the first.  zb.light().on()  - turns on the light zb.light().off()  - turns off the light zb.light().toggle()  - turns the light\u00a0on or off  zb.light().fadeIn(time)  - slowly turn a light over  time  seconds zb.light().fadeOut(time)  - slowly turn off a light over  time  seconds  zb.light().color(hue, time)  - sets the light to  hue  color, over  time  seconds, defaulting to 3 seconds.  hue  accepts 0-360 hue values, in addition any  color  value which would be passed to the Everloop, like  'blue'  or  '#0000FF' . see  Everloop  zb.light().level(level, time)  - sets the light level to  level  0-100 over  time  seconds, defaults to 3", 
            "title": "Lights"
        }, 
        {
            "location": "/API/zigbee/#example", 
            "text": "Use events to have precise control over your zigbee devices.  matrix.on('discover', function(){\n  matrix.zigbee().discover();\n});\n\nmatrix.on('reset', function(){\n  matrix.zigbee().reset();\n});\n\nmatrix.on('toggle', function(){\n  matrix.zigbee().light().toggle();\n});\n\nmatrix.on('off', function(){\n  matrix.zigbee().light().fadeOut(10);\n});\n\nmatrix.on('on', function(){\n  matrix.zigbee().light().fadeIn(10);\n});\n\nmatrix.on('dim', function(){\n  matrix.zigbee().light().level(10, 5);\n});\n\nvar spin;\nmatrix.on('spin', function(){\n  var hue = 0;\n  var i = 0;\n  setInterval( function(){\n    spin = matrix.led({\n        h: hue++,\n        s: 1,\n        l: 0.5\n      }).render();\n\n    if ( i   35 ){\n      i = 0;\n    }\n\n    if ( hue   360){\n      hue = 0;\n    }\n\n    if ( hue % 10 === 0){\n      matrix.zigbee().light().color(hue, 1);\n    }\n  }, 50);\n});\n\nmatrix.on('stop', function(){\n  clearInterval(spin);\n});  Issue a  spin  event against the above application to cycle colors on the Everloop and set the zigbee light to the same color.", 
            "title": "Example"
        }, 
        {
            "location": "/API/servos/", 
            "text": "Servo\n\n\nUses the GPIO pins in the MATRIX Creator to control Servos.\n\n\nConfiguration\n\n\nMake sure to add the following to your \nconfig.yaml\n to enable Servos/\n\n\nintegrations:\n  - gpio\n\n\n\n\nSet servo angle\n\n\n\n\npin\n: The GPIO pin the servo is connected to.\n\n\nangle\n: Integer specifying the specific angle to set the servo to.\n\n\n\n\nmatrix.servo(pin, angle);", 
            "title": "Servos"
        }, 
        {
            "location": "/API/servos/#servo", 
            "text": "Uses the GPIO pins in the MATRIX Creator to control Servos.", 
            "title": "Servo"
        }, 
        {
            "location": "/API/servos/#configuration", 
            "text": "Make sure to add the following to your  config.yaml  to enable Servos/  integrations:\n  - gpio", 
            "title": "Configuration"
        }, 
        {
            "location": "/API/servos/#set-servo-angle", 
            "text": "pin : The GPIO pin the servo is connected to.  angle : Integer specifying the specific angle to set the servo to.   matrix.servo(pin, angle);", 
            "title": "Set servo angle"
        }, 
        {
            "location": "/API/file-storage/", 
            "text": "File Storage\n\n\nMATRIX applications utilize a shared file storage, so files saved with one application are accessible from another.\n\n\nSave\n\n\n// url - publically accessible url\n// filename - what to save this file as\n// cb - function to call when save is complete\nmatrix.file.save( url, filename, cb )\n\n\n\n\nLoad\n\n\n// filename - file to load\n// cb - function to call after file is read, passed (err, data)\nmatrix.file.load(filename, cb)\n\n\n\n\nList\n\n\nmatrix.file.list(filename, function(err, files){\n  // files is an array of file names\n})\n\n\n\n\nRemove\n\n\n// filename - what file to Remove\n// cb - function to call when remove is complete\nmatrix.file.remove( filename, cb )", 
            "title": "File Storage"
        }, 
        {
            "location": "/API/file-storage/#file-storage", 
            "text": "MATRIX applications utilize a shared file storage, so files saved with one application are accessible from another.", 
            "title": "File Storage"
        }, 
        {
            "location": "/API/file-storage/#save", 
            "text": "// url - publically accessible url\n// filename - what to save this file as\n// cb - function to call when save is complete\nmatrix.file.save( url, filename, cb )", 
            "title": "Save"
        }, 
        {
            "location": "/API/file-storage/#load", 
            "text": "// filename - file to load\n// cb - function to call after file is read, passed (err, data)\nmatrix.file.load(filename, cb)", 
            "title": "Load"
        }, 
        {
            "location": "/API/file-storage/#list", 
            "text": "matrix.file.list(filename, function(err, files){\n  // files is an array of file names\n})", 
            "title": "List"
        }, 
        {
            "location": "/API/file-storage/#remove", 
            "text": "// filename - what file to Remove\n// cb - function to call when remove is complete\nmatrix.file.remove( filename, cb )", 
            "title": "Remove"
        }, 
        {
            "location": "/API/db/", 
            "text": "Local Database\n\n\nMATRIX OS has a local, file-based key-value store for app usage.\n\n\nIt is not recommended to set end user specific configurations here, and use \nconfig.yaml\nsettings\n instead.\n\n\nGet\n\n\nmatrix.store.get(key, cb)\n\n\n\n\nSet\n\n\nmatrix.store.set(key, value, cb)\n\n\n\n\nDelete\n\n\nmatrix.store.delete(key, cb)", 
            "title": "Local Database"
        }, 
        {
            "location": "/API/db/#local-database", 
            "text": "MATRIX OS has a local, file-based key-value store for app usage.  It is not recommended to set end user specific configurations here, and use  config.yaml settings  instead.", 
            "title": "Local Database"
        }, 
        {
            "location": "/API/db/#get", 
            "text": "matrix.store.get(key, cb)", 
            "title": "Get"
        }, 
        {
            "location": "/API/db/#set", 
            "text": "matrix.store.set(key, value, cb)", 
            "title": "Set"
        }, 
        {
            "location": "/API/db/#delete", 
            "text": "matrix.store.delete(key, cb)", 
            "title": "Delete"
        }, 
        {
            "location": "/Configuration/overview/", 
            "text": "Configuration Overview\n\n\nConfiguration information is saved in the installation record for an app. It is provided by a \nconfig.yaml\n file inside the \napp.matrix\n directory.\n\n\nThis file undergoes several validations and transformations, so don't be surprised if a saved configuration is very different from a provided configuration. A finished configuration has \nvalidated: true\n in it.\n\n\nIntent\n\n\nConfigurations provide the following:\n\n\n\n\nMeta information, app name, description\n\n\nPolicy information, for asking user permissions\n\n\nData structure, what data to expect from an application\n\n\nDashboard layouts, creating interfaces for widgets\n\n\nWidget definitions, what information and controls to display where in the interface\n\n\nRuntime configuration via \nsettings\n, useful for api keys and the like.\n\n\n\n\nWorkflow\n\n\nApplication\n\n\nEach application has an \nconfig.yaml\n file which determines several things.\n\n\n\n\nHow to evaluate and categorize the application for the MatrixOS app Store\n\n\nApplication dashboard widget layout, display and data sources\n\n\nRuntime variables used by Matrix applications\n\n\nFixed data structure for saving information and routing to dashboard.\n\n\nWhat external services, such as CV and sensors, will be used, and how will they be provided to the app.\n\n\n\n\nExternal services can also be coded in the application directly.\n\n\nDeployment\n\n\nConfigurations are written on deployment ( see \nmatrix deploy\n ). If you change the \nconfig.yaml\n, you must deploy the application again. Otherwise you can change configuration using \nmatrix set config\n.\n\n\nData Types\n\n\nIf you've setup a migration or an SQL table, this is a very simple structure to tell the application what sort of data you will be passing around.\n\n\ndataTypes:\n  foobar: integer\n\n\n\n\nSee \nData Types\n\n\nScreens \n Widgets\n\n\nTwo root nodes. \nscreens\n and \nwidgets\n work together to determine layout and content.\n\n\nScreens\n\n\nScreens notates a nested array which informs the dashboard how to layout the widgets.\n\n\nscreens:\n  - - a\n    - b\n    - foo\n  - - 1\n    - 2\n    - 3\n\n// =\n turns into\n\n[ [ a, b, foo ], [ 1, 2, 3 ] ]\n\n\n\n\nSub arrays correlates to rows in a display.\nThe above would display on the dashboard as follows:\n\n\n[a][b][foo]\n[1][2][3]\n\n\n\n\nThe value in the array corresponds to a widget name.\n\n\nWidgets\n\n\nWidgets describe the module to load inside a designated screen.\n\n\nwidgets:\n  foo:\n    # type defines what type of data this widget should display\n    type: foobar\n    # if provided, label shows above each widget\n    label: Foo widget\n\n\n\n\nFor more info see \nScreens \n Widgets", 
            "title": "Overview"
        }, 
        {
            "location": "/Configuration/overview/#configuration-overview", 
            "text": "Configuration information is saved in the installation record for an app. It is provided by a  config.yaml  file inside the  app.matrix  directory.  This file undergoes several validations and transformations, so don't be surprised if a saved configuration is very different from a provided configuration. A finished configuration has  validated: true  in it.", 
            "title": "Configuration Overview"
        }, 
        {
            "location": "/Configuration/overview/#intent", 
            "text": "Configurations provide the following:   Meta information, app name, description  Policy information, for asking user permissions  Data structure, what data to expect from an application  Dashboard layouts, creating interfaces for widgets  Widget definitions, what information and controls to display where in the interface  Runtime configuration via  settings , useful for api keys and the like.", 
            "title": "Intent"
        }, 
        {
            "location": "/Configuration/overview/#workflow", 
            "text": "", 
            "title": "Workflow"
        }, 
        {
            "location": "/Configuration/overview/#application", 
            "text": "Each application has an  config.yaml  file which determines several things.   How to evaluate and categorize the application for the MatrixOS app Store  Application dashboard widget layout, display and data sources  Runtime variables used by Matrix applications  Fixed data structure for saving information and routing to dashboard.  What external services, such as CV and sensors, will be used, and how will they be provided to the app.   External services can also be coded in the application directly.", 
            "title": "Application"
        }, 
        {
            "location": "/Configuration/overview/#deployment", 
            "text": "Configurations are written on deployment ( see  matrix deploy  ). If you change the  config.yaml , you must deploy the application again. Otherwise you can change configuration using  matrix set config .", 
            "title": "Deployment"
        }, 
        {
            "location": "/Configuration/overview/#data-types", 
            "text": "If you've setup a migration or an SQL table, this is a very simple structure to tell the application what sort of data you will be passing around.  dataTypes:\n  foobar: integer  See  Data Types", 
            "title": "Data Types"
        }, 
        {
            "location": "/Configuration/overview/#screens-widgets", 
            "text": "Two root nodes.  screens  and  widgets  work together to determine layout and content.", 
            "title": "Screens &amp; Widgets"
        }, 
        {
            "location": "/Configuration/overview/#screens", 
            "text": "Screens notates a nested array which informs the dashboard how to layout the widgets.  screens:\n  - - a\n    - b\n    - foo\n  - - 1\n    - 2\n    - 3\n\n// =  turns into\n\n[ [ a, b, foo ], [ 1, 2, 3 ] ]  Sub arrays correlates to rows in a display.\nThe above would display on the dashboard as follows:  [a][b][foo]\n[1][2][3]  The value in the array corresponds to a widget name.", 
            "title": "Screens"
        }, 
        {
            "location": "/Configuration/overview/#widgets", 
            "text": "Widgets describe the module to load inside a designated screen.  widgets:\n  foo:\n    # type defines what type of data this widget should display\n    type: foobar\n    # if provided, label shows above each widget\n    label: Foo widget  For more info see  Screens   Widgets", 
            "title": "Widgets"
        }, 
        {
            "location": "/Configuration/datatypes/", 
            "text": "dataTypes\n\n\nWe experimented with a loosely defined data structure, where the system would dynamically type information for storage and retrieval. This may return in the future, but for now, we need to clearly define data structures and types.\n\n\nThis is only useful if the application is \nmatrix.send()\ning information for storage or dashboard use.\n\n\ntypes\n\n\nTypes are segments of your data. These are used for filtering in the dashboard.\n\n\ndata\n\n\nThere are two ways to structure data types\n\n\nimplicit data type names\n\n\ndataTypes:\n  foo: string\n  bar: integer\n\n\n\n\n# matrix.send({ foo: 'abc', bar: 123 })\n\n\n\n\nexplicit data type names\n\n\ndataTypes:\n  type1:\n    foo: string\n  type2:\n    bar: integer\n\n\n\n\n# matrix.type('type1').send({foo: 'abc'})\n# matrix.type('type2').send({bar: 123})\n\n\n\n\noptions\n\n\nHere is the regex object for the different data formats.\n\n\nregex: {\n  string :/(string|str|s)/,\n  object :/(object|obj|o)/,\n  float :/(float|fl|f)/,\n  integer :/(integer|int|i)/,\n  boolean :/(b|bool|boolean)/,\n}\n\n\n\n\nThis is so you can do.\n\n\ndataTypes:\n  foo1: s\n  foo2: s\n  foo3: o", 
            "title": "Datatypes"
        }, 
        {
            "location": "/Configuration/datatypes/#datatypes", 
            "text": "We experimented with a loosely defined data structure, where the system would dynamically type information for storage and retrieval. This may return in the future, but for now, we need to clearly define data structures and types.  This is only useful if the application is  matrix.send() ing information for storage or dashboard use.", 
            "title": "dataTypes"
        }, 
        {
            "location": "/Configuration/datatypes/#types", 
            "text": "Types are segments of your data. These are used for filtering in the dashboard.", 
            "title": "types"
        }, 
        {
            "location": "/Configuration/datatypes/#data", 
            "text": "There are two ways to structure data types", 
            "title": "data"
        }, 
        {
            "location": "/Configuration/datatypes/#implicit-data-type-names", 
            "text": "dataTypes:\n  foo: string\n  bar: integer  # matrix.send({ foo: 'abc', bar: 123 })", 
            "title": "implicit data type names"
        }, 
        {
            "location": "/Configuration/datatypes/#explicit-data-type-names", 
            "text": "dataTypes:\n  type1:\n    foo: string\n  type2:\n    bar: integer  # matrix.type('type1').send({foo: 'abc'})\n# matrix.type('type2').send({bar: 123})", 
            "title": "explicit data type names"
        }, 
        {
            "location": "/Configuration/datatypes/#options", 
            "text": "Here is the regex object for the different data formats.  regex: {\n  string :/(string|str|s)/,\n  object :/(object|obj|o)/,\n  float :/(float|fl|f)/,\n  integer :/(integer|int|i)/,\n  boolean :/(b|bool|boolean)/,\n}  This is so you can do.  dataTypes:\n  foo1: s\n  foo2: s\n  foo3: o", 
            "title": "options"
        }, 
        {
            "location": "/Configuration/screens/", 
            "text": "Screens\n\n\nScreens are used to represent the location of the widgets on the dashboard. \n\n\nThe widgets will be layout on the web Dashboard throughtout the row from left to right, according to the list. \n- -\n represent the first widget of the row and \n-\n represent each of the following widgets on the same row. On the mobile apps, it will stack all widgets vertically.\n\n\nscreens:\n  # Row 1\n  - - oneWidget\n  # Row 2 \n  - - firstWidget\n    - secondWidget\n  # Row 3\n  - - leftWidget\n    - middleWidget\n    - otherWidget\n    - rightWidget\n\n\n\n\n\nFor widgets definition and sizing refer to \nWidgets\n.", 
            "title": "Screens"
        }, 
        {
            "location": "/Configuration/screens/#screens", 
            "text": "Screens are used to represent the location of the widgets on the dashboard.   The widgets will be layout on the web Dashboard throughtout the row from left to right, according to the list.  - -  represent the first widget of the row and  -  represent each of the following widgets on the same row. On the mobile apps, it will stack all widgets vertically.  screens:\n  # Row 1\n  - - oneWidget\n  # Row 2 \n  - - firstWidget\n    - secondWidget\n  # Row 3\n  - - leftWidget\n    - middleWidget\n    - otherWidget\n    - rightWidget  For widgets definition and sizing refer to  Widgets .", 
            "title": "Screens"
        }, 
        {
            "location": "/Configuration/filters/", 
            "text": "Filters overview coming soon", 
            "title": "Filters"
        }, 
        {
            "location": "/Configuration/widgets/", 
            "text": "Widgets\n\n\nA comprehensive overview coming soon. See \nexamples\n for now.\n\n\nLayout\n\n\nWidgets are defined in the \nwidgets\n key of an app config file. This is a collection where each Widget has a keyed name which is associated with an entry in \nscreens\n to determine it's location on the dashboard or the mobile apps.\n\n\nscreens:\n  - leftWidget\n  - rightWidget\n\nwidgets:\n  leftWidget: ...\n  rightWidget: ...\n\n\n\n\nThis way we can easily distinguish between layout and functionality.\n\n\nData Operations\n\n\nUsing \nformat\n, data operations can be applied to the data for each Display Widget. The current widget configuration supports the operations: \ncount\n, \nsum\n, \navg\n, \npercent\n, \nmax\n, \nmin\n, \nfixed\n, \nround\n.\n\n\nData Handling\n\n\nThe dashboard holds a central data store which the widgets receive or request data from.\n\n\nDefault operation is for a widget to be updated with data in real time. This is represented by enabling the option \nrealtime\n:\n\n\n// To enable realtime updates\nwidgets:\n  testWidget:\n     realtime: true\n\n\n\n\nThe alternative is to have a widget manually refresh it's data on an interval by disabling \nrealtime\n. Default \nrefresh\n is 5 seconds. If you wanted to refresh a graph every minute:\n\n\n// To disable realtime updates\nwidgets:\n  testWidget:\n     realtime: false\n     refresh: 60\n\n\n\n\nWidget Size\n\n\nWidgets can be resized horizontally with the \nsize\n attribute.\n\n\nSize is simply the percentage width you would like the widget to take. If size is not specified, then the widget will take up a equal proportion of the remaining width.\n\n\nExample\n\n\nwidgets:\n  halfWidth:\n    size: 50\n  quarterWidth:\n    size: 25\n    # size doesn't need to be specified\n  quarterWidth2:\n    # size doesn't need to be specified\n\n\n\n\nDisplay widgets\n\n\nIndicated via a \ndisplay\n option.\n\n\nwidgets:\n  barChart:\n    display: bar\n\n\n\n\nbar\n - bar chart\n\n\ndigit\n - numerical\n\n\nradar\n - radar chart\n\n\nline\n - line chart\n\n\nlist\n - data table\n\n\nlist-group\n - grouped data table\n\n\npie-chart\n - pie chart\n\n\npolar\n - polar area chart\n\n\nlabel\n - string display\n\n\ngauge\n - gauge\n\n\nindicator\n -  light indicator on/off\n\n\nmap\n - map\n\n\nlink\n - link to a destination (URL)\n\n\nInteractive Widgets\n\n\nIndicated via a \ncontrol\n option.\n\n\nwidgets:\n  controlButton:\n    control: button\n\n\n\n\ninput\n - input field, single or multiple\n\n\nbutton\n - button, single or multiple\n\n\nswitch\n - switch, single or multiple\n\n\nradio\n - radio, single or multiple\n\n\ndropdown\n - dropdown menu\n\n\nrange\n - range slider\n\n\nxy\n - track pad\n\n\nradial\n - joystick, single or multiple\n\n\ncolor\n - color picker", 
            "title": "Widgets"
        }, 
        {
            "location": "/Configuration/widgets/#widgets", 
            "text": "A comprehensive overview coming soon. See  examples  for now.", 
            "title": "Widgets"
        }, 
        {
            "location": "/Configuration/widgets/#layout", 
            "text": "Widgets are defined in the  widgets  key of an app config file. This is a collection where each Widget has a keyed name which is associated with an entry in  screens  to determine it's location on the dashboard or the mobile apps.  screens:\n  - leftWidget\n  - rightWidget\n\nwidgets:\n  leftWidget: ...\n  rightWidget: ...  This way we can easily distinguish between layout and functionality.", 
            "title": "Layout"
        }, 
        {
            "location": "/Configuration/widgets/#data-operations", 
            "text": "Using  format , data operations can be applied to the data for each Display Widget. The current widget configuration supports the operations:  count ,  sum ,  avg ,  percent ,  max ,  min ,  fixed ,  round .", 
            "title": "Data Operations"
        }, 
        {
            "location": "/Configuration/widgets/#data-handling", 
            "text": "The dashboard holds a central data store which the widgets receive or request data from.  Default operation is for a widget to be updated with data in real time. This is represented by enabling the option  realtime :  // To enable realtime updates\nwidgets:\n  testWidget:\n     realtime: true  The alternative is to have a widget manually refresh it's data on an interval by disabling  realtime . Default  refresh  is 5 seconds. If you wanted to refresh a graph every minute:  // To disable realtime updates\nwidgets:\n  testWidget:\n     realtime: false\n     refresh: 60", 
            "title": "Data Handling"
        }, 
        {
            "location": "/Configuration/widgets/#widget-size", 
            "text": "Widgets can be resized horizontally with the  size  attribute.  Size is simply the percentage width you would like the widget to take. If size is not specified, then the widget will take up a equal proportion of the remaining width.", 
            "title": "Widget Size"
        }, 
        {
            "location": "/Configuration/widgets/#example", 
            "text": "widgets:\n  halfWidth:\n    size: 50\n  quarterWidth:\n    size: 25\n    # size doesn't need to be specified\n  quarterWidth2:\n    # size doesn't need to be specified", 
            "title": "Example"
        }, 
        {
            "location": "/Configuration/widgets/#display-widgets", 
            "text": "Indicated via a  display  option.  widgets:\n  barChart:\n    display: bar  bar  - bar chart  digit  - numerical  radar  - radar chart  line  - line chart  list  - data table  list-group  - grouped data table  pie-chart  - pie chart  polar  - polar area chart  label  - string display  gauge  - gauge  indicator  -  light indicator on/off  map  - map  link  - link to a destination (URL)", 
            "title": "Display widgets"
        }, 
        {
            "location": "/Configuration/widgets/#interactive-widgets", 
            "text": "Indicated via a  control  option.  widgets:\n  controlButton:\n    control: button  input  - input field, single or multiple  button  - button, single or multiple  switch  - switch, single or multiple  radio  - radio, single or multiple  dropdown  - dropdown menu  range  - range slider  xy  - track pad  radial  - joystick, single or multiple  color  - color picker", 
            "title": "Interactive Widgets"
        }, 
        {
            "location": "/Configuration/services/", 
            "text": "Services\n\n\nServices are used to indicate which computer vision libraries a given application will request to utilize.\n\n\nExample Service Definition \n Usage\n\n\n# config.yaml\n\nservices:\n  faceTest:\n    engine: detection\n    type: face\n\n# app.js\nmatrix.init('face')\n\n\n\n\nFor the data formats of the payloads returned, refer to \nComputer Vision\n\n\nEngines \n Types\n\n\ndetection\n\n\nface\n - returns basic face detection information\n\ndemographics\n - returns advanced demographic information\n\n\ngesture\n\n\npalm\n - looks for open palm\n\nfist\n - looks for closed fist\n\nthumb-up\n - looks for thumb up sign", 
            "title": "Services"
        }, 
        {
            "location": "/Configuration/services/#services", 
            "text": "Services are used to indicate which computer vision libraries a given application will request to utilize.", 
            "title": "Services"
        }, 
        {
            "location": "/Configuration/services/#example-service-definition-usage", 
            "text": "# config.yaml\n\nservices:\n  faceTest:\n    engine: detection\n    type: face\n\n# app.js\nmatrix.init('face')  For the data formats of the payloads returned, refer to  Computer Vision", 
            "title": "Example Service Definition &amp; Usage"
        }, 
        {
            "location": "/Configuration/services/#engines-types", 
            "text": "", 
            "title": "Engines &amp; Types"
        }, 
        {
            "location": "/Configuration/services/#detection", 
            "text": "face  - returns basic face detection information demographics  - returns advanced demographic information", 
            "title": "detection"
        }, 
        {
            "location": "/Configuration/services/#gesture", 
            "text": "palm  - looks for open palm fist  - looks for closed fist thumb-up  - looks for thumb up sign", 
            "title": "gesture"
        }, 
        {
            "location": "/Configuration/example-config/", 
            "text": "MatrixOS Configuration File\n\n\nDataTypes\n\n\nmonitor:\n  cpu: float\n  memory: float\n\n\n\n\nlocation:\n  latitude: float\n  longitude: float\n  label: string\n\n\n\n\nLayout\n\n\nscreens:\n  - - digitTest\n    - labelTest\n  - - barChartTest\n    - lineChartTest\n\n\n\n\nWidgets\n\n\nGot to \nWidgets\n for a detailed example of each Widget.\n\n\nConfiguration file\n\n\nYo can see a basic example of a configuration file here: \nexample.yaml\n. This configuration corresponds to the dashboard you see below:", 
            "title": "Config File"
        }, 
        {
            "location": "/Configuration/example-config/#matrixos-configuration-file", 
            "text": "", 
            "title": "MatrixOS Configuration File"
        }, 
        {
            "location": "/Configuration/example-config/#datatypes", 
            "text": "monitor:\n  cpu: float\n  memory: float  location:\n  latitude: float\n  longitude: float\n  label: string", 
            "title": "DataTypes"
        }, 
        {
            "location": "/Configuration/example-config/#layout", 
            "text": "screens:\n  - - digitTest\n    - labelTest\n  - - barChartTest\n    - lineChartTest", 
            "title": "Layout"
        }, 
        {
            "location": "/Configuration/example-config/#widgets", 
            "text": "Got to  Widgets  for a detailed example of each Widget.", 
            "title": "Widgets"
        }, 
        {
            "location": "/Configuration/example-config/#configuration-file", 
            "text": "Yo can see a basic example of a configuration file here:  example.yaml . This configuration corresponds to the dashboard you see below:", 
            "title": "Configuration file"
        }, 
        {
            "location": "/Configuration/examples/", 
            "text": "MatrixOS Widget examples\n\n\nThere are many \"general setting\" to make the configuration for the widgets. Here we show you the most common use for each of them. \n\n\nRemember that there are other \"optional settings\" that can be added for more specific things like Data handling (refresh time), Data format and size. You can refer to \nWidgets\n for a better explanation on this subjects.\n\n\nDisplays\n\n\nDigit\n\n\n\n\ndigitTest:\n  display: digit\n  type: monitor\n  key: cpu\n  format: round\n  label: cpu\n\n\n\n\nHandling Code\n\n\nmatrix.type('monitor').send({\n  'cpu': 2.4,\n  'memory': 5.4 }\n);  \n\n\n\n\nLabel\n\n\n\n\nlabelTest:\n  display: label\n  type: uv\n  key: risk\n  label: UV Risk\n\n\n\n\nHandling Code\n\n\nmatrix.type('uv').send({\n  'value': 0.56773,\n  'risk': 'Low' }\n);  \n\n\n\n\nBar Chart\n\n\n\n\nbarChartTest:\n  display: bar\n  type: monitor\n  keys: cpu, memory\n  format: avg\n  realtime: false\n  refresh: 60\n  label: Bar Chart\n\n\n\n\nHandling Code\n\n\nmatrix.type('monitor').send({\n  'cpu': 7.03,\n  'memory': 2.30 }\n);  \n\n\n\n\nLine Chart\n\n\n\n\nlineChartTest:\n  display: line\n  type: monitor\n  format: avg\n  keys: cpu, memory\n  realtime: true\n  label: Line Chart\n\n\n\n\nHandling Code\n\n\nmatrix.type('monitor').send({\n  'cpu': 7.03,\n  'memory': 2.30 }\n);  \n\n\n\n\nRadar Chart\n\n\n\n\nradarTest:\n  display: radar\n  type: emotions\n  keys: happy,sad,disgust,surprised,confused,calm,angry\n  label: Emotions\n\n\n\n\nHandling Code\n\n\nmatrix.type('emotions').send({\n  'happy': 67,\n  'sad': 50,\n  'disgust': 78,\n  'surprised': 56,\n  'confused': 86,\n  'calm': 70,\n  'angry': 60 }\n);  \n\n\n\n\nPie Chart\n\n\n\n\npieChartTest:\n  display: pie-chart\n  type: gender\n  keys: women,men\n  label: Gender\n\n\n\n\nHandling Code\n\n\nmatrix.type('gender').send({\n  'women': 76,\n  'men': 45 }\n);  \n\n\n\n\nPolar Chart\n\n\n\n\npolarTest:\n  display: polar\n  type: emotions\n  keys: happy,sad,disgust,surprised,confused,calm,angry\n  label: Emotions\n\n\n\n\nHandling Code\n\n\nmatrix.type('emotions').send({\n  'happy': 67,\n  'sad': 50,\n  'disgust': 78,\n  'surprised': 56,\n  'confused': 86,\n  'calm': 70,\n  'angry': 60 }\n);  \n\n\n\n\nGauge\n\n\n\n\ngaugeTest:\n  display: gauge\n  type: detection\n  keys: views\n  min: 0\n  max: 100\n  label: 'Views'\n\n\n\n\nHandling Code\n\n\nmatrix.type('detection').send({\n  'views': 60,\n  'impressions': 100 }\n);  \n\n\n\n\nIndicator\n\n\n\n\nindicatorTest:\n  display: indicator\n  type: system\n  keys: isOn\n  label: 'Indicator Test'\n\n\n\n\nHandling Code\n\n\nmatrix.type('system').send({\n  'isOn': true}\n);  \n\n\n\n\nMap\n\n\n\n\nmapTest:\n  display: map\n  type: location\n  label: 'Map Test'\n\n\n\n\nHandling Code\n\n\nmatrix.type('location').send({\n  'latitude': 25.791632,\n  'longitude': -80.1414447,\n  'label': 'AdMobilize'}\n);  \n\n\n\n\nLists\n\n\n\n\nlistTest:\n  display: list\n  type: device\n  keys: Hostname,Type,Platform,Arch\n  label: Secret Information\n\n\n\n\nHandling Code\n\n\nmatrix.type('device').send({\n  'Hostname': 'h7n.domain',\n  'Type': 'Darwin',\n  'Platform': 'darwin',\n  'Arch': 'x64'}\n);  \n\n\n\n\nList Group\n\n\nSimple Group\n\n\n\n\ninfo:\n  display: list-group\n  type: vehicleDetection\n  keys: count\n  format: count\n  label: Total\n\n\n\n\nHandling Code\n\n\nmatrix.type('vehicleDetection').send({\n  'zoneId': 'zone1',\n  'count': '4',\n  'speed': '56'}\n);  \n\n\n\n\nGroup by Key\n\n\n\n\ninfo:\n  display: list-group\n  type: device\n  keys: zone, count\n  format: count\n  groupby: zone\n  label: Total\n\n\n\n\nHandling Code\n\n\nmatrix.type('vehicleDetection').send({\n  'zoneId': 'zone1',\n  'count': '4',\n  'speed': '56'}\n);  \n\n\n\n\nLinks\n\n\n\n\nlink:\n  display: link\n  label: \nLink display\n\n  title: \nGoogle\n\n  url: \nhttps://www.google.com\n\n\n\n\n\nInteractive (Controls)\n\n\nInput\n\n\nSingle\n\n\n\n\n  inputTest:\n    control: input\n    event: testInput\n    value: 'type text'\n    label: 'Test Input'\n\n\n\n\nHandling Code\n\n\nmatrix.on('testInput', function(p){\n var text = p.value;\n})\n\n\n\n\nMultiple\n\n\n\n\n  inputMapTest:\n    control: input\n    map:\n      - event: testInput1\n        value: first type text\n      - event: testInput2\n        value: second type text\n    label: Test Input Map\n\n\n\n\nHandling Code\n\n\nmatrix.on('testInput1', function(p){\n var text = p.value;\n})\n\nmatrix.on('testInput2', function(p){\n var text = p.value;\n})\n\n\n\n\n\nButtons\n\n\nSingle\n\n\n\n\n  buttonTest:\n    control: button\n    event: buttonInfo\n    value: Get Secret Information\n    label: Hacking Buttons\n\n\n\n\nHandling Code\n\n\nmatrix.on('buttonInfo', function(){\n  // ...\n})\n\n\n\n\nMultiple\n\n\n\n\n  buttonMapTest:\n    control: button\n    map:\n      - event: buttonUp\n        value: amps+\n      - event: buttonDown\n        value: amps-\n      - event: buttonStart\n        value: begin\n      - event: buttonStop\n        value: end\n      - event: buttonCapture\n        value: capture\n      - event: buttonSlow\n        value: refresh+\n      - event: buttonFast\n        value: refresh-\n    label: Matrix Activation Buttons\n\n\n\n\nHandling Code\n\n\nmatrix.on('buttonUp', function(){\n  // ...\n})\n\nmatrix.on('buttonDown', function(){\n  // ...\n})\n\nmatrix.on('buttonStart', function(){\n  // ...\n})\n\nmatrix.on('buttonStop', function(){\n  // ...\n})\n\nmatrix.on('buttonCapture', function(){\n  // ...\n})\n\nmatrix.on('buttonSlow', function(){\n  // ...\n})\n\nmatrix.on('buttonFast', function(){\n  // ...\n})\n\n\n\n\nSwitch\n\n\nSingle\n\n\n\n\n  switchTest:\n    control: switch\n    event: ledEnabledChanged\n    value: Leds enabled\n    label: Switch Test\n\n\n\n\nHandling Code\n\n\nmatrix.on('ledEnabledChanged', function(p){\n var isOn = p.value;\n})\n\n\n\n\nMultiple\n\n\n\n\n  switchMapTest:\n    control: switch\n    map:\n      - event: ledEnabledChanged\n        value: Leds enabled\n      - event: detectionEnabledChanged\n        value: Detection Enabled\n    label: Switch Map Test\n\n\n\n\nHandling Code\n\n\nmatrix.on('ledEnabledChanged', function(p){\n var isOn = p.value;\n})\n\nmatrix.on('detectionEnabledChanged', function(p){\n var isOn = p.value;\n})\n\n\n\n\nRadio\n\n\n\n\n  radioTest:\n    control: radio\n    map:\n      - event: optionOneSelected\n        value: Option One\n      - event: optionTwoSelected\n        value: Option Two\n    label: Radio Test\n\n\n\n\nHandling Code\n\n\nmatrix.on('optionOneSelected', function(p){\n  // ...\n})\n\nmatrix.on('optionTwoSelected', function(p){\n  // ...\n})\n\n\n\n\nDrop Downs\n\n\n\n\n  dropDownTest:\n    control: dropdown\n    map:\n      - event: optionOneSelected\n        value: Option One\n      - event: optionTwoSelected\n        value: Option Two\n    label: Dropdown Test\n\n\n\n\nHandling Code\n\n\nmatrix.on('optionOneSelected', function(){\n //...\n})\n\nmatrix.on('optionTwoSelected', function(){\n //...\n})\n\n\n\n\nRange\n\n\n\n\n  rangeTest:\n    control: range\n    event: rangeChanged\n    min: 0\n    max: 35\n    label: Range Test\n\n\n\n\nHandling Code\n\n\nmatrix.on('rangeChanged', function(p){\n var value = p.value;\n})\n\n\n\n\nXY\n\n\n\n\n  xyTest:\n    control: xy\n    event: xyChanging\n    value: 'xy'\n    xMax: 100\n    yMax: 50\n    label: Test XY\n\n\n\n\nHandling Code\n\n\nmatrix.on('xyChanging', function(p){\n var x = p.value.x;\n var y = p.value.y;\n})\n\n\n\n\nRadial\n\n\nSingle\n\n\n\n\n  radial:\n    control: radial\n    event: radialChanging\n    label: Radial Test\n\n\n\n\nHandling Code\n\n\nmatrix.on('radialChanging', function(p){\n var x = p.value.x; //from -1 to 1\n var y = p.value.y; //from -1 to 1\n})\n\n\n\n\nMultiple\n\n\n\n\n  radialMap:\n    control: radial\n    map:\n    - event: radialRChanging\n      value: right\n    - event: radialLChanging\n      value: left\n    label: Radial Map Test\n\n\n\n\nHandling Code\n\n\nmatrix.on('radialRChanging', function(p){\n var x = p.value.x; //from -1 to 1\n var y = p.value.y; //from -1 to 1\n})\n\nmatrix.on('radialLChanging', function(p){\n var x = p.value.x; //from -1 to 1\n var y = p.value.y; //from -1 to 1\n})\n\n\n\n\nColor\n\n\n \n \n\n\n  color:\n    control: color\n    event: colorChange\n    value: 'color'\n    label: 'Change MATRIX color'\n\n\n\n\nHandling Code\n\n\nmatrix.on('colorChange', function(color){\n  color = color.value;\n  matrix.led(color).render();\n});\n\n\n\n\nResponsive Data Flow\n\n\nmatrix.on('buttonInfo', function(){\n  matrix.type('device').send({\n    'os_hostname': os.hostname(),\n    'os_type': os.type(),\n    'os_platform': os.platform(),\n    'os_arch': os.arch()\n  });\n})\n\n\n\n\nWhen \nbuttonInfo\n is triggered, respond with information with a type \ndevice\n.\n\n\nThe list looks for\n\n\nwidgets:\n  list:\n    type: device\n\n\n\n\nThe \nlist\n widget displays information of type \ndevice\n.", 
            "title": "Widget Examples"
        }, 
        {
            "location": "/Configuration/examples/#matrixos-widget-examples", 
            "text": "There are many \"general setting\" to make the configuration for the widgets. Here we show you the most common use for each of them.   Remember that there are other \"optional settings\" that can be added for more specific things like Data handling (refresh time), Data format and size. You can refer to  Widgets  for a better explanation on this subjects.", 
            "title": "MatrixOS Widget examples"
        }, 
        {
            "location": "/Configuration/examples/#displays", 
            "text": "", 
            "title": "Displays"
        }, 
        {
            "location": "/Configuration/examples/#digit", 
            "text": "digitTest:\n  display: digit\n  type: monitor\n  key: cpu\n  format: round\n  label: cpu", 
            "title": "Digit"
        }, 
        {
            "location": "/Configuration/examples/#handling-code", 
            "text": "matrix.type('monitor').send({\n  'cpu': 2.4,\n  'memory': 5.4 }\n);", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#label", 
            "text": "labelTest:\n  display: label\n  type: uv\n  key: risk\n  label: UV Risk", 
            "title": "Label"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_1", 
            "text": "matrix.type('uv').send({\n  'value': 0.56773,\n  'risk': 'Low' }\n);", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#bar-chart", 
            "text": "barChartTest:\n  display: bar\n  type: monitor\n  keys: cpu, memory\n  format: avg\n  realtime: false\n  refresh: 60\n  label: Bar Chart", 
            "title": "Bar Chart"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_2", 
            "text": "matrix.type('monitor').send({\n  'cpu': 7.03,\n  'memory': 2.30 }\n);", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#line-chart", 
            "text": "lineChartTest:\n  display: line\n  type: monitor\n  format: avg\n  keys: cpu, memory\n  realtime: true\n  label: Line Chart", 
            "title": "Line Chart"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_3", 
            "text": "matrix.type('monitor').send({\n  'cpu': 7.03,\n  'memory': 2.30 }\n);", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#radar-chart", 
            "text": "radarTest:\n  display: radar\n  type: emotions\n  keys: happy,sad,disgust,surprised,confused,calm,angry\n  label: Emotions", 
            "title": "Radar Chart"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_4", 
            "text": "matrix.type('emotions').send({\n  'happy': 67,\n  'sad': 50,\n  'disgust': 78,\n  'surprised': 56,\n  'confused': 86,\n  'calm': 70,\n  'angry': 60 }\n);", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#pie-chart", 
            "text": "pieChartTest:\n  display: pie-chart\n  type: gender\n  keys: women,men\n  label: Gender", 
            "title": "Pie Chart"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_5", 
            "text": "matrix.type('gender').send({\n  'women': 76,\n  'men': 45 }\n);", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#polar-chart", 
            "text": "polarTest:\n  display: polar\n  type: emotions\n  keys: happy,sad,disgust,surprised,confused,calm,angry\n  label: Emotions", 
            "title": "Polar Chart"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_6", 
            "text": "matrix.type('emotions').send({\n  'happy': 67,\n  'sad': 50,\n  'disgust': 78,\n  'surprised': 56,\n  'confused': 86,\n  'calm': 70,\n  'angry': 60 }\n);", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#gauge", 
            "text": "gaugeTest:\n  display: gauge\n  type: detection\n  keys: views\n  min: 0\n  max: 100\n  label: 'Views'", 
            "title": "Gauge"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_7", 
            "text": "matrix.type('detection').send({\n  'views': 60,\n  'impressions': 100 }\n);", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#indicator", 
            "text": "indicatorTest:\n  display: indicator\n  type: system\n  keys: isOn\n  label: 'Indicator Test'", 
            "title": "Indicator"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_8", 
            "text": "matrix.type('system').send({\n  'isOn': true}\n);", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#map", 
            "text": "mapTest:\n  display: map\n  type: location\n  label: 'Map Test'", 
            "title": "Map"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_9", 
            "text": "matrix.type('location').send({\n  'latitude': 25.791632,\n  'longitude': -80.1414447,\n  'label': 'AdMobilize'}\n);", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#lists", 
            "text": "listTest:\n  display: list\n  type: device\n  keys: Hostname,Type,Platform,Arch\n  label: Secret Information", 
            "title": "Lists"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_10", 
            "text": "matrix.type('device').send({\n  'Hostname': 'h7n.domain',\n  'Type': 'Darwin',\n  'Platform': 'darwin',\n  'Arch': 'x64'}\n);", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#list-group", 
            "text": "", 
            "title": "List Group"
        }, 
        {
            "location": "/Configuration/examples/#simple-group", 
            "text": "info:\n  display: list-group\n  type: vehicleDetection\n  keys: count\n  format: count\n  label: Total", 
            "title": "Simple Group"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_11", 
            "text": "matrix.type('vehicleDetection').send({\n  'zoneId': 'zone1',\n  'count': '4',\n  'speed': '56'}\n);", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#group-by-key", 
            "text": "info:\n  display: list-group\n  type: device\n  keys: zone, count\n  format: count\n  groupby: zone\n  label: Total", 
            "title": "Group by Key"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_12", 
            "text": "matrix.type('vehicleDetection').send({\n  'zoneId': 'zone1',\n  'count': '4',\n  'speed': '56'}\n);", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#links", 
            "text": "link:\n  display: link\n  label:  Link display \n  title:  Google \n  url:  https://www.google.com", 
            "title": "Links"
        }, 
        {
            "location": "/Configuration/examples/#interactive-controls", 
            "text": "", 
            "title": "Interactive (Controls)"
        }, 
        {
            "location": "/Configuration/examples/#input", 
            "text": "", 
            "title": "Input"
        }, 
        {
            "location": "/Configuration/examples/#single", 
            "text": "inputTest:\n    control: input\n    event: testInput\n    value: 'type text'\n    label: 'Test Input'", 
            "title": "Single"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_13", 
            "text": "matrix.on('testInput', function(p){\n var text = p.value;\n})", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#multiple", 
            "text": "inputMapTest:\n    control: input\n    map:\n      - event: testInput1\n        value: first type text\n      - event: testInput2\n        value: second type text\n    label: Test Input Map", 
            "title": "Multiple"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_14", 
            "text": "matrix.on('testInput1', function(p){\n var text = p.value;\n})\n\nmatrix.on('testInput2', function(p){\n var text = p.value;\n})", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#buttons", 
            "text": "", 
            "title": "Buttons"
        }, 
        {
            "location": "/Configuration/examples/#single_1", 
            "text": "buttonTest:\n    control: button\n    event: buttonInfo\n    value: Get Secret Information\n    label: Hacking Buttons", 
            "title": "Single"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_15", 
            "text": "matrix.on('buttonInfo', function(){\n  // ...\n})", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#multiple_1", 
            "text": "buttonMapTest:\n    control: button\n    map:\n      - event: buttonUp\n        value: amps+\n      - event: buttonDown\n        value: amps-\n      - event: buttonStart\n        value: begin\n      - event: buttonStop\n        value: end\n      - event: buttonCapture\n        value: capture\n      - event: buttonSlow\n        value: refresh+\n      - event: buttonFast\n        value: refresh-\n    label: Matrix Activation Buttons", 
            "title": "Multiple"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_16", 
            "text": "matrix.on('buttonUp', function(){\n  // ...\n})\n\nmatrix.on('buttonDown', function(){\n  // ...\n})\n\nmatrix.on('buttonStart', function(){\n  // ...\n})\n\nmatrix.on('buttonStop', function(){\n  // ...\n})\n\nmatrix.on('buttonCapture', function(){\n  // ...\n})\n\nmatrix.on('buttonSlow', function(){\n  // ...\n})\n\nmatrix.on('buttonFast', function(){\n  // ...\n})", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#switch", 
            "text": "", 
            "title": "Switch"
        }, 
        {
            "location": "/Configuration/examples/#single_2", 
            "text": "switchTest:\n    control: switch\n    event: ledEnabledChanged\n    value: Leds enabled\n    label: Switch Test", 
            "title": "Single"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_17", 
            "text": "matrix.on('ledEnabledChanged', function(p){\n var isOn = p.value;\n})", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#multiple_2", 
            "text": "switchMapTest:\n    control: switch\n    map:\n      - event: ledEnabledChanged\n        value: Leds enabled\n      - event: detectionEnabledChanged\n        value: Detection Enabled\n    label: Switch Map Test", 
            "title": "Multiple"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_18", 
            "text": "matrix.on('ledEnabledChanged', function(p){\n var isOn = p.value;\n})\n\nmatrix.on('detectionEnabledChanged', function(p){\n var isOn = p.value;\n})", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#radio", 
            "text": "radioTest:\n    control: radio\n    map:\n      - event: optionOneSelected\n        value: Option One\n      - event: optionTwoSelected\n        value: Option Two\n    label: Radio Test", 
            "title": "Radio"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_19", 
            "text": "matrix.on('optionOneSelected', function(p){\n  // ...\n})\n\nmatrix.on('optionTwoSelected', function(p){\n  // ...\n})", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#drop-downs", 
            "text": "dropDownTest:\n    control: dropdown\n    map:\n      - event: optionOneSelected\n        value: Option One\n      - event: optionTwoSelected\n        value: Option Two\n    label: Dropdown Test", 
            "title": "Drop Downs"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_20", 
            "text": "matrix.on('optionOneSelected', function(){\n //...\n})\n\nmatrix.on('optionTwoSelected', function(){\n //...\n})", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#range", 
            "text": "rangeTest:\n    control: range\n    event: rangeChanged\n    min: 0\n    max: 35\n    label: Range Test", 
            "title": "Range"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_21", 
            "text": "matrix.on('rangeChanged', function(p){\n var value = p.value;\n})", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#xy", 
            "text": "xyTest:\n    control: xy\n    event: xyChanging\n    value: 'xy'\n    xMax: 100\n    yMax: 50\n    label: Test XY", 
            "title": "XY"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_22", 
            "text": "matrix.on('xyChanging', function(p){\n var x = p.value.x;\n var y = p.value.y;\n})", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#radial", 
            "text": "", 
            "title": "Radial"
        }, 
        {
            "location": "/Configuration/examples/#single_3", 
            "text": "radial:\n    control: radial\n    event: radialChanging\n    label: Radial Test", 
            "title": "Single"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_23", 
            "text": "matrix.on('radialChanging', function(p){\n var x = p.value.x; //from -1 to 1\n var y = p.value.y; //from -1 to 1\n})", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#multiple_3", 
            "text": "radialMap:\n    control: radial\n    map:\n    - event: radialRChanging\n      value: right\n    - event: radialLChanging\n      value: left\n    label: Radial Map Test", 
            "title": "Multiple"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_24", 
            "text": "matrix.on('radialRChanging', function(p){\n var x = p.value.x; //from -1 to 1\n var y = p.value.y; //from -1 to 1\n})\n\nmatrix.on('radialLChanging', function(p){\n var x = p.value.x; //from -1 to 1\n var y = p.value.y; //from -1 to 1\n})", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#color", 
            "text": "color:\n    control: color\n    event: colorChange\n    value: 'color'\n    label: 'Change MATRIX color'", 
            "title": "Color"
        }, 
        {
            "location": "/Configuration/examples/#handling-code_25", 
            "text": "matrix.on('colorChange', function(color){\n  color = color.value;\n  matrix.led(color).render();\n});", 
            "title": "Handling Code"
        }, 
        {
            "location": "/Configuration/examples/#responsive-data-flow", 
            "text": "matrix.on('buttonInfo', function(){\n  matrix.type('device').send({\n    'os_hostname': os.hostname(),\n    'os_type': os.type(),\n    'os_platform': os.platform(),\n    'os_arch': os.arch()\n  });\n})  When  buttonInfo  is triggered, respond with information with a type  device .  The list looks for  widgets:\n  list:\n    type: device  The  list  widget displays information of type  device .", 
            "title": "Responsive Data Flow"
        }, 
        {
            "location": "/intro/matrix-troubleshooting/", 
            "text": "Troubleshooting\n\n\nStarting MOS from your device, you will have access to more error messages with \nDEBUG=*,-engine*,-Component*\n prepended to the commands presented below. \nengine\n, refers to \nengine.io\n, sockets, and \nComponent\n, is very verbose hardware communications, disable these filters as necessary.\n\n\nTest applications\n\n\nSeveral applications are available in the \nMATRIX App Store\n.\n\n\n\n\nsensorTest\n - Tests all sensors\n\n\nclock\n - Runs a clock which tests the LEDs\n\n\nfaceTest - Face detection services via\nmalos-eye`.\n\n\n\n\nLights are spinning, but don't stop\n\n\nExits with message\n\n\nDevice Error undefined\n\n\n\n\nSolution. Run again with environment set.\n\n\nNODE_ENV=rc node index.js\n\n\n\n\nMATRIX Vision Services not working\n\n\nMessages appear when \nmalos_eye\n is running, and hardware is not properly installed. Please shut off device, firmly reconnect the camera connection, and restart.\n\n\nVIDIOC_STREAMON: Invalid argument\nVIDIOC_STREAMON: Invalid argument\n\nMessage received: gesture error: Could not read frame\nMessage received: gesture error: 1, Could not send update for GESTURE driver.\n\nselect timeout\nselect timeout\nselect timeout\nselect timeout", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/intro/matrix-troubleshooting/#troubleshooting", 
            "text": "Starting MOS from your device, you will have access to more error messages with  DEBUG=*,-engine*,-Component*  prepended to the commands presented below.  engine , refers to  engine.io , sockets, and  Component , is very verbose hardware communications, disable these filters as necessary.", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/intro/matrix-troubleshooting/#test-applications", 
            "text": "Several applications are available in the  MATRIX App Store .   sensorTest  - Tests all sensors  clock  - Runs a clock which tests the LEDs  faceTest - Face detection services via malos-eye`.", 
            "title": "Test applications"
        }, 
        {
            "location": "/intro/matrix-troubleshooting/#lights-are-spinning-but-dont-stop", 
            "text": "Exits with message  Device Error undefined  Solution. Run again with environment set.  NODE_ENV=rc node index.js", 
            "title": "Lights are spinning, but don't stop"
        }, 
        {
            "location": "/intro/matrix-troubleshooting/#matrix-vision-services-not-working", 
            "text": "Messages appear when  malos_eye  is running, and hardware is not properly installed. Please shut off device, firmly reconnect the camera connection, and restart.  VIDIOC_STREAMON: Invalid argument\nVIDIOC_STREAMON: Invalid argument\n\nMessage received: gesture error: Could not read frame\nMessage received: gesture error: 1, Could not send update for GESTURE driver.\n\nselect timeout\nselect timeout\nselect timeout\nselect timeout", 
            "title": "MATRIX Vision Services not working"
        }, 
        {
            "location": "/Reference/creator/", 
            "text": "MATRIX Creator\n\n\n\n\nTechnical Datasheets:\n\n\n\n\n\n\nAtmel 32 bits Cortex M3 SAM3S2\n\n\n\n\n\n\nXilinx Spartan 6S XC6SLX4 FPGA\n\n\n\n\n\n\n8 MEMS audio sensor digital microphones\n\n\n\n\n\n\nST LSM9DS1 3D accelerometer, 3D gyroscope, 3D magnetometer\n\n\n\n\n\n\nST HTS221 digital sensor for relative humidity and temperature\n\n\n\n\n\n\nNXP PN512 NFC reader\n\n\n\n\n\n\nNXP MPL3115A2 Altimeter\n\n\n\n\n\n\nVishay VEML6070 UV Light Sensor\n\n\n\n\n\n\nVishay INFRARED Receptor\n\n\n\n\n\n\nRGBW everloop LED", 
            "title": "Creator"
        }, 
        {
            "location": "/Reference/creator/#matrix-creator", 
            "text": "", 
            "title": "MATRIX Creator"
        }, 
        {
            "location": "/Reference/creator/#technical-datasheets", 
            "text": "Atmel 32 bits Cortex M3 SAM3S2    Xilinx Spartan 6S XC6SLX4 FPGA    8 MEMS audio sensor digital microphones    ST LSM9DS1 3D accelerometer, 3D gyroscope, 3D magnetometer    ST HTS221 digital sensor for relative humidity and temperature    NXP PN512 NFC reader    NXP MPL3115A2 Altimeter    Vishay VEML6070 UV Light Sensor    Vishay INFRARED Receptor    RGBW everloop LED", 
            "title": "Technical Datasheets:"
        }, 
        {
            "location": "/Reference/voice/", 
            "text": "MATRIX Voice\n\n\nMATRIX Voice is an open-source VOICE RECOGNITION platform consisting of a 3.14-inches in diameter dev board, with a radial array of 7 MEMS microphones connected to a Xilinx Spartan6 FPGA \n 64 Mbit SDRAM with 18 RGBW LED\u2019s \n 64 GPIO pins. \n\n\nBack MATRIX Voice on Indiegogo! Click here.\n\n\nSystem Architecture\n\n\n\n\nHarware Integrations\n\n\n\n\nFPGA\n\n\nHAL\n\n\nMALOS\n\n\nMicrophone\n\n\n\n\nVoice Engine Integrations\n\n\n\n\nAlexa\n \n\n\n\n\nComing Soon:\n\n\n\n\nWit.ai\n\n\nMicrosoft Cognitive Service\n\n\nGoogle Speech API\n\n\nHoundify \n\n\n\n\nSoftware Integrations\n\n\n\n\nGetting Started with MATRIX OS\n\n\nMATRIX OS\n\n\nMATRIX CLI\n\n\n\n\nTechnical Datasheets:\n\n\n\n\n\n\nAtmel 32 bits Cortex M3 SAM3S2\n\n\n\n\n\n\nXilinx Spartan 6S XC6SLX4 FPGA\n\n\n\n\n\n\n7 MEMS audio sensor digital microphones\n\n\n\n\n\n\nRGBW everloop LED", 
            "title": "Voice"
        }, 
        {
            "location": "/Reference/voice/#matrix-voice", 
            "text": "MATRIX Voice is an open-source VOICE RECOGNITION platform consisting of a 3.14-inches in diameter dev board, with a radial array of 7 MEMS microphones connected to a Xilinx Spartan6 FPGA   64 Mbit SDRAM with 18 RGBW LED\u2019s   64 GPIO pins.", 
            "title": "MATRIX Voice"
        }, 
        {
            "location": "/Reference/voice/#back-matrix-voice-on-indiegogo-click-here", 
            "text": "", 
            "title": "Back MATRIX Voice on Indiegogo! Click here."
        }, 
        {
            "location": "/Reference/voice/#system-architecture", 
            "text": "", 
            "title": "System Architecture"
        }, 
        {
            "location": "/Reference/voice/#harware-integrations", 
            "text": "FPGA  HAL  MALOS  Microphone", 
            "title": "Harware Integrations"
        }, 
        {
            "location": "/Reference/voice/#voice-engine-integrations", 
            "text": "Alexa", 
            "title": "Voice Engine Integrations"
        }, 
        {
            "location": "/Reference/voice/#coming-soon", 
            "text": "Wit.ai  Microsoft Cognitive Service  Google Speech API  Houndify", 
            "title": "Coming Soon:"
        }, 
        {
            "location": "/Reference/voice/#software-integrations", 
            "text": "Getting Started with MATRIX OS  MATRIX OS  MATRIX CLI", 
            "title": "Software Integrations"
        }, 
        {
            "location": "/Reference/voice/#technical-datasheets", 
            "text": "Atmel 32 bits Cortex M3 SAM3S2    Xilinx Spartan 6S XC6SLX4 FPGA    7 MEMS audio sensor digital microphones    RGBW everloop LED", 
            "title": "Technical Datasheets:"
        }, 
        {
            "location": "/HAL/overview/", 
            "text": "Overview\n\n\nHAL is the lowest-level abstraction for the MATRIX Creator drivers. You can interface directly with HAL, or use the higher level components like MALOS, and the MATRIX OS itself.\n\n\nPre-Requisites\n\n\nIt does have some package dependencies, so please make sure to install the pre-requisites.\n\n\nsudo apt-get install cmake g++ git\ngit clone https://github.com/matrix-io/matrix-creator-hal.git\n\n\n\n\nBuild\n\n\nTo start working with HAL directly, you'll need to run \nsudo make install\n to get the build running. \n\n\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make \n sudo make install\n[100%] Built target matrix_creator_hal\nInstall the project...\n-- Install configuration: \n\n-- Up-to-date: /usr/local/lib/libmatrix_creator_hal.a\n-- Installing: /usr/local/include/matrix_hal/creator_memory_map.h\n-- Installing: /usr/local/include/matrix_hal/everloop.h\n-- Installing: /usr/local/include/matrix_hal/humidity_data.h\n-- Installing: /usr/local/include/matrix_hal/imu_sensor.h\n-- Installing: /usr/local/include/matrix_hal/pressure_data.h\n-- Installing: /usr/local/include/matrix_hal/dummy_data.h\n-- Installing: /usr/local/include/matrix_hal/everloop_image.h\n-- Installing: /usr/local/include/matrix_hal/humidity_sensor.h\n-- Installing: /usr/local/include/matrix_hal/matrix_driver.h\n-- Installing: /usr/local/include/matrix_hal/pressure_sensor.h\n-- Installing: /usr/local/include/matrix_hal/dummy_sensor.h\n-- Installing: /usr/local/include/matrix_hal/gpio_control.h\n-- Installing: /usr/local/include/matrix_hal/imu_data.h\n-- Installing: /usr/local/include/matrix_hal/microphone_array.h\n-- Installing: /usr/local/include/matrix_hal/wishbone_bus.h\n\n\n\n\nExamples\n\n\nRun some of the examples below.\n\n\n# should already be in ~/matrix-creator-hal/build directory.\ncd demos\n\n# run the everloop demo\n./everloop_demo\n\n# see the rest of the examples\nls -l", 
            "title": "Overview"
        }, 
        {
            "location": "/HAL/overview/#overview", 
            "text": "HAL is the lowest-level abstraction for the MATRIX Creator drivers. You can interface directly with HAL, or use the higher level components like MALOS, and the MATRIX OS itself.", 
            "title": "Overview"
        }, 
        {
            "location": "/HAL/overview/#pre-requisites", 
            "text": "It does have some package dependencies, so please make sure to install the pre-requisites.  sudo apt-get install cmake g++ git\ngit clone https://github.com/matrix-io/matrix-creator-hal.git", 
            "title": "Pre-Requisites"
        }, 
        {
            "location": "/HAL/overview/#build", 
            "text": "To start working with HAL directly, you'll need to run  sudo make install  to get the build running.   $ mkdir build\n$ cd build\n$ cmake ..\n$ make   sudo make install\n[100%] Built target matrix_creator_hal\nInstall the project...\n-- Install configuration:  \n-- Up-to-date: /usr/local/lib/libmatrix_creator_hal.a\n-- Installing: /usr/local/include/matrix_hal/creator_memory_map.h\n-- Installing: /usr/local/include/matrix_hal/everloop.h\n-- Installing: /usr/local/include/matrix_hal/humidity_data.h\n-- Installing: /usr/local/include/matrix_hal/imu_sensor.h\n-- Installing: /usr/local/include/matrix_hal/pressure_data.h\n-- Installing: /usr/local/include/matrix_hal/dummy_data.h\n-- Installing: /usr/local/include/matrix_hal/everloop_image.h\n-- Installing: /usr/local/include/matrix_hal/humidity_sensor.h\n-- Installing: /usr/local/include/matrix_hal/matrix_driver.h\n-- Installing: /usr/local/include/matrix_hal/pressure_sensor.h\n-- Installing: /usr/local/include/matrix_hal/dummy_sensor.h\n-- Installing: /usr/local/include/matrix_hal/gpio_control.h\n-- Installing: /usr/local/include/matrix_hal/imu_data.h\n-- Installing: /usr/local/include/matrix_hal/microphone_array.h\n-- Installing: /usr/local/include/matrix_hal/wishbone_bus.h", 
            "title": "Build"
        }, 
        {
            "location": "/HAL/overview/#examples", 
            "text": "Run some of the examples below.  # should already be in ~/matrix-creator-hal/build directory.\ncd demos\n\n# run the everloop demo\n./everloop_demo\n\n# see the rest of the examples\nls -l", 
            "title": "Examples"
        }, 
        {
            "location": "/HAL/overview/", 
            "text": "Overview\n\n\nHAL is the lowest-level abstraction for the MATRIX Creator drivers. You can interface directly with HAL, or use the higher level components like MALOS, and the MATRIX OS itself.\n\n\nPre-Requisites\n\n\nIt does have some package dependencies, so please make sure to install the pre-requisites.\n\n\nsudo apt-get install cmake g++ git\ngit clone https://github.com/matrix-io/matrix-creator-hal.git\n\n\n\n\nBuild\n\n\nTo start working with HAL directly, you'll need to run \nsudo make install\n to get the build running. \n\n\n$ mkdir build\n$ cd build\n$ cmake ..\n$ make \n sudo make install\n[100%] Built target matrix_creator_hal\nInstall the project...\n-- Install configuration: \n\n-- Up-to-date: /usr/local/lib/libmatrix_creator_hal.a\n-- Installing: /usr/local/include/matrix_hal/creator_memory_map.h\n-- Installing: /usr/local/include/matrix_hal/everloop.h\n-- Installing: /usr/local/include/matrix_hal/humidity_data.h\n-- Installing: /usr/local/include/matrix_hal/imu_sensor.h\n-- Installing: /usr/local/include/matrix_hal/pressure_data.h\n-- Installing: /usr/local/include/matrix_hal/dummy_data.h\n-- Installing: /usr/local/include/matrix_hal/everloop_image.h\n-- Installing: /usr/local/include/matrix_hal/humidity_sensor.h\n-- Installing: /usr/local/include/matrix_hal/matrix_driver.h\n-- Installing: /usr/local/include/matrix_hal/pressure_sensor.h\n-- Installing: /usr/local/include/matrix_hal/dummy_sensor.h\n-- Installing: /usr/local/include/matrix_hal/gpio_control.h\n-- Installing: /usr/local/include/matrix_hal/imu_data.h\n-- Installing: /usr/local/include/matrix_hal/microphone_array.h\n-- Installing: /usr/local/include/matrix_hal/wishbone_bus.h\n\n\n\n\nExamples\n\n\nRun some of the examples below.\n\n\n# should already be in ~/matrix-creator-hal/build directory.\ncd demos\n\n# run the everloop demo\n./everloop_demo\n\n# see the rest of the examples\nls -l", 
            "title": "Examples"
        }, 
        {
            "location": "/HAL/overview/#overview", 
            "text": "HAL is the lowest-level abstraction for the MATRIX Creator drivers. You can interface directly with HAL, or use the higher level components like MALOS, and the MATRIX OS itself.", 
            "title": "Overview"
        }, 
        {
            "location": "/HAL/overview/#pre-requisites", 
            "text": "It does have some package dependencies, so please make sure to install the pre-requisites.  sudo apt-get install cmake g++ git\ngit clone https://github.com/matrix-io/matrix-creator-hal.git", 
            "title": "Pre-Requisites"
        }, 
        {
            "location": "/HAL/overview/#build", 
            "text": "To start working with HAL directly, you'll need to run  sudo make install  to get the build running.   $ mkdir build\n$ cd build\n$ cmake ..\n$ make   sudo make install\n[100%] Built target matrix_creator_hal\nInstall the project...\n-- Install configuration:  \n-- Up-to-date: /usr/local/lib/libmatrix_creator_hal.a\n-- Installing: /usr/local/include/matrix_hal/creator_memory_map.h\n-- Installing: /usr/local/include/matrix_hal/everloop.h\n-- Installing: /usr/local/include/matrix_hal/humidity_data.h\n-- Installing: /usr/local/include/matrix_hal/imu_sensor.h\n-- Installing: /usr/local/include/matrix_hal/pressure_data.h\n-- Installing: /usr/local/include/matrix_hal/dummy_data.h\n-- Installing: /usr/local/include/matrix_hal/everloop_image.h\n-- Installing: /usr/local/include/matrix_hal/humidity_sensor.h\n-- Installing: /usr/local/include/matrix_hal/matrix_driver.h\n-- Installing: /usr/local/include/matrix_hal/pressure_sensor.h\n-- Installing: /usr/local/include/matrix_hal/dummy_sensor.h\n-- Installing: /usr/local/include/matrix_hal/gpio_control.h\n-- Installing: /usr/local/include/matrix_hal/imu_data.h\n-- Installing: /usr/local/include/matrix_hal/microphone_array.h\n-- Installing: /usr/local/include/matrix_hal/wishbone_bus.h", 
            "title": "Build"
        }, 
        {
            "location": "/HAL/overview/#examples", 
            "text": "Run some of the examples below.  # should already be in ~/matrix-creator-hal/build directory.\ncd demos\n\n# run the everloop demo\n./everloop_demo\n\n# see the rest of the examples\nls -l", 
            "title": "Examples"
        }, 
        {
            "location": "/HAL/troubleshooting/", 
            "text": "Troubleshooting\n\n\nPlease visit our community support forums at:\n\ncommunity.matrix.one", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/HAL/troubleshooting/#troubleshooting", 
            "text": "Please visit our community support forums at: community.matrix.one", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/MALOS/overview/", 
            "text": "Matrix Abstraction Layer for OS\n\n\nMALOS provides a \nZeroMQ\n messaging layer. An intended target for this layer is \nMATRIX OS\n.\n\n\nDocumentation in progress can be found on \nMALOS GitHub\n\n\nInstallation\n\n\n# setup \n installation\necho \ndeb http://packages.matrix.one/matrix-creator/ ./\n | sudo tee --append /etc/apt/sources.list;\nsudo apt-get update;\nsudo apt-get upgrade;\nsudo apt-get install -y libzmq3-dev xc3sprog malos-eye matrix-creator-malos matrix-creator-openocd wiringpi matrix-creator-init cmake g++ git --force-yes;\n\n\n\n\nUpgrades\n\n\nIf you need to upgrade your \nmalos\n package at any time, please run the following commands and restart.\n\n\nsudo apt-get update;\nsudo apt-get upgrade;\nsudo shutdown -r now;\n\n\n\n\nMALOS should be running on next boot.\n\n\nDemos\n\n\nSee \nMALOS \n Demos", 
            "title": "Overview"
        }, 
        {
            "location": "/MALOS/overview/#matrix-abstraction-layer-for-os", 
            "text": "MALOS provides a  ZeroMQ  messaging layer. An intended target for this layer is  MATRIX OS .  Documentation in progress can be found on  MALOS GitHub", 
            "title": "Matrix Abstraction Layer for OS"
        }, 
        {
            "location": "/MALOS/overview/#installation", 
            "text": "# setup   installation\necho  deb http://packages.matrix.one/matrix-creator/ ./  | sudo tee --append /etc/apt/sources.list;\nsudo apt-get update;\nsudo apt-get upgrade;\nsudo apt-get install -y libzmq3-dev xc3sprog malos-eye matrix-creator-malos matrix-creator-openocd wiringpi matrix-creator-init cmake g++ git --force-yes;", 
            "title": "Installation"
        }, 
        {
            "location": "/MALOS/overview/#upgrades", 
            "text": "If you need to upgrade your  malos  package at any time, please run the following commands and restart.  sudo apt-get update;\nsudo apt-get upgrade;\nsudo shutdown -r now;  MALOS should be running on next boot.", 
            "title": "Upgrades"
        }, 
        {
            "location": "/MALOS/overview/#demos", 
            "text": "See  MALOS   Demos", 
            "title": "Demos"
        }, 
        {
            "location": "/MALOS/example/", 
            "text": "Getting Started\n\n\ngit clone https://github.com/matrix-io/matrix-creator-malos;\ncd matrix-creator-malos;\ngit submodule update --init;\ncd src/js_test;\nnpm install;\n\n\n\n\nExamples\n\n\nMALOS is the program that sits between the low level hardware layer and MATRIX OS. This program allows MATRIX OS to access the board hardware via ZeroMQ sockets. You can also use it directly, as it is done with the examples below. The The IPs used in the examples are 127.0.0.1. Remember to edit them if you're accessing the Creator from another host and not from the Raspberry itself.\n\n\nNote:\n Pre-requisite of \nNodeJS\n on the client computer.\n\n\nDrivers\n\n\nnode test_driver_info.js\n\n\n\n\nEverloop\n\n\nnode test_everloop.js\n\n\n\n\nHumidity\n\n\nnode test_humidity.js\n\n\n\n\nIMU\n\n\nnode test_imu.js\n\n\n\n\nIR Remote\n\n\nnode test_ir_remote.js\n\n\n\n\nPressure\n\n\nnode test_pressure.js\n\n\n\n\nUV\n\n\nnode test_uv.js\n\n\n\n\nZigbee Bulb On/Off\n\n\nnode test_zigbee_bulb.js\n\n\n\n\nZigbee Bulb Color\n\n\nnode test_zigbee_color.js\n\n\n\n\nZigbee Bulb Brightness\n\n\nnode test_zigbee_level.js", 
            "title": "Examples"
        }, 
        {
            "location": "/MALOS/example/#getting-started", 
            "text": "git clone https://github.com/matrix-io/matrix-creator-malos;\ncd matrix-creator-malos;\ngit submodule update --init;\ncd src/js_test;\nnpm install;", 
            "title": "Getting Started"
        }, 
        {
            "location": "/MALOS/example/#examples", 
            "text": "MALOS is the program that sits between the low level hardware layer and MATRIX OS. This program allows MATRIX OS to access the board hardware via ZeroMQ sockets. You can also use it directly, as it is done with the examples below. The The IPs used in the examples are 127.0.0.1. Remember to edit them if you're accessing the Creator from another host and not from the Raspberry itself.  Note:  Pre-requisite of  NodeJS  on the client computer.", 
            "title": "Examples"
        }, 
        {
            "location": "/MALOS/example/#drivers", 
            "text": "node test_driver_info.js", 
            "title": "Drivers"
        }, 
        {
            "location": "/MALOS/example/#everloop", 
            "text": "node test_everloop.js", 
            "title": "Everloop"
        }, 
        {
            "location": "/MALOS/example/#humidity", 
            "text": "node test_humidity.js", 
            "title": "Humidity"
        }, 
        {
            "location": "/MALOS/example/#imu", 
            "text": "node test_imu.js", 
            "title": "IMU"
        }, 
        {
            "location": "/MALOS/example/#ir-remote", 
            "text": "node test_ir_remote.js", 
            "title": "IR Remote"
        }, 
        {
            "location": "/MALOS/example/#pressure", 
            "text": "node test_pressure.js", 
            "title": "Pressure"
        }, 
        {
            "location": "/MALOS/example/#uv", 
            "text": "node test_uv.js", 
            "title": "UV"
        }, 
        {
            "location": "/MALOS/example/#zigbee-bulb-onoff", 
            "text": "node test_zigbee_bulb.js", 
            "title": "Zigbee Bulb On/Off"
        }, 
        {
            "location": "/MALOS/example/#zigbee-bulb-color", 
            "text": "node test_zigbee_color.js", 
            "title": "Zigbee Bulb Color"
        }, 
        {
            "location": "/MALOS/example/#zigbee-bulb-brightness", 
            "text": "node test_zigbee_level.js", 
            "title": "Zigbee Bulb Brightness"
        }, 
        {
            "location": "/MALOS/troubleshooting/", 
            "text": "Troubleshooting", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/MALOS/troubleshooting/#troubleshooting", 
            "text": "", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/Reference/pinout/", 
            "text": "Expansion pinout\n\n\n\n\nExpansion location\n\n\n\n\nFPGA's UCF definition\n\n\nNET \nDF\n16\n LOC=\nP106\n;\nNET \nDF\n15\n LOC=\nP102\n;\nNET \nDF\n14\n LOC=\nP101\n;\nNET \nDF\n13\n LOC=\nP99\n;\nNET \nDF\n12\n LOC=\nP98\n;\nNET \nDF\n11\n LOC=\nP95\n;\nNET \nDF\n10\n LOC=\nP94\n;\nNET \nDF\n9\n LOC=\nP93\n;\nNET \nDF\n8\n LOC=\nP92\n;\nNET \nDF\n7\n LOC=\nP88\n;\nNET \nDF\n6\n LOC=\nP85\n;\nNET \nDF\n5\n LOC=\nP83\n;\nNET \nDF\n4\n LOC=\nP82\n;\nNET \nDF\n3\n LOC=\nP81\n;\nNET \nDF\n2\n LOC=\nP80\n;\nNET \nDF\n1\n LOC=\nP79\n;\nNET \nDF\n0\n LOC=\nP78\n;", 
            "title": "Pinout"
        }, 
        {
            "location": "/Reference/pinout/#expansion-pinout", 
            "text": "", 
            "title": "Expansion pinout"
        }, 
        {
            "location": "/Reference/pinout/#expansion-location", 
            "text": "", 
            "title": "Expansion location"
        }, 
        {
            "location": "/Reference/pinout/#fpgas-ucf-definition", 
            "text": "NET  DF 16  LOC= P106 ;\nNET  DF 15  LOC= P102 ;\nNET  DF 14  LOC= P101 ;\nNET  DF 13  LOC= P99 ;\nNET  DF 12  LOC= P98 ;\nNET  DF 11  LOC= P95 ;\nNET  DF 10  LOC= P94 ;\nNET  DF 9  LOC= P93 ;\nNET  DF 8  LOC= P92 ;\nNET  DF 7  LOC= P88 ;\nNET  DF 6  LOC= P85 ;\nNET  DF 5  LOC= P83 ;\nNET  DF 4  LOC= P82 ;\nNET  DF 3  LOC= P81 ;\nNET  DF 2  LOC= P80 ;\nNET  DF 1  LOC= P79 ;\nNET  DF 0  LOC= P78 ;", 
            "title": "FPGA's UCF definition"
        }, 
        {
            "location": "/Hardware/fpga/", 
            "text": "FPGA\n\n\nOnce you have installed the \nrequired software\n you can program the FPGA. This will allow you to play with the everloop LED array.\n\n\nFirst, get the firmware.\n\n\nwget http://packages.matrix.one/matrix-creator-firmware/firmware-0.8.tar.gz\ntar xzvf firmware-0.8.tar.gz\n\n\n\nThen flash the firmware using the \nxc3sprog\n program that should be installed on the Raspberry.\n\n\nsudo xc3sprog -c matrix_pi firmware-0.8/blob/system.bit -p 1\n\n\n\nSample result:\n\n\n$ sudo xc3sprog -c matrix_pi firmware-0.8/blob/system.bit -p 1\nXC3SPROG (c) 2004-2011 xc3sprog project $Rev: 774 $ OS: Linux\nFree software: If you contribute nothing, expect nothing!\nFeedback on success/failure/enhancement requests:\n    http://sourceforge.net/mail/?group_id=170565 \nCheck Sourceforge for updates:\n    http://sourceforge.net/projects/xc3sprog/develop\n\nDNA is 0x39c620e4bfe15bfd\n\n\n\nQuestions? Post them on \nraspberrypi.stackexchange.com\n! Use the tag #matrix-creator", 
            "title": "FPGA"
        }, 
        {
            "location": "/Hardware/fpga/#fpga", 
            "text": "Once you have installed the  required software  you can program the FPGA. This will allow you to play with the everloop LED array.  First, get the firmware.  wget http://packages.matrix.one/matrix-creator-firmware/firmware-0.8.tar.gz\ntar xzvf firmware-0.8.tar.gz  Then flash the firmware using the  xc3sprog  program that should be installed on the Raspberry.  sudo xc3sprog -c matrix_pi firmware-0.8/blob/system.bit -p 1  Sample result:  $ sudo xc3sprog -c matrix_pi firmware-0.8/blob/system.bit -p 1\nXC3SPROG (c) 2004-2011 xc3sprog project $Rev: 774 $ OS: Linux\nFree software: If you contribute nothing, expect nothing!\nFeedback on success/failure/enhancement requests:\n    http://sourceforge.net/mail/?group_id=170565 \nCheck Sourceforge for updates:\n    http://sourceforge.net/projects/xc3sprog/develop\n\nDNA is 0x39c620e4bfe15bfd  Questions? Post them on  raspberrypi.stackexchange.com ! Use the tag #matrix-creator", 
            "title": "FPGA"
        }, 
        {
            "location": "/Hardware/Sam3/", 
            "text": "SAM3 Firmware Flash\n\n\nThis firmware is used to read the sensors. You can build it in your host machine, and then copy the resulting binary to the Raspberry Pi.\n\n\nFirst, you need to compile the firmware. You can do it in the Rasbperry Pi (if you have enough space available) or in your host machine if you want to do it faster.\n\n\napt-get install gcc-arm-none-eabi\ngit clone https://github.com/matrix-io/matrix-creator-mcu\ncd  matrix-creator-mcu/creator \n make\n\n\n\n\nNow copy build/ch.bin to the Rasbperry Pi (if you didn't build there) and \nflash it\n. In order to flash it you need to replace the file blob/ch.bin (or edit the cfg/sam3s.cfg configuration file).\n\n\nAnd only then you can flash the SAM3 firmware.\n\n\nsudo openocd -f cfg/sam3s.cfg\n\n\n\n\nQuestions? Post them on raspberrypi.stackexchange.com! Use the tag #matrix-creator", 
            "title": "SAM3"
        }, 
        {
            "location": "/Hardware/Sam3/#sam3-firmware-flash", 
            "text": "This firmware is used to read the sensors. You can build it in your host machine, and then copy the resulting binary to the Raspberry Pi.  First, you need to compile the firmware. You can do it in the Rasbperry Pi (if you have enough space available) or in your host machine if you want to do it faster.  apt-get install gcc-arm-none-eabi\ngit clone https://github.com/matrix-io/matrix-creator-mcu\ncd  matrix-creator-mcu/creator   make  Now copy build/ch.bin to the Rasbperry Pi (if you didn't build there) and  flash it . In order to flash it you need to replace the file blob/ch.bin (or edit the cfg/sam3s.cfg configuration file).  And only then you can flash the SAM3 firmware.  sudo openocd -f cfg/sam3s.cfg  Questions? Post them on raspberrypi.stackexchange.com! Use the tag #matrix-creator", 
            "title": "SAM3 Firmware Flash"
        }, 
        {
            "location": "/Hardware/sam3mcu-programming/", 
            "text": "Sam3 MCU Programming\n\n\nOnce you have installed the \nrequired software\n you can program the SAM3 MCU. The MCU is used to read the sensors.\n\n\nThis firmware is free software and \nyou can compile it yourself\n. Here we describe the process of compiling the shipped firmware.\n\n\nFirst, get the firmware.\n\n\nwget http://packages.matrix.one/matrix-creator-firmware/firmware-0.8.tar.gz\ntar xzvf firmware-0.8.tar.gz\n\n\n\nThen flash the firmware using the \nopenocd\n program that should be installed on the Raspberry (with the package matrix-creator-openocd).\n\n\nThen execute the following commands as root.\n\n\necho 18 \n /sys/class/gpio/export\necho out \n /sys/class/gpio/gpio18/direction\necho 1 \n /sys/class/gpio/gpio18/value\necho 0 \n /sys/class/gpio/gpio18/value\necho 1 \n /sys/class/gpio/gpio18/value\n\n\n\nNow you can program the firmware.\n\n\ncd firmware-0.8\nsudo openocd -f cfg/sam3s.cfg\n\n\n\nExample output:\n\n\n$ sudo openocd -f cfg/sam3s.cfg\nOpen On-Chip Debugger 0.10.0-dev-00283-g7223cae-dirty (2016-07-15-08:36)\nLicensed under GNU GPL v2\nFor bug reports, read\n    http://openocd.org/doc/doxygen/bugs.html\nBCM2835 GPIO config: tck = 17, tms = 4, tdi = 22, tdo = 27\nBCM2835 GPIO config: trst = 18\ntrst_only separate trst_push_pull\nadapter speed: 512 kHz\nWarn : em357.bs: nonstandard IR value\nWarn : Specify TAP 'sam3n.cpu.cpu' by name, not number 3\nInfo : BCM2835 GPIO JTAG/SWD bitbang driver\nInfo : JTAG only mode enabled (specify swclk and swdio gpio to add SWD mode)\nInfo : clock speed 512 kHz\nInfo : JTAG tap: em357.cpu tap/device found: 0x3ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x3)\nInfo : JTAG tap: em357.bs tap/device found: 0x069aa62b (mfg: 0x315 (Ember Corporation), part: 0x69aa, ver: 0x0)\nInfo : JTAG tap: xc6sxl4.fpga.fpga tap/device found: 0x24000093 (mfg: 0x049 (Xilinx), part: 0x4000, ver: 0x2)\nInfo : JTAG tap: sam3n.cpu.cpu tap/device found: 0x4ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x4)\nError: xc6sxl4.fpga.fpga: IR capture error; saw 0x35 not 0x11\nWarn : Bypassing JTAG setup events due to errors\nInfo : sam3n.cpu: hardware has 6 breakpoints, 4 watchpoints\nsam3n.cpu: target state: halted\ntarget halted due to debug-request, current mode: Thread\nxPSR: 0x61000000 pc: 0x00402560 psp: 0x20000800\n#0 : at91sam3 at 0x00400000, size 0x00020000, buswidth 0, chipwidth 0\n    #  0: 0x00000000 (0x4000 16kB) not protected\n    #  1: 0x00004000 (0x4000 16kB) not protected\n    #  2: 0x00008000 (0x4000 16kB) not protected\n    #  3: 0x0000c000 (0x4000 16kB) not protected\n    #  4: 0x00010000 (0x4000 16kB) not protected\n    #  5: 0x00014000 (0x4000 16kB) not protected\n    #  6: 0x00018000 (0x4000 16kB) not protected\n    #  7: 0x0001c000 (0x4000 16kB) not protected\nflash 'at91sam3' found at 0x00400000\nError: Invalid ACK (6) in DAP response\nError: Failed to read memory at 0x400e0a0c\nError: SAM3: Error performing Erase \n Write page @ phys address 0x00400800\nwrote 38620 bytes from file blob/ch.bin to flash bank 0 at offset 0x00000000 in 1.256279s (30.021 KiB/s)\nInfo : JTAG tap: em357.cpu tap/device found: 0x3ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x3)\nInfo : JTAG tap: em357.bs tap/device found: 0x069aa62b (mfg: 0x315 (Ember Corporation), part: 0x69aa, ver: 0x0)\nInfo : JTAG tap: xc6sxl4.fpga.fpga tap/device found: 0x24000093 (mfg: 0x049 (Xilinx), part: 0x4000, ver: 0x2)\nInfo : JTAG tap: sam3n.cpu.cpu tap/device found: 0x4ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x4)\nError: xc6sxl4.fpga.fpga: IR capture error; saw 0x35 not 0x11\nWarn : Bypassing JTAG setup events due to errors\nWarn : Only resetting the Cortex-M core, use a reset-init event handler to reset any peripherals or configure     hardware srst support.\nshutdown command invoked\n\n\n\nFlashing succeeded if you get the line \"wrote 38620 bytes from file blob/ch.bin to flash bank 0 at offset 0x00000000 in 1.256279s (30.021 KiB/s)\" in the previous output. A small LED next to the SAM3 MCU should start flashing once per second.\n\n\nIf flashing fails, please retry the flashing command.\n\n\nSample video\n\n\nQuestions? Post them on raspberrypi.stackexchange.com! Use the tag #matrix-creator", 
            "title": "SAM3MCU"
        }, 
        {
            "location": "/Hardware/sam3mcu-programming/#sam3-mcu-programming", 
            "text": "Once you have installed the  required software  you can program the SAM3 MCU. The MCU is used to read the sensors.  This firmware is free software and  you can compile it yourself . Here we describe the process of compiling the shipped firmware.  First, get the firmware.  wget http://packages.matrix.one/matrix-creator-firmware/firmware-0.8.tar.gz\ntar xzvf firmware-0.8.tar.gz  Then flash the firmware using the  openocd  program that should be installed on the Raspberry (with the package matrix-creator-openocd).  Then execute the following commands as root.  echo 18   /sys/class/gpio/export\necho out   /sys/class/gpio/gpio18/direction\necho 1   /sys/class/gpio/gpio18/value\necho 0   /sys/class/gpio/gpio18/value\necho 1   /sys/class/gpio/gpio18/value  Now you can program the firmware.  cd firmware-0.8\nsudo openocd -f cfg/sam3s.cfg  Example output:  $ sudo openocd -f cfg/sam3s.cfg\nOpen On-Chip Debugger 0.10.0-dev-00283-g7223cae-dirty (2016-07-15-08:36)\nLicensed under GNU GPL v2\nFor bug reports, read\n    http://openocd.org/doc/doxygen/bugs.html\nBCM2835 GPIO config: tck = 17, tms = 4, tdi = 22, tdo = 27\nBCM2835 GPIO config: trst = 18\ntrst_only separate trst_push_pull\nadapter speed: 512 kHz\nWarn : em357.bs: nonstandard IR value\nWarn : Specify TAP 'sam3n.cpu.cpu' by name, not number 3\nInfo : BCM2835 GPIO JTAG/SWD bitbang driver\nInfo : JTAG only mode enabled (specify swclk and swdio gpio to add SWD mode)\nInfo : clock speed 512 kHz\nInfo : JTAG tap: em357.cpu tap/device found: 0x3ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x3)\nInfo : JTAG tap: em357.bs tap/device found: 0x069aa62b (mfg: 0x315 (Ember Corporation), part: 0x69aa, ver: 0x0)\nInfo : JTAG tap: xc6sxl4.fpga.fpga tap/device found: 0x24000093 (mfg: 0x049 (Xilinx), part: 0x4000, ver: 0x2)\nInfo : JTAG tap: sam3n.cpu.cpu tap/device found: 0x4ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x4)\nError: xc6sxl4.fpga.fpga: IR capture error; saw 0x35 not 0x11\nWarn : Bypassing JTAG setup events due to errors\nInfo : sam3n.cpu: hardware has 6 breakpoints, 4 watchpoints\nsam3n.cpu: target state: halted\ntarget halted due to debug-request, current mode: Thread\nxPSR: 0x61000000 pc: 0x00402560 psp: 0x20000800\n#0 : at91sam3 at 0x00400000, size 0x00020000, buswidth 0, chipwidth 0\n    #  0: 0x00000000 (0x4000 16kB) not protected\n    #  1: 0x00004000 (0x4000 16kB) not protected\n    #  2: 0x00008000 (0x4000 16kB) not protected\n    #  3: 0x0000c000 (0x4000 16kB) not protected\n    #  4: 0x00010000 (0x4000 16kB) not protected\n    #  5: 0x00014000 (0x4000 16kB) not protected\n    #  6: 0x00018000 (0x4000 16kB) not protected\n    #  7: 0x0001c000 (0x4000 16kB) not protected\nflash 'at91sam3' found at 0x00400000\nError: Invalid ACK (6) in DAP response\nError: Failed to read memory at 0x400e0a0c\nError: SAM3: Error performing Erase   Write page @ phys address 0x00400800\nwrote 38620 bytes from file blob/ch.bin to flash bank 0 at offset 0x00000000 in 1.256279s (30.021 KiB/s)\nInfo : JTAG tap: em357.cpu tap/device found: 0x3ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x3)\nInfo : JTAG tap: em357.bs tap/device found: 0x069aa62b (mfg: 0x315 (Ember Corporation), part: 0x69aa, ver: 0x0)\nInfo : JTAG tap: xc6sxl4.fpga.fpga tap/device found: 0x24000093 (mfg: 0x049 (Xilinx), part: 0x4000, ver: 0x2)\nInfo : JTAG tap: sam3n.cpu.cpu tap/device found: 0x4ba00477 (mfg: 0x23b (ARM Ltd.), part: 0xba00, ver: 0x4)\nError: xc6sxl4.fpga.fpga: IR capture error; saw 0x35 not 0x11\nWarn : Bypassing JTAG setup events due to errors\nWarn : Only resetting the Cortex-M core, use a reset-init event handler to reset any peripherals or configure     hardware srst support.\nshutdown command invoked  Flashing succeeded if you get the line \"wrote 38620 bytes from file blob/ch.bin to flash bank 0 at offset 0x00000000 in 1.256279s (30.021 KiB/s)\" in the previous output. A small LED next to the SAM3 MCU should start flashing once per second.  If flashing fails, please retry the flashing command.  Sample video  Questions? Post them on raspberrypi.stackexchange.com! Use the tag #matrix-creator", 
            "title": "Sam3 MCU Programming"
        }, 
        {
            "location": "/Hardware/microphone/", 
            "text": "Microphone\n\n\n1. Mic Array on MATRIX Creator\n\n\n\n\nPosition [x,y] of each mic in the array:\n\n\n\n\n\n\n\n\nMic\n\n\nX\n\n\nY\n\n\n\n\n\n\n\n\n\n\nM1\n\n\n20.0908795\n\n\n-48.5036755\n\n\n\n\n\n\nM2\n\n\n-20.0908795\n\n\n-48.5036755\n\n\n\n\n\n\nM3\n\n\n-48.5036755\n\n\n-20.0908795\n\n\n\n\n\n\nM4\n\n\n-48.5036755\n\n\n20.0908795\n\n\n\n\n\n\nM5\n\n\n-20.0908795\n\n\n48.5036755\n\n\n\n\n\n\nM6\n\n\n20.0908795\n\n\n48.5036755\n\n\n\n\n\n\nM7\n\n\n48.5036755\n\n\n20.0908795\n\n\n\n\n\n\nM8\n\n\n48.5036755\n\n\n-20.0908795\n\n\n\n\n\n\n\n\nConnection to the FPGA\n\n\nfrom the \ncreator.ucf\n :\n\n\n\n\n\n\n\n\nMic\n\n\nFPGA pin\n\n\nPDM_Data\n\n\n\n\n\n\n\n\n\n\nM1\n\n\nP45\n\n\npdm_data\n0\n\n\n\n\n\n\nM2\n\n\nP46\n\n\npdm_data\n1\n\n\n\n\n\n\nM3\n\n\nP47\n\n\npdm_data\n2\n\n\n\n\n\n\nM4\n\n\nP58\n\n\npdm_data\n3\n\n\n\n\n\n\nM5\n\n\nP59\n\n\npdm_data\n4\n\n\n\n\n\n\nM6\n\n\nP64\n\n\npdm_data\n5\n\n\n\n\n\n\nM7\n\n\nP65\n\n\npdm_data\n6\n\n\n\n\n\n\nM8\n\n\nP44\n\n\npdm_data\n7\n\n\n\n\n\n\nCLK\n\n\nP47\n\n\npdm_clk\n\n\n\n\n\n\n\n\nAudio specs:\n\n\nSample Rate: 16 kHz\nBit Depth: 16 bit\n\n\nNote\n: An option for setting higher sample rates will be released soon.  Please keep in touch in the community announcements channel http://community.matrix.one/c/announcements.\n\n\nMicrophones Datasheet:\n\n\nMP34DB02 - MEMS audio sensor omnidirectional digital microphone\n \n\n\n2. How to get microphone data from C++\n\n\nYou can use our lower software layer in C++ called HAL () (Hardware Abstraction Layer) to read data from the microphones.\n\n\nGetting and Compiling HAL\n\n\ngit clone https://github.com/matrix-io/matrix-creator-hal.git\ncd matrix-creator-hal \nmkdir build \n cd build\ncmake ..\nmake\n\n\n\nExample code\n\n\nThe following example gets samples from all channels (mics) collected by the fpga.  \n\n\n... \nint main() {\n    hal::WishboneBus bus;\n    bus.SpiInit();\n    hal::MicrophoneArray mics;\n    mics.Setup(\nbus);\n    std::valarray\nfloat\n magnitude(mics.Channels());\n\n    mics.SetGain(8);\n    std::cout \n \"M1\\t\" \n \"M2\\t\" \n \"M3\\t\" \n \"M4\\t\" \n \"M5\\t\" \n \"M6\\t\" \n \"M7\\t\" \n \"M8\\t\" \n std::endl;\n\n    while (true) {\n        mics.Read();\n        magnitude = 0.0;\n        for (unsigned int s = 0; s \n mics.NumberOfSamples(); s++) {\n            for (unsigned int c = 0; c \n mics.Channels(); c++) {\n              magnitude[c] = mics.At(s, c);\n              std::cout \n  magnitude[c] \n \"\\t\";\n            }\n            std::cout \n std::endl;\n        }\n    }\n    return 0;\n}\n\n\n\n3. Example demo apps for mics\n\n\nThe demo apps are in the folder \nmatrix-creator-hal/demos/\n . They are built with HAL. To run them go to the demo folder :\n\n\ncd build/demos\n./mic_demo\n\n\n\nnote: You can play with the demos to learn how to use HAL, and them use them as starting points for your own apps.\n\n\nmic_demo\n\n\nThis demo maps each mic audio input to one specific led on the Everloop. You can make sounds close to the MATRIX Creator and see how the LEDs turn green when a sound is detected. Also the demo prints in the terminal the audio as numbers, e.g.:\n\n\ncd build/demos\n./mic_demo\n0   0   0   0   0   0   0   0   \n0   0   0   0   0   0   0   0   \n6   6   6   6   6   4   5   6   \n3   6   4   4   2   2   2   2   \n0   0   0   0   0   0   0   0   \n0   0   0   0   0   0   0   0   \n0   0   0   0   0   0   0   0   \n3   5   5   4   4   4   5   4   \n5   6   6   6   6   5   6   5   \n1   0   1   2   2   1   1   1   \n0   1   1   1   1   1   1   1   \n0   1   1   0   1   0   0   0   \n...\n\n\n\nmic_energy\n\n\nThis demo is similar but instead of mapping the mic's audio individually takes all channels and maps the average of all mics. It maps at the same time in all LEDs and creates a very voice responsive red light. This demos does not print anything on the terminal.\n\n\ncd build/demos\n./mic_energy\n\n\n\nmicarray_recorder\n\n\nThis demo records audio from all 8 channels (0-7) and the beamforming channel (channel 8) to raw files located in the same folder. After you launching the demo you will have these files:\n\n\ncd build/demos\n./micarray_recorder\n\n\n\nThe default example records audio to raw files for 10 seconds and then stops. After recording the files are on the same folder \n/demos\n :\n\n\ncd build/demos\nls | grep raw\nmic_16000_s16le_channel_0.raw\nmic_16000_s16le_channel_1.raw\nmic_16000_s16le_channel_2.raw\nmic_16000_s16le_channel_3.raw\nmic_16000_s16le_channel_4.raw\nmic_16000_s16le_channel_5.raw\nmic_16000_s16le_channel_6.raw\nmic_16000_s16le_channel_7.raw\nmic_16000_s16le_channel_8.raw\n\n\n\nnote: The data in the raw files is written in \nint16_t\n. \n\n\ndirection_of_arrival_demo\n\n\nThis demo shows a first implementation of direction of arrival detection. It shows the direction of arrival using the LEDs and also prints the result angle in the terminal. To test it run the demo and make sounds from different directions to the MATRIX Creator board to see how. \n\n\n./direction_of_arrival_demo\nazimutal angle = 0, polar angle = 0, mic = 0\nazimutal angle = 0, polar angle = 0, mic = 0\nazimutal angle = -157.5, polar angle = 18, mic = 2\nazimutal angle = -157.5, polar angle = 18, mic = 2\nazimutal angle = -157.5, polar angle = 18, mic = 2\nazimutal angle = 22.5, polar angle = 36, mic = 6\nazimutal angle = -157.5, polar angle = 54, mic = 2\nazimutal angle = -157.5, polar angle = 72, mic = 2\nazimutal angle = -157.5, polar angle = 72, mic = 2\n\n\n\nRecord, Convert and Play sounds.\n\n\nUpdate and upgrade Raspbian\n\n\nsudo apt-get update\nsudo apt-get upgrade\n\n\n\nInstall \nAlsa tools\n and the \nsox\n utility\n\n\nsudo apt-get install sox alsa-utils\n\n\n\nRun the volume control\n\n\nalsamixer\n\n\n\nRun capture and check the recorded files\n\n\ncd demos\n./micarray_recorder\nls -1 *raw\n\n\n\nConvert the audio\n\n\nsox -r 16000 -c 1 -e signed -c 1 -e signed -b 16 mic_16000_s16le_channel_0.raw channel_0.wav\nsox -r 16000 -c 1 -e signed -c 1 -e signed -b 16 mic_16000_s16le_channel_1.raw channel_1.wav\nsox -r 16000 -c 1 -e signed -c 1 -e signed -b 16 mic_16000_s16le_channel_2.raw channel_2.wav\nsox -r 16000 -c 1 -e signed -c 1 -e signed -b 16 mic_16000_s16le_channel_3.raw channel_3.wav\nsox -r 16000 -c 1 -e signed -c 1 -e signed -b 16 mic_16000_s16le_channel_4.raw channel_4.wav\nsox -r 16000 -c 1 -e signed -c 1 -e signed -b 16 mic_16000_s16le_channel_5.raw channel_5.wav\nsox -r 16000 -c 1 -e signed -c 1 -e signed -b 16 mic_16000_s16le_channel_6.raw channel_6.wav\nsox -r 16000 -c 1 -e signed -c 1 -e signed -b 16 mic_16000_s16le_channel_7.raw channel_7.wav\n\n\n\nPlay the wav file (i.e. audio from channel 0)\n\n\naplay channel_0.wav", 
            "title": "Microphone"
        }, 
        {
            "location": "/Hardware/microphone/#microphone", 
            "text": "", 
            "title": "Microphone"
        }, 
        {
            "location": "/Hardware/microphone/#1-mic-array-on-matrix-creator", 
            "text": "", 
            "title": "1. Mic Array on MATRIX Creator"
        }, 
        {
            "location": "/Hardware/microphone/#position-xy-of-each-mic-in-the-array", 
            "text": "Mic  X  Y      M1  20.0908795  -48.5036755    M2  -20.0908795  -48.5036755    M3  -48.5036755  -20.0908795    M4  -48.5036755  20.0908795    M5  -20.0908795  48.5036755    M6  20.0908795  48.5036755    M7  48.5036755  20.0908795    M8  48.5036755  -20.0908795", 
            "title": "Position [x,y] of each mic in the array:"
        }, 
        {
            "location": "/Hardware/microphone/#connection-to-the-fpga", 
            "text": "from the  creator.ucf  :     Mic  FPGA pin  PDM_Data      M1  P45  pdm_data 0    M2  P46  pdm_data 1    M3  P47  pdm_data 2    M4  P58  pdm_data 3    M5  P59  pdm_data 4    M6  P64  pdm_data 5    M7  P65  pdm_data 6    M8  P44  pdm_data 7    CLK  P47  pdm_clk", 
            "title": "Connection to the FPGA"
        }, 
        {
            "location": "/Hardware/microphone/#audio-specs", 
            "text": "Sample Rate: 16 kHz\nBit Depth: 16 bit  Note : An option for setting higher sample rates will be released soon.  Please keep in touch in the community announcements channel http://community.matrix.one/c/announcements.", 
            "title": "Audio specs:"
        }, 
        {
            "location": "/Hardware/microphone/#microphones-datasheet", 
            "text": "MP34DB02 - MEMS audio sensor omnidirectional digital microphone", 
            "title": "Microphones Datasheet:"
        }, 
        {
            "location": "/Hardware/microphone/#2-how-to-get-microphone-data-from-c", 
            "text": "You can use our lower software layer in C++ called HAL () (Hardware Abstraction Layer) to read data from the microphones.", 
            "title": "2. How to get microphone data from C++"
        }, 
        {
            "location": "/Hardware/microphone/#getting-and-compiling-hal", 
            "text": "git clone https://github.com/matrix-io/matrix-creator-hal.git\ncd matrix-creator-hal \nmkdir build   cd build\ncmake ..\nmake", 
            "title": "Getting and Compiling HAL"
        }, 
        {
            "location": "/Hardware/microphone/#example-code", 
            "text": "The following example gets samples from all channels (mics) collected by the fpga.    ... \nint main() {\n    hal::WishboneBus bus;\n    bus.SpiInit();\n    hal::MicrophoneArray mics;\n    mics.Setup( bus);\n    std::valarray float  magnitude(mics.Channels());\n\n    mics.SetGain(8);\n    std::cout   \"M1\\t\"   \"M2\\t\"   \"M3\\t\"   \"M4\\t\"   \"M5\\t\"   \"M6\\t\"   \"M7\\t\"   \"M8\\t\"   std::endl;\n\n    while (true) {\n        mics.Read();\n        magnitude = 0.0;\n        for (unsigned int s = 0; s   mics.NumberOfSamples(); s++) {\n            for (unsigned int c = 0; c   mics.Channels(); c++) {\n              magnitude[c] = mics.At(s, c);\n              std::cout    magnitude[c]   \"\\t\";\n            }\n            std::cout   std::endl;\n        }\n    }\n    return 0;\n}", 
            "title": "Example code"
        }, 
        {
            "location": "/Hardware/microphone/#3-example-demo-apps-for-mics", 
            "text": "The demo apps are in the folder  matrix-creator-hal/demos/  . They are built with HAL. To run them go to the demo folder :  cd build/demos\n./mic_demo  note: You can play with the demos to learn how to use HAL, and them use them as starting points for your own apps.", 
            "title": "3. Example demo apps for mics"
        }, 
        {
            "location": "/Hardware/microphone/#mic_demo", 
            "text": "This demo maps each mic audio input to one specific led on the Everloop. You can make sounds close to the MATRIX Creator and see how the LEDs turn green when a sound is detected. Also the demo prints in the terminal the audio as numbers, e.g.:  cd build/demos\n./mic_demo\n0   0   0   0   0   0   0   0   \n0   0   0   0   0   0   0   0   \n6   6   6   6   6   4   5   6   \n3   6   4   4   2   2   2   2   \n0   0   0   0   0   0   0   0   \n0   0   0   0   0   0   0   0   \n0   0   0   0   0   0   0   0   \n3   5   5   4   4   4   5   4   \n5   6   6   6   6   5   6   5   \n1   0   1   2   2   1   1   1   \n0   1   1   1   1   1   1   1   \n0   1   1   0   1   0   0   0   \n...", 
            "title": "mic_demo"
        }, 
        {
            "location": "/Hardware/microphone/#mic_energy", 
            "text": "This demo is similar but instead of mapping the mic's audio individually takes all channels and maps the average of all mics. It maps at the same time in all LEDs and creates a very voice responsive red light. This demos does not print anything on the terminal.  cd build/demos\n./mic_energy", 
            "title": "mic_energy"
        }, 
        {
            "location": "/Hardware/microphone/#micarray_recorder", 
            "text": "This demo records audio from all 8 channels (0-7) and the beamforming channel (channel 8) to raw files located in the same folder. After you launching the demo you will have these files:  cd build/demos\n./micarray_recorder  The default example records audio to raw files for 10 seconds and then stops. After recording the files are on the same folder  /demos  :  cd build/demos\nls | grep raw\nmic_16000_s16le_channel_0.raw\nmic_16000_s16le_channel_1.raw\nmic_16000_s16le_channel_2.raw\nmic_16000_s16le_channel_3.raw\nmic_16000_s16le_channel_4.raw\nmic_16000_s16le_channel_5.raw\nmic_16000_s16le_channel_6.raw\nmic_16000_s16le_channel_7.raw\nmic_16000_s16le_channel_8.raw  note: The data in the raw files is written in  int16_t .", 
            "title": "micarray_recorder"
        }, 
        {
            "location": "/Hardware/microphone/#direction_of_arrival_demo", 
            "text": "This demo shows a first implementation of direction of arrival detection. It shows the direction of arrival using the LEDs and also prints the result angle in the terminal. To test it run the demo and make sounds from different directions to the MATRIX Creator board to see how.   ./direction_of_arrival_demo\nazimutal angle = 0, polar angle = 0, mic = 0\nazimutal angle = 0, polar angle = 0, mic = 0\nazimutal angle = -157.5, polar angle = 18, mic = 2\nazimutal angle = -157.5, polar angle = 18, mic = 2\nazimutal angle = -157.5, polar angle = 18, mic = 2\nazimutal angle = 22.5, polar angle = 36, mic = 6\nazimutal angle = -157.5, polar angle = 54, mic = 2\nazimutal angle = -157.5, polar angle = 72, mic = 2\nazimutal angle = -157.5, polar angle = 72, mic = 2", 
            "title": "direction_of_arrival_demo"
        }, 
        {
            "location": "/Hardware/microphone/#record-convert-and-play-sounds", 
            "text": "", 
            "title": "Record, Convert and Play sounds."
        }, 
        {
            "location": "/Hardware/microphone/#update-and-upgrade-raspbian", 
            "text": "sudo apt-get update\nsudo apt-get upgrade", 
            "title": "Update and upgrade Raspbian"
        }, 
        {
            "location": "/Hardware/microphone/#install-alsa-tools-and-the-sox-utility", 
            "text": "sudo apt-get install sox alsa-utils", 
            "title": "Install Alsa tools and the sox utility"
        }, 
        {
            "location": "/Hardware/microphone/#run-the-volume-control", 
            "text": "alsamixer", 
            "title": "Run the volume control"
        }, 
        {
            "location": "/Hardware/microphone/#run-capture-and-check-the-recorded-files", 
            "text": "cd demos\n./micarray_recorder\nls -1 *raw", 
            "title": "Run capture and check the recorded files"
        }, 
        {
            "location": "/Hardware/microphone/#convert-the-audio", 
            "text": "sox -r 16000 -c 1 -e signed -c 1 -e signed -b 16 mic_16000_s16le_channel_0.raw channel_0.wav\nsox -r 16000 -c 1 -e signed -c 1 -e signed -b 16 mic_16000_s16le_channel_1.raw channel_1.wav\nsox -r 16000 -c 1 -e signed -c 1 -e signed -b 16 mic_16000_s16le_channel_2.raw channel_2.wav\nsox -r 16000 -c 1 -e signed -c 1 -e signed -b 16 mic_16000_s16le_channel_3.raw channel_3.wav\nsox -r 16000 -c 1 -e signed -c 1 -e signed -b 16 mic_16000_s16le_channel_4.raw channel_4.wav\nsox -r 16000 -c 1 -e signed -c 1 -e signed -b 16 mic_16000_s16le_channel_5.raw channel_5.wav\nsox -r 16000 -c 1 -e signed -c 1 -e signed -b 16 mic_16000_s16le_channel_6.raw channel_6.wav\nsox -r 16000 -c 1 -e signed -c 1 -e signed -b 16 mic_16000_s16le_channel_7.raw channel_7.wav", 
            "title": "Convert the audio"
        }, 
        {
            "location": "/Hardware/microphone/#play-the-wav-file-ie-audio-from-channel-0", 
            "text": "aplay channel_0.wav", 
            "title": "Play the wav file (i.e. audio from channel 0)"
        }, 
        {
            "location": "/Hardware/SPI/", 
            "text": "SPI\n\n\nThe SPI bus is not enabled by default by Raspbian.\n\n\nTo enable it you can follow the next steps.\n\n\nFirst, open raspi-config.\n\n\nsudo raspi-config\n\n\n\n\n\nThen navigate the interface to activate the SPI bus. Go to advanced options.\n\n\n\n\nSelect SPI.\n\n\n\n\nEnable SPI.\n\n\n\n\nVerify that SPI has been enabled.\n\n\n\n\nNow you can exit raspi-config and SPI will be permanently enabled.\n\n\nThis allows you to play with the \nEverloop LED Array And IMU\n.", 
            "title": "SPI"
        }, 
        {
            "location": "/Hardware/SPI/#spi", 
            "text": "The SPI bus is not enabled by default by Raspbian.  To enable it you can follow the next steps.  First, open raspi-config.  sudo raspi-config   Then navigate the interface to activate the SPI bus. Go to advanced options.   Select SPI.   Enable SPI.   Verify that SPI has been enabled.   Now you can exit raspi-config and SPI will be permanently enabled.  This allows you to play with the  Everloop LED Array And IMU .", 
            "title": "SPI"
        }, 
        {
            "location": "/Demos/Alexa/", 
            "text": "Overview\n\n\n\n\nThis guide provides step-by-step instructions for setting up AVS on a \nRaspberry Pi\n with a \nMATRIX Creator\n. It demonstrates how to access and test AVS using our Java sample app (running on a Raspberry Pi), a Node.js server, and a third-party wake word engine using MATRIX mic array. You will use the Node.js server to obtain a Login with Amazon (LWA) authorization code by visiting a website using your Raspberry Pi's web browser.\n\n\nRequired hardware\n\n\nBefore you get started, let's review what you'll need.\n\n\n\n\nRaspberry Pi 3\n (Recommended) or \nPi 2 Model B\n (Supported)  - Buy at Amazon - \nPi 3\n or \nPi 2\n.\n\n\nMATRIX Creator\n - Raspberry Pi does not have a built-in microphone, the MATRIX Creator has an 8 mic array for Alexa - \nBuy MATRIX Creator\n\n\nMicro-USB power cable\n for Raspberry Pi.\n\n\nMicro SD Card\n (Minimum 8 GB) - You need an operating system to get started. NOOBS (New Out of the Box Software) is an easy-to-use operating system install manager for Raspberry Pi. The simplest way to get NOOBS is to buy an SD card with NOOBS pre-installed - \nRaspberry Pi 8GB Preloaded (NOOBS) Micro SD Card\n. Alternatively, you can download and install it on your SD card.\n\n\nExternal Speaker\n with 3.5mm audio cable - \nBuy on Amazon\n\n\nA \nUSB Keyboard \n Mouse\n, and an external \nHDMI Monitor\n - we also recommend having a USB keyboard and mouse as well as an HDMI monitor handy if you're unable to \nremote(SSH)\n into your Pi.\n\n\nInternet connection (Ethernet or WiFi)\n\n\n(Optional) WiFi Wireless Adapter for Pi 2 (\nBuy on Amazon\n).\n   \nNote:\n Pi 3 has built-in WiFi.\n\n\n\n\nFor extra credit, enable \nremote(SSH)\n into your device, eliminating the need for a monitor, keyboard and mouse - and learn how to tail logs for troubleshooting.\n\n\n\n\nLet's get started\n\n\nThe original Alexa on a Pi project required manual download of libraries/dependencies and updating configuration files, which is prone to human error. To make the process faster and easier, we've included an install script with the project that will take care of all the heavy lifting. Not only does this reduce setup time to less than an hour on a Raspberry Pi 3, it only requires developers to adjust three variables in a single install script.\n\n\nStep 1: Setting up your Pi\n\n\nConfigure your RaspberryPi like a original Alexa documentation, for this please completing steps: \n1,2,3,4,5 and 6\n from original documentation: \nRaspberry Pi\n\n\n\n\nStep 2: Override ALSA configuration\n\n\nMATRIX Creator has 8 physical microphone channels and an additional virtual beam formed channel that combines the physical ones. Utilize a microphone channel by placing the following in \n/home/pi/.asoundrc\n.\n\n\npcm.!default\n{\n  type asym\n  playback.pcm {\n    type hw\n    card 0\n    device 0\n  }\n  capture.pcm {\n    type file\n    file \n/tmp/matrix_micarray_channel_0\n\n    infile \n/tmp/matrix_micarray_channel_0\n\n    format \nraw\n\n    slave {\n        pcm sc\n    }\n  }\n}\n\n\n\n\n\n\nStep 3: Install MATRIX software and reboot\n\n\necho \ndeb http://packages.matrix.one/matrix-creator/ ./\n | sudo tee --append /etc/apt/sources.list;\nsudo apt-get update;\nsudo apt-get upgrade;\nsudo apt-get install libzmq3-dev xc3sprog matrix-creator-openocd wiringpi cmake g++ git;\nsudo apt-get install matrix-creator-init matrix-creator-malos\nsudo reboot\n\n\n\n\n\n\nStep 4: Run your web service, sample app and wake word engine\n\n\nReturn to \nRaspberry Pi\n documentation and execute \nStep 7\n but in the last terminal select the \nsensory\n wake word engine with:\n\n\ncd ~/Desktop/alexa-avs-sample-app/samples\ncd wakeWordAgent/src \n ./wakeWordAgent -e sensory\n\n\n\n\n\n\nStep 5: Talk to Alexa\n\n\nYou can now talk to Alexa by simply using the wake word \"Alexa\". Try the following -\n\n\nSay \"Alexa\", then wait for the beep. Now say \"what's the time?\"\n\n\nSay \"Alexa\", then wait for the beep. Now say \"what's the weather in Seattle?\"\n\n\nIf you prefer, you can also click on the \"Listen\" button, instead of using the wake word. Click the \"Listen\" button and wait for the audio cue before beginning to speak. It may take a second or two before you hear the audio cue.", 
            "title": "Alexa on Creator"
        }, 
        {
            "location": "/Demos/Alexa/#overview", 
            "text": "This guide provides step-by-step instructions for setting up AVS on a  Raspberry Pi  with a  MATRIX Creator . It demonstrates how to access and test AVS using our Java sample app (running on a Raspberry Pi), a Node.js server, and a third-party wake word engine using MATRIX mic array. You will use the Node.js server to obtain a Login with Amazon (LWA) authorization code by visiting a website using your Raspberry Pi's web browser.", 
            "title": "Overview"
        }, 
        {
            "location": "/Demos/Alexa/#required-hardware", 
            "text": "Before you get started, let's review what you'll need.   Raspberry Pi 3  (Recommended) or  Pi 2 Model B  (Supported)  - Buy at Amazon -  Pi 3  or  Pi 2 .  MATRIX Creator  - Raspberry Pi does not have a built-in microphone, the MATRIX Creator has an 8 mic array for Alexa -  Buy MATRIX Creator  Micro-USB power cable  for Raspberry Pi.  Micro SD Card  (Minimum 8 GB) - You need an operating system to get started. NOOBS (New Out of the Box Software) is an easy-to-use operating system install manager for Raspberry Pi. The simplest way to get NOOBS is to buy an SD card with NOOBS pre-installed -  Raspberry Pi 8GB Preloaded (NOOBS) Micro SD Card . Alternatively, you can download and install it on your SD card.  External Speaker  with 3.5mm audio cable -  Buy on Amazon  A  USB Keyboard   Mouse , and an external  HDMI Monitor  - we also recommend having a USB keyboard and mouse as well as an HDMI monitor handy if you're unable to  remote(SSH)  into your Pi.  Internet connection (Ethernet or WiFi)  (Optional) WiFi Wireless Adapter for Pi 2 ( Buy on Amazon ).\n    Note:  Pi 3 has built-in WiFi.   For extra credit, enable  remote(SSH)  into your device, eliminating the need for a monitor, keyboard and mouse - and learn how to tail logs for troubleshooting.", 
            "title": "Required hardware"
        }, 
        {
            "location": "/Demos/Alexa/#lets-get-started", 
            "text": "The original Alexa on a Pi project required manual download of libraries/dependencies and updating configuration files, which is prone to human error. To make the process faster and easier, we've included an install script with the project that will take care of all the heavy lifting. Not only does this reduce setup time to less than an hour on a Raspberry Pi 3, it only requires developers to adjust three variables in a single install script.", 
            "title": "Let's get started"
        }, 
        {
            "location": "/Demos/Alexa/#step-1-setting-up-your-pi", 
            "text": "Configure your RaspberryPi like a original Alexa documentation, for this please completing steps:  1,2,3,4,5 and 6  from original documentation:  Raspberry Pi", 
            "title": "Step 1: Setting up your Pi"
        }, 
        {
            "location": "/Demos/Alexa/#step-2-override-alsa-configuration", 
            "text": "MATRIX Creator has 8 physical microphone channels and an additional virtual beam formed channel that combines the physical ones. Utilize a microphone channel by placing the following in  /home/pi/.asoundrc .  pcm.!default\n{\n  type asym\n  playback.pcm {\n    type hw\n    card 0\n    device 0\n  }\n  capture.pcm {\n    type file\n    file  /tmp/matrix_micarray_channel_0 \n    infile  /tmp/matrix_micarray_channel_0 \n    format  raw \n    slave {\n        pcm sc\n    }\n  }\n}", 
            "title": "Step 2: Override ALSA configuration"
        }, 
        {
            "location": "/Demos/Alexa/#step-3-install-matrix-software-and-reboot", 
            "text": "echo  deb http://packages.matrix.one/matrix-creator/ ./  | sudo tee --append /etc/apt/sources.list;\nsudo apt-get update;\nsudo apt-get upgrade;\nsudo apt-get install libzmq3-dev xc3sprog matrix-creator-openocd wiringpi cmake g++ git;\nsudo apt-get install matrix-creator-init matrix-creator-malos\nsudo reboot", 
            "title": "Step 3: Install MATRIX software and reboot"
        }, 
        {
            "location": "/Demos/Alexa/#step-4-run-your-web-service-sample-app-and-wake-word-engine", 
            "text": "Return to  Raspberry Pi  documentation and execute  Step 7  but in the last terminal select the  sensory  wake word engine with:  cd ~/Desktop/alexa-avs-sample-app/samples\ncd wakeWordAgent/src   ./wakeWordAgent -e sensory", 
            "title": "Step 4: Run your web service, sample app and wake word engine"
        }, 
        {
            "location": "/Demos/Alexa/#step-5-talk-to-alexa", 
            "text": "You can now talk to Alexa by simply using the wake word \"Alexa\". Try the following -  Say \"Alexa\", then wait for the beep. Now say \"what's the time?\"  Say \"Alexa\", then wait for the beep. Now say \"what's the weather in Seattle?\"  If you prefer, you can also click on the \"Listen\" button, instead of using the wake word. Click the \"Listen\" button and wait for the audio cue before beginning to speak. It may take a second or two before you hear the audio cue.", 
            "title": "Step 5: Talk to Alexa"
        }, 
        {
            "location": "/dictionary/", 
            "text": "Glossary\n\n\nThe dictionary will describe all components of the system.\n\n\nMATRIX Open Source (MATRIX OS)\n\n\nTop-level application layer which integrates into the MATRIX Creator hardware, and Raspberry Pi. \n\n\nMATRIX Command Line Interface (MATRIX CLI)\n\n\nCommand Line Interface that integrates into the top-level MATRIX OS. Built to allow quick application development and application management on the Raspberry Pi.\n\n\nMALOS\n\n\nC++ abstraction layer for HAL. Hosts the ZeroMQ communication layer which makes the sensors accessible via high-level interfaces. \n\n\nMALOS Eye\n\n\nC++ Computer Vision Framework.\n\n\nHardware Abstraction Layer (HAL)\n\n\nC++ drivers for sensors and available components.\n\n\nApplications\n\n\nAn application is a service running inside of a container on a physical or simulated instance of a device. Driven by MATRIX OS.\n\n\nDevices\n\n\nA device is a physical or simulated instance of the hardware. Determined by the MATRIX OS.\n\n\nCross-Talk\n\n\nEvent-based triggers that can occur across applications, and/or devices.", 
            "title": "Dictionary"
        }, 
        {
            "location": "/dictionary/#glossary", 
            "text": "The dictionary will describe all components of the system.", 
            "title": "Glossary"
        }, 
        {
            "location": "/dictionary/#matrix-open-source-matrix-os", 
            "text": "Top-level application layer which integrates into the MATRIX Creator hardware, and Raspberry Pi.", 
            "title": "MATRIX Open Source (MATRIX OS)"
        }, 
        {
            "location": "/dictionary/#matrix-command-line-interface-matrix-cli", 
            "text": "Command Line Interface that integrates into the top-level MATRIX OS. Built to allow quick application development and application management on the Raspberry Pi.", 
            "title": "MATRIX Command Line Interface (MATRIX CLI)"
        }, 
        {
            "location": "/dictionary/#malos", 
            "text": "C++ abstraction layer for HAL. Hosts the ZeroMQ communication layer which makes the sensors accessible via high-level interfaces.", 
            "title": "MALOS"
        }, 
        {
            "location": "/dictionary/#malos-eye", 
            "text": "C++ Computer Vision Framework.", 
            "title": "MALOS Eye"
        }, 
        {
            "location": "/dictionary/#hardware-abstraction-layer-hal", 
            "text": "C++ drivers for sensors and available components.", 
            "title": "Hardware Abstraction Layer (HAL)"
        }, 
        {
            "location": "/dictionary/#applications", 
            "text": "An application is a service running inside of a container on a physical or simulated instance of a device. Driven by MATRIX OS.", 
            "title": "Applications"
        }, 
        {
            "location": "/dictionary/#devices", 
            "text": "A device is a physical or simulated instance of the hardware. Determined by the MATRIX OS.", 
            "title": "Devices"
        }, 
        {
            "location": "/dictionary/#cross-talk", 
            "text": "Event-based triggers that can occur across applications, and/or devices.", 
            "title": "Cross-Talk"
        }
    ]
}